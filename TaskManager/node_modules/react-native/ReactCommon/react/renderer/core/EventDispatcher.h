/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

<<<<<<< HEAD
#include <react/renderer/core/EventBeat.h>
#include <react/renderer/core/EventListener.h>
#include <react/renderer/core/EventLogger.h>
#include <react/renderer/core/EventQueue.h>
#include <react/renderer/core/EventQueueProcessor.h>
#include <react/renderer/core/StatePipe.h>
#include <react/renderer/core/StateUpdate.h>
#include <memory>
=======
#include <react/renderer/core/BatchedEventQueue.h>
#include <react/renderer/core/EventBeat.h>
#include <react/renderer/core/EventListener.h>
#include <react/renderer/core/EventPriority.h>
#include <react/renderer/core/EventQueueProcessor.h>
#include <react/renderer/core/StateUpdate.h>
#include <react/renderer/core/UnbatchedEventQueue.h>
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251

namespace facebook::react {

struct RawEvent;
<<<<<<< HEAD
class RuntimeScheduler;
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251

/*
 * Represents event-delivery infrastructure.
 * Particular `EventEmitter` clases use this for sending events.
 */
class EventDispatcher {
 public:
  using Shared = std::shared_ptr<const EventDispatcher>;
  using Weak = std::weak_ptr<const EventDispatcher>;

  EventDispatcher(
      const EventQueueProcessor& eventProcessor,
<<<<<<< HEAD
      const EventBeat::Factory& asynchronousEventBeatFactory,
      const EventBeat::SharedOwnerBox& ownerBox,
      RuntimeScheduler& runtimeScheduler,
      StatePipe statePipe,
      std::weak_ptr<EventLogger> eventLogger);
=======
      const EventBeat::Factory& synchonousEventBeatFactory,
      const EventBeat::Factory& asynchronousEventBeatFactory,
      const EventBeat::SharedOwnerBox& ownerBox);
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251

  /*
   * Dispatches a raw event with given priority using event-delivery pipe.
   */
<<<<<<< HEAD
  void dispatchEvent(RawEvent&& rawEvent) const;

  /*
   * Experimental API exposed to support EventEmitter::experimental_flushSync.
   */
  void experimental_flushSync() const;
=======
  void dispatchEvent(RawEvent&& rawEvent, EventPriority priority) const;
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251

  /*
   * Dispatches a raw event with asynchronous batched priority. Before the
   * dispatch we make sure that no other RawEvent of same type and same target
   * is on the queue.
   */
  void dispatchUniqueEvent(RawEvent&& rawEvent) const;

  /*
   * Dispatches a state update with given priority.
   */
<<<<<<< HEAD
  void dispatchStateUpdate(StateUpdate&& stateUpdate) const;
=======
  void dispatchStateUpdate(StateUpdate&& stateUpdate, EventPriority priority)
      const;
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251

#pragma mark - Event listeners
  /*
   * Adds provided event listener to the event dispatcher.
   */
<<<<<<< HEAD
  void addListener(std::shared_ptr<const EventListener> listener) const;
=======
  void addListener(const std::shared_ptr<const EventListener>& listener) const;
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251

  /*
   * Removes provided event listener to the event dispatcher.
   */
  void removeListener(
      const std::shared_ptr<const EventListener>& listener) const;

 private:
<<<<<<< HEAD
  EventQueue eventQueue_;
  const StatePipe statePipe_;

  mutable EventListenerContainer eventListeners_;
  const std::weak_ptr<EventLogger> eventLogger_;
=======
  const EventQueue& getEventQueue(EventPriority priority) const;

  std::unique_ptr<UnbatchedEventQueue> synchronousUnbatchedQueue_;
  std::unique_ptr<BatchedEventQueue> synchronousBatchedQueue_;
  std::unique_ptr<UnbatchedEventQueue> asynchronousUnbatchedQueue_;
  std::unique_ptr<BatchedEventQueue> asynchronousBatchedQueue_;

  mutable EventListenerContainer eventListeners_;
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
};

} // namespace facebook::react
