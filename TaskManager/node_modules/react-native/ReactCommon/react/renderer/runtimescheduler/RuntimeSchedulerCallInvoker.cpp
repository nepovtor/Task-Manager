/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#include "RuntimeSchedulerCallInvoker.h"
#include "RuntimeScheduler.h"

#include <utility>

namespace facebook::react {

RuntimeSchedulerCallInvoker::RuntimeSchedulerCallInvoker(
    std::weak_ptr<RuntimeScheduler> runtimeScheduler)
    : runtimeScheduler_(std::move(runtimeScheduler)) {}

void RuntimeSchedulerCallInvoker::invokeAsync(CallFunc&& func) noexcept {
  if (auto runtimeScheduler = runtimeScheduler_.lock()) {
    runtimeScheduler->scheduleWork(
<<<<<<< HEAD
        [func = std::move(func)](jsi::Runtime& rt) { func(rt); });
=======
        [func = std::move(func)](jsi::Runtime&) { func(); });
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  }
}

void RuntimeSchedulerCallInvoker::invokeSync(CallFunc&& func) {
  if (auto runtimeScheduler = runtimeScheduler_.lock()) {
    runtimeScheduler->executeNowOnTheSameThread(
<<<<<<< HEAD
        [func = std::move(func)](jsi::Runtime& rt) { func(rt); });
=======
        [func = std::move(func)](jsi::Runtime&) { func(); });
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  }
}

void RuntimeSchedulerCallInvoker::invokeAsync(
    SchedulerPriority priority,
    CallFunc&& func) noexcept {
  if (auto runtimeScheduler = runtimeScheduler_.lock()) {
    runtimeScheduler->scheduleTask(
<<<<<<< HEAD
        priority, [func = std::move(func)](jsi::Runtime& rt) { func(rt); });
=======
        priority, [func = std::move(func)](jsi::Runtime&) { func(); });
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  }
}

} // namespace facebook::react
