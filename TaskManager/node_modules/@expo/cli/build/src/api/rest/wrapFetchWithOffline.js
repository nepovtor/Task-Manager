"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "wrapFetchWithOffline", {
    enumerable: true,
<<<<<<< HEAD
    get: function() {
        return wrapFetchWithOffline;
    }
});
const _env = require("../../utils/env");
const debug = require('debug')('expo:api:fetch:offline');
=======
    get: ()=>wrapFetchWithOffline
});
const _env = require("../../utils/env");
const debug = require("debug")("expo:api:fetch:offline");
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
function wrapFetchWithOffline(fetchFunction) {
    // NOTE(EvanBacon): DO NOT RETURN AN ASYNC WRAPPER. THIS BREAKS LOADING INDICATORS.
    return function fetchWithOffline(url, options = {}) {
        if (_env.env.EXPO_OFFLINE) {
<<<<<<< HEAD
            debug('Skipping network request: ' + url);
            const abortController = new AbortController();
            abortController.abort();
            options.signal = abortController.signal;
=======
            debug("Skipping network request: " + url);
            options.timeout = 1;
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
        }
        return fetchFunction(url, options);
    };
}

//# sourceMappingURL=wrapFetchWithOffline.js.map