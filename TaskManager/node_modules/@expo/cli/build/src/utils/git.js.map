<<<<<<< HEAD
{"version":3,"sources":["../../../src/utils/git.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\n\nimport { env } from './env';\nimport { isInteractive } from './interactive';\nimport { confirmAsync } from './prompts';\nimport * as Log from '../log';\n\nexport async function maybeBailOnGitStatusAsync(): Promise<boolean> {\n  if (env.EXPO_NO_GIT_STATUS) {\n    Log.warn(\n      'Git status is dirty but the command will continue because EXPO_NO_GIT_STATUS is enabled...'\n    );\n    return false;\n  }\n  const isGitStatusClean = await validateGitStatusAsync();\n\n  // Give people a chance to bail out if git working tree is dirty\n  if (!isGitStatusClean) {\n    if (!isInteractive()) {\n      Log.warn(\n        `Git status is dirty but the command will continue because the terminal is not interactive.`\n      );\n      return false;\n    }\n\n    Log.log();\n    const answer = await confirmAsync({\n      message: `Continue with uncommited changes?`,\n    });\n\n    if (!answer) {\n      return true;\n    }\n\n    Log.log();\n  }\n  return false;\n}\n\nexport async function validateGitStatusAsync(): Promise<boolean> {\n  let workingTreeStatus = 'unknown';\n  try {\n    const result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'clean') {\n    return true;\n  } else if (workingTreeStatus === 'dirty') {\n    logWarning(\n      'Git branch has uncommited file changes',\n      `It's recommended to commit all changes before proceeding in case you want to revert generated changes.`\n    );\n  } else {\n    logWarning(\n      'No git repo found in current directory',\n      `Use git to track file changes before running commands that modify project files.`\n    );\n  }\n\n  return false;\n}\n\nfunction logWarning(warning: string, hint: string) {\n  Log.warn(chalk.bold`! ` + warning);\n  Log.log(chalk.gray`\\u203A ` + chalk.gray(hint));\n}\n"],"names":["maybeBailOnGitStatusAsync","validateGitStatusAsync","env","EXPO_NO_GIT_STATUS","Log","warn","isGitStatusClean","isInteractive","log","answer","confirmAsync","message","workingTreeStatus","result","spawnAsync","stdout","logWarning","warning","hint","chalk","bold","gray"],"mappings":";;;;;;;;;;;IAQsBA,yBAAyB;eAAzBA;;IAgCAC,sBAAsB;eAAtBA;;;;gEAxCC;;;;;;;gEACL;;;;;;qBAEE;6BACU;yBACD;6DACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEd,eAAeD;IACpB,IAAIE,QAAG,CAACC,kBAAkB,EAAE;QAC1BC,KAAIC,IAAI,CACN;QAEF,OAAO;IACT;IACA,MAAMC,mBAAmB,MAAML;IAE/B,gEAAgE;IAChE,IAAI,CAACK,kBAAkB;QACrB,IAAI,CAACC,IAAAA,0BAAa,KAAI;YACpBH,KAAIC,IAAI,CACN,CAAC,0FAA0F,CAAC;YAE9F,OAAO;QACT;QAEAD,KAAII,GAAG;QACP,MAAMC,SAAS,MAAMC,IAAAA,qBAAY,EAAC;YAChCC,SAAS,CAAC,iCAAiC,CAAC;QAC9C;QAEA,IAAI,CAACF,QAAQ;YACX,OAAO;QACT;QAEAL,KAAII,GAAG;IACT;IACA,OAAO;AACT;AAEO,eAAeP;IACpB,IAAIW,oBAAoB;IACxB,IAAI;QACF,MAAMC,SAAS,MAAMC,IAAAA,qBAAU,EAAC,OAAO;YAAC;YAAU;SAAc;QAChEF,oBAAoBC,OAAOE,MAAM,KAAK,KAAK,UAAU;IACvD,EAAE,OAAM;IACN,8BAA8B;IAC9B,uCAAuC;IACzC;IAEA,IAAIH,sBAAsB,SAAS;QACjC,OAAO;IACT,OAAO,IAAIA,sBAAsB,SAAS;QACxCI,WACE,0CACA,CAAC,sGAAsG,CAAC;IAE5G,OAAO;QACLA,WACE,0CACA,CAAC,gFAAgF,CAAC;IAEtF;IAEA,OAAO;AACT;AAEA,SAASA,WAAWC,OAAe,EAAEC,IAAY;IAC/Cd,KAAIC,IAAI,CAACc,gBAAK,CAACC,IAAI,CAAC,EAAE,CAAC,GAAGH;IAC1Bb,KAAII,GAAG,CAACW,gBAAK,CAACE,IAAI,CAAC,OAAO,CAAC,GAAGF,gBAAK,CAACE,IAAI,CAACH;AAC3C"}
=======
{"version":3,"sources":["../../../src/utils/git.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\n\nimport { env } from './env';\nimport { isInteractive } from './interactive';\nimport { confirmAsync } from './prompts';\nimport * as Log from '../log';\n\nexport async function maybeBailOnGitStatusAsync(): Promise<boolean> {\n  if (env.EXPO_NO_GIT_STATUS) {\n    Log.warn(\n      'Git status is dirty but the command will continue because EXPO_NO_GIT_STATUS is enabled...'\n    );\n    return false;\n  }\n  const isGitStatusClean = await validateGitStatusAsync();\n\n  // Give people a chance to bail out if git working tree is dirty\n  if (!isGitStatusClean) {\n    if (!isInteractive()) {\n      Log.warn(\n        `Git status is dirty but the command will continue because the terminal is not interactive.`\n      );\n      return false;\n    }\n\n    Log.log();\n    const answer = await confirmAsync({\n      message: `Would you like to proceed?`,\n    });\n\n    if (!answer) {\n      return true;\n    }\n\n    Log.log();\n  }\n  return false;\n}\n\nexport async function validateGitStatusAsync(): Promise<boolean> {\n  let workingTreeStatus = 'unknown';\n  try {\n    const result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'clean') {\n    Log.log(`Your git working tree is ${chalk.green('clean')}`);\n    Log.log('To revert the changes after this command completes, you can run the following:');\n    Log.log('  git clean --force && git reset --hard');\n    return true;\n  } else if (workingTreeStatus === 'dirty') {\n    Log.log(`${chalk.bold('Warning!')} Your git working tree is ${chalk.red('dirty')}.`);\n    Log.log(\n      `It's recommended to ${chalk.bold(\n        'commit all your changes before proceeding'\n      )}, so you can revert the changes made by this command if necessary.`\n    );\n  } else {\n    Log.log(\"We couldn't find a git repository in your project directory.\");\n    Log.log(\"It's recommended to back up your project before proceeding.\");\n  }\n\n  return false;\n}\n"],"names":["maybeBailOnGitStatusAsync","validateGitStatusAsync","env","EXPO_NO_GIT_STATUS","Log","warn","isGitStatusClean","isInteractive","log","answer","confirmAsync","message","workingTreeStatus","result","spawnAsync","stdout","chalk","green","bold","red"],"mappings":"AAAA;;;;;;;;;;;IAQsBA,yBAAyB,MAAzBA,yBAAyB;IAgCzBC,sBAAsB,MAAtBA,sBAAsB;;;8DAxCrB,mBAAmB;;;;;;;8DACxB,OAAO;;;;;;qBAEL,OAAO;6BACG,eAAe;yBAChB,WAAW;2DACnB,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEtB,eAAeD,yBAAyB,GAAqB;IAClE,IAAIE,IAAG,IAAA,CAACC,kBAAkB,EAAE;QAC1BC,IAAG,CAACC,IAAI,CACN,4FAA4F,CAC7F,CAAC;QACF,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAMC,gBAAgB,GAAG,MAAML,sBAAsB,EAAE,AAAC;IAExD,gEAAgE;IAChE,IAAI,CAACK,gBAAgB,EAAE;QACrB,IAAI,CAACC,IAAAA,YAAa,cAAA,GAAE,EAAE;YACpBH,IAAG,CAACC,IAAI,CACN,CAAC,0FAA0F,CAAC,CAC7F,CAAC;YACF,OAAO,KAAK,CAAC;QACf,CAAC;QAEDD,IAAG,CAACI,GAAG,EAAE,CAAC;QACV,MAAMC,MAAM,GAAG,MAAMC,IAAAA,QAAY,aAAA,EAAC;YAChCC,OAAO,EAAE,CAAC,0BAA0B,CAAC;SACtC,CAAC,AAAC;QAEH,IAAI,CAACF,MAAM,EAAE;YACX,OAAO,IAAI,CAAC;QACd,CAAC;QAEDL,IAAG,CAACI,GAAG,EAAE,CAAC;IACZ,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAEM,eAAeP,sBAAsB,GAAqB;IAC/D,IAAIW,iBAAiB,GAAG,SAAS,AAAC;IAClC,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMC,IAAAA,WAAU,EAAA,QAAA,EAAC,KAAK,EAAE;YAAC,QAAQ;YAAE,aAAa;SAAC,CAAC,AAAC;QAClEF,iBAAiB,GAAGC,MAAM,CAACE,MAAM,KAAK,EAAE,GAAG,OAAO,GAAG,OAAO,CAAC;IAC/D,EAAE,OAAM;IACN,8BAA8B;IAC9B,uCAAuC;IACzC,CAAC;IAED,IAAIH,iBAAiB,KAAK,OAAO,EAAE;QACjCR,IAAG,CAACI,GAAG,CAAC,CAAC,yBAAyB,EAAEQ,MAAK,EAAA,QAAA,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5Db,IAAG,CAACI,GAAG,CAAC,gFAAgF,CAAC,CAAC;QAC1FJ,IAAG,CAACI,GAAG,CAAC,yCAAyC,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC;IACd,OAAO,IAAII,iBAAiB,KAAK,OAAO,EAAE;QACxCR,IAAG,CAACI,GAAG,CAAC,CAAC,EAAEQ,MAAK,EAAA,QAAA,CAACE,IAAI,CAAC,UAAU,CAAC,CAAC,0BAA0B,EAAEF,MAAK,EAAA,QAAA,CAACG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrFf,IAAG,CAACI,GAAG,CACL,CAAC,oBAAoB,EAAEQ,MAAK,EAAA,QAAA,CAACE,IAAI,CAC/B,2CAA2C,CAC5C,CAAC,kEAAkE,CAAC,CACtE,CAAC;IACJ,OAAO;QACLd,IAAG,CAACI,GAAG,CAAC,8DAA8D,CAAC,CAAC;QACxEJ,IAAG,CAACI,GAAG,CAAC,6DAA6D,CAAC,CAAC;IACzE,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC"}
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
