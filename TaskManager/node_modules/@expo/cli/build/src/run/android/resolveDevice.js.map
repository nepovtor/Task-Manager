<<<<<<< HEAD
{"version":3,"sources":["../../../../src/run/android/resolveDevice.ts"],"sourcesContent":["import { AndroidDeviceManager } from '../../start/platforms/android/AndroidDeviceManager';\nimport { logDeviceArgument } from '../hints';\n\nconst debug = require('debug')('expo:android:resolveDevice');\n\n/** Given a `device` argument from the CLI, parse and prompt our way to a usable device for building. */\nexport async function resolveDeviceAsync(device?: string | boolean) {\n  if (!device) {\n    const manager = await AndroidDeviceManager.resolveAsync();\n    debug(`Resolved default device (name: ${manager.device.name}, pid: ${manager.device.pid})`);\n    return manager;\n  }\n\n  debug(`Resolving device from argument: ${device}`);\n  const manager =\n    device === true\n      ? // `--device` (no props after)\n        await AndroidDeviceManager.resolveAsync({ shouldPrompt: true })\n      : // `--device <name>`\n        await AndroidDeviceManager.resolveFromNameAsync(device);\n  logDeviceArgument(manager.device.name);\n  return manager;\n}\n"],"names":["resolveDeviceAsync","debug","require","device","manager","AndroidDeviceManager","resolveAsync","name","pid","shouldPrompt","resolveFromNameAsync","logDeviceArgument"],"mappings":";;;;+BAMsBA;;;eAAAA;;;sCANe;uBACH;AAElC,MAAMC,QAAQC,QAAQ,SAAS;AAGxB,eAAeF,mBAAmBG,MAAyB;IAChE,IAAI,CAACA,QAAQ;QACX,MAAMC,UAAU,MAAMC,0CAAoB,CAACC,YAAY;QACvDL,MAAM,CAAC,+BAA+B,EAAEG,QAAQD,MAAM,CAACI,IAAI,CAAC,OAAO,EAAEH,QAAQD,MAAM,CAACK,GAAG,CAAC,CAAC,CAAC;QAC1F,OAAOJ;IACT;IAEAH,MAAM,CAAC,gCAAgC,EAAEE,QAAQ;IACjD,MAAMC,UACJD,WAAW,OAEP,MAAME,0CAAoB,CAACC,YAAY,CAAC;QAAEG,cAAc;IAAK,KAE7D,MAAMJ,0CAAoB,CAACK,oBAAoB,CAACP;IACtDQ,IAAAA,wBAAiB,EAACP,QAAQD,MAAM,CAACI,IAAI;IACrC,OAAOH;AACT"}
=======
{"version":3,"sources":["../../../../src/run/android/resolveDevice.ts"],"sourcesContent":["import { AndroidDeviceManager } from '../../start/platforms/android/AndroidDeviceManager';\nimport { logDeviceArgument } from '../hints';\n\nconst debug = require('debug')('expo:android:resolveDevice');\n\n/** Given a `device` argument from the CLI, parse and prompt our way to a usable device for building. */\nexport async function resolveDeviceAsync(device?: string | boolean) {\n  if (!device) {\n    const manager = await AndroidDeviceManager.resolveAsync();\n    debug(`Resolved default device (name: ${manager.device.name}, pid: ${manager.device.pid})`);\n    return manager;\n  }\n\n  debug(`Resolving device from argument: ${device}`);\n  const manager =\n    device === true\n      ? // `--device` (no props after)\n        await AndroidDeviceManager.resolveAsync({ shouldPrompt: true })\n      : // `--device <name>`\n        await AndroidDeviceManager.resolveFromNameAsync(device);\n  logDeviceArgument(manager.device.name);\n  return manager;\n}\n"],"names":["resolveDeviceAsync","debug","require","device","manager","AndroidDeviceManager","resolveAsync","name","pid","shouldPrompt","resolveFromNameAsync","logDeviceArgument"],"mappings":"AAAA;;;;+BAMsBA,oBAAkB;;aAAlBA,kBAAkB;;sCANH,oDAAoD;uBACvD,UAAU;AAE5C,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,4BAA4B,CAAC,AAAC;AAGtD,eAAeF,kBAAkB,CAACG,MAAyB,EAAE;IAClE,IAAI,CAACA,MAAM,EAAE;QACX,MAAMC,OAAO,GAAG,MAAMC,qBAAoB,qBAAA,CAACC,YAAY,EAAE,AAAC;QAC1DL,KAAK,CAAC,CAAC,+BAA+B,EAAEG,OAAO,CAACD,MAAM,CAACI,IAAI,CAAC,OAAO,EAAEH,OAAO,CAACD,MAAM,CAACK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5F,OAAOJ,OAAO,CAAC;IACjB,CAAC;IAEDH,KAAK,CAAC,CAAC,gCAAgC,EAAEE,MAAM,CAAC,CAAC,CAAC,CAAC;IACnD,MAAMC,QAAO,GACXD,MAAM,KAAK,IAAI,GAEX,MAAME,qBAAoB,qBAAA,CAACC,YAAY,CAAC;QAAEG,YAAY,EAAE,IAAI;KAAE,CAAC,GAE/D,MAAMJ,qBAAoB,qBAAA,CAACK,oBAAoB,CAACP,MAAM,CAAC,AAAC;IAC9DQ,IAAAA,MAAiB,kBAAA,EAACP,QAAO,CAACD,MAAM,CAACI,IAAI,CAAC,CAAC;IACvC,OAAOH,QAAO,CAAC;AACjB,CAAC"}
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
