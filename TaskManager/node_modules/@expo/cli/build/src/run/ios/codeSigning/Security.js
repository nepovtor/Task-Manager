"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
<<<<<<< HEAD
    extractCodeSigningInfo: function() {
        return extractCodeSigningInfo;
    },
    extractSigningId: function() {
        return extractSigningId;
    },
    findIdentitiesAsync: function() {
        return findIdentitiesAsync;
    },
    getCertificateForSigningIdAsync: function() {
        return getCertificateForSigningIdAsync;
    },
    getSecurityPemAsync: function() {
        return getSecurityPemAsync;
    },
    resolveCertificateSigningInfoAsync: function() {
        return resolveCertificateSigningInfoAsync;
    },
    resolveIdentitiesAsync: function() {
        return resolveIdentitiesAsync;
    }
});
function _spawnasync() {
    const data = /*#__PURE__*/ _interop_require_default(require("@expo/spawn-async"));
    _spawnasync = function() {
=======
    getSecurityPemAsync: ()=>getSecurityPemAsync,
    getCertificateForSigningIdAsync: ()=>getCertificateForSigningIdAsync,
    findIdentitiesAsync: ()=>findIdentitiesAsync,
    extractCodeSigningInfo: ()=>extractCodeSigningInfo,
    resolveIdentitiesAsync: ()=>resolveIdentitiesAsync,
    resolveCertificateSigningInfoAsync: ()=>resolveCertificateSigningInfoAsync,
    extractSigningId: ()=>extractSigningId
});
function _spawnAsync() {
    const data = /*#__PURE__*/ _interopRequireDefault(require("@expo/spawn-async"));
    _spawnAsync = function() {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
        return data;
    };
    return data;
}
<<<<<<< HEAD
function _nodeforge() {
    const data = /*#__PURE__*/ _interop_require_default(require("node-forge"));
    _nodeforge = function() {
=======
function _nodeForge() {
    const data = /*#__PURE__*/ _interopRequireDefault(require("node-forge"));
    _nodeForge = function() {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
        return data;
    };
    return data;
}
<<<<<<< HEAD
const _SecurityBinPrerequisite = require("../../../start/doctor/SecurityBinPrerequisite");
const _errors = require("../../../utils/errors");
function _interop_require_default(obj) {
=======
const _securityBinPrerequisite = require("../../../start/doctor/SecurityBinPrerequisite");
const _errors = require("../../../utils/errors");
function _interopRequireDefault(obj) {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function getSecurityPemAsync(id) {
<<<<<<< HEAD
    var _stdout_trim, _stdout;
    const pem = (_stdout = (await (0, _spawnasync().default)('security', [
        'find-certificate',
        '-c',
        id,
        '-p'
    ])).stdout) == null ? void 0 : (_stdout_trim = _stdout.trim) == null ? void 0 : _stdout_trim.call(_stdout);
=======
    var ref;
    const pem = (ref = (await (0, _spawnAsync().default)("security", [
        "find-certificate",
        "-c",
        id,
        "-p"
    ])).stdout) == null ? void 0 : ref.trim == null ? void 0 : ref.trim();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    if (!pem) {
        throw new _errors.CommandError(`Failed to get PEM certificate for ID "${id}" using the 'security' bin`);
    }
    return pem;
}
async function getCertificateForSigningIdAsync(id) {
    const pem = await getSecurityPemAsync(id);
<<<<<<< HEAD
    return _nodeforge().default.pki.certificateFromPem(pem);
}
async function findIdentitiesAsync() {
    var _stdout_trim, _stdout;
    await _SecurityBinPrerequisite.SecurityBinPrerequisite.instance.assertAsync();
    const results = (_stdout_trim = (_stdout = (await (0, _spawnasync().default)('security', [
        'find-identity',
        '-p',
        'codesigning',
        '-v'
    ])).stdout).trim) == null ? void 0 : _stdout_trim.call(_stdout);
=======
    return _nodeForge().default.pki.certificateFromPem(pem);
}
async function findIdentitiesAsync() {
    var _stdout, ref;
    await _securityBinPrerequisite.SecurityBinPrerequisite.instance.assertAsync();
    const results = (ref = (_stdout = (await (0, _spawnAsync().default)("security", [
        "find-identity",
        "-p",
        "codesigning",
        "-v"
    ])).stdout).trim) == null ? void 0 : ref.call(_stdout);
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    // Returns a string like:
    // 1) 12222234253761286351826735HGKDHAJGF45283 "Apple Development: Evan Bacon (AA00AABB0A)" (CSSMERR_TP_CERT_REVOKED)
    // 2) 12312234253761286351826735HGKDHAJGF45283 "Apple Development: bacon@expo.io (BB00AABB0A)"
    // 3) 12442234253761286351826735HGKDHAJGF45283 "iPhone Distribution: Evan Bacon (CC00AABB0B)" (CSSMERR_TP_CERT_REVOKED)
    // 4) 15672234253761286351826735HGKDHAJGF45283 "Apple Development: Evan Bacon (AA00AABB0A)"
    //  4 valid identities found
<<<<<<< HEAD
    const parsed = results.split('\n').map((line)=>extractCodeSigningInfo(line)).filter(Boolean);
=======
    const parsed = results.split("\n").map((line)=>extractCodeSigningInfo(line)).filter(Boolean);
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    // Remove duplicates
    return [
        ...new Set(parsed)
    ];
}
function extractCodeSigningInfo(value) {
<<<<<<< HEAD
    var _value_match;
    return ((_value_match = value.match(/^\s*\d+\).+"(.+Develop(ment|er).+)"$/)) == null ? void 0 : _value_match[1]) ?? null;
=======
    var ref;
    var ref1;
    return (ref1 = (ref = value.match(/^\s*\d+\).+"(.+Develop(ment|er).+)"$/)) == null ? void 0 : ref[1]) != null ? ref1 : null;
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}
async function resolveIdentitiesAsync(identities) {
    const values = identities.map(extractSigningId).filter(Boolean);
    return Promise.all(values.map(resolveCertificateSigningInfoAsync));
}
async function resolveCertificateSigningInfoAsync(signingCertificateId) {
<<<<<<< HEAD
    var _certificate_subject_getField, _certificate_subject_getField1, _certificate_subject_getField2;
    const certificate = await getCertificateForSigningIdAsync(signingCertificateId);
    return {
        signingCertificateId,
        codeSigningInfo: (_certificate_subject_getField = certificate.subject.getField('CN')) == null ? void 0 : _certificate_subject_getField.value,
        appleTeamName: (_certificate_subject_getField1 = certificate.subject.getField('O')) == null ? void 0 : _certificate_subject_getField1.value,
        appleTeamId: (_certificate_subject_getField2 = certificate.subject.getField('OU')) == null ? void 0 : _certificate_subject_getField2.value
    };
}
function extractSigningId(codeSigningInfo) {
    var _codeSigningInfo_match;
    return ((_codeSigningInfo_match = codeSigningInfo.match(/.*\(([a-zA-Z0-9]+)\)/)) == null ? void 0 : _codeSigningInfo_match[1]) ?? null;
=======
    var ref, ref1, ref2;
    const certificate = await getCertificateForSigningIdAsync(signingCertificateId);
    return {
        signingCertificateId,
        codeSigningInfo: (ref = certificate.subject.getField("CN")) == null ? void 0 : ref.value,
        appleTeamName: (ref1 = certificate.subject.getField("O")) == null ? void 0 : ref1.value,
        appleTeamId: (ref2 = certificate.subject.getField("OU")) == null ? void 0 : ref2.value
    };
}
function extractSigningId(codeSigningInfo) {
    var ref;
    var ref1;
    return (ref1 = (ref = codeSigningInfo.match(/.*\(([a-zA-Z0-9]+)\)/)) == null ? void 0 : ref[1]) != null ? ref1 : null;
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

//# sourceMappingURL=Security.js.map