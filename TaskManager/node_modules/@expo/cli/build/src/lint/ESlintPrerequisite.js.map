<<<<<<< HEAD
{"version":3,"sources":["../../../src/lint/ESlintPrerequisite.ts"],"sourcesContent":["import JsonFile, { JSONObject } from '@expo/json-file';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nimport { Log } from '../log';\nimport { PrerequisiteCommandError, ProjectPrerequisite } from '../start/doctor/Prerequisite';\nimport { ensureDependenciesAsync } from '../start/doctor/dependencies/ensureDependenciesAsync';\nimport { findFileInParents } from '../utils/findUp';\nimport { isInteractive } from '../utils/interactive';\nimport { confirmAsync } from '../utils/prompts';\n\nconst debug = require('debug')('expo:lint') as typeof console.log;\n\n/** Ensure the project has the required ESLint config. */\nexport class ESLintProjectPrerequisite extends ProjectPrerequisite<boolean> {\n  async assertImplementation(): Promise<boolean> {\n    const hasEslintConfig = await isEslintConfigured(this.projectRoot);\n    const hasLegacyConfig = await isLegacyEslintConfigured(this.projectRoot);\n    const hasLintScript = await lintScriptIsConfigured(this.projectRoot);\n\n    if (hasLegacyConfig) {\n      Log.warn(`Using legacy ESLint config. Consider upgrading to flat config.`);\n    }\n\n    return (hasEslintConfig || hasLegacyConfig) && hasLintScript;\n  }\n\n  async bootstrapAsync(): Promise<boolean> {\n    debug('Setting up ESLint');\n\n    const hasEslintConfig = await isEslintConfigured(this.projectRoot);\n    if (!hasEslintConfig) {\n      if (!isInteractive()) {\n        Log.warn(`No ESLint config found. Configuring automatically.`);\n      } else {\n        const shouldSetupLint = await confirmAsync({\n          message: 'No ESLint config found. Install and configure ESLint in this project?',\n        });\n        if (!shouldSetupLint) {\n          throw new PrerequisiteCommandError('ESLint is not configured for this project.');\n        }\n      }\n\n      await this._ensureDependenciesInstalledAsync({ skipPrompt: true, isProjectMutable: true });\n\n      await fs.writeFile(\n        path.join(this.projectRoot, 'eslint.config.js'),\n        await fs.readFile(require.resolve(`@expo/cli/static/template/eslint.config.js`), 'utf8'),\n        'utf8'\n      );\n    }\n\n    const hasLintScript = await lintScriptIsConfigured(this.projectRoot);\n    if (!hasLintScript) {\n      const scripts = JsonFile.read(path.join(this.projectRoot, 'package.json')).scripts;\n      await JsonFile.setAsync(\n        path.join(this.projectRoot, 'package.json'),\n        'scripts',\n        typeof scripts === 'object' ? { ...scripts, lint: 'expo lint' } : { lint: 'expo lint' },\n        { json5: false }\n      );\n    }\n\n    Log.log();\n    Log.log('ESLint has been configured ðŸŽ‰');\n    Log.log();\n\n    return true;\n  }\n\n  async _ensureDependenciesInstalledAsync({\n    skipPrompt,\n    isProjectMutable,\n  }: {\n    skipPrompt?: boolean;\n    isProjectMutable?: boolean;\n  }): Promise<boolean> {\n    try {\n      return await ensureDependenciesAsync(this.projectRoot, {\n        skipPrompt,\n        isProjectMutable,\n        installMessage: 'ESLint is required to lint your project.',\n        warningMessage: 'ESLint not installed, unable to set up linting for your project.',\n        requiredPackages: [\n          { version: '^9.0.0', pkg: 'eslint', file: 'eslint/package.json', dev: true },\n          {\n            pkg: 'eslint-config-expo',\n            file: 'eslint-config-expo/package.json',\n            dev: true,\n          },\n        ],\n      });\n    } catch (error) {\n      this.resetAssertion();\n      throw error;\n    }\n  }\n}\n\nasync function isLegacyEslintConfigured(projectRoot: string) {\n  debug('Checking for legacy ESLint configuration', projectRoot);\n\n  const packageFile = await JsonFile.readAsync(path.join(projectRoot, 'package.json'));\n  if (\n    typeof packageFile.eslintConfig === 'object' &&\n    Object.keys(packageFile.eslintConfig as JSONObject).length > 0\n  ) {\n    debug('Found legacy ESLint config in package.json');\n    return true;\n  }\n\n  const eslintConfigFiles = [\n    '.eslintrc.js',\n    '.eslintrc.cjs',\n    '.eslintrc.yaml',\n    '.eslintrc.yml',\n    '.eslintrc.json',\n  ];\n  for (const configFile of eslintConfigFiles) {\n    const configPath = findFileInParents(projectRoot, configFile);\n\n    if (configPath) {\n      debug('Found ESLint config file:', configPath);\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** Check for flat config. */\nasync function isEslintConfigured(projectRoot: string) {\n  debug('Ensuring ESLint is configured in', projectRoot);\n\n  const eslintConfigFiles = ['eslint.config.js', 'eslint.config.mjs', 'eslint.config.cjs'];\n  for (const configFile of eslintConfigFiles) {\n    const configPath = findFileInParents(projectRoot, configFile);\n\n    if (configPath) {\n      debug('Found ESLint config file:', configPath);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nasync function lintScriptIsConfigured(projectRoot: string) {\n  const packageFile = await JsonFile.readAsync(path.join(projectRoot, 'package.json'));\n  return typeof (packageFile.scripts as JSONObject | undefined)?.lint === 'string';\n}\n"],"names":["ESLintProjectPrerequisite","debug","require","ProjectPrerequisite","assertImplementation","hasEslintConfig","isEslintConfigured","projectRoot","hasLegacyConfig","isLegacyEslintConfigured","hasLintScript","lintScriptIsConfigured","Log","warn","bootstrapAsync","isInteractive","shouldSetupLint","confirmAsync","message","PrerequisiteCommandError","_ensureDependenciesInstalledAsync","skipPrompt","isProjectMutable","fs","writeFile","path","join","readFile","resolve","scripts","JsonFile","read","setAsync","lint","json5","log","ensureDependenciesAsync","installMessage","warningMessage","requiredPackages","version","pkg","file","dev","error","resetAssertion","packageFile","readAsync","eslintConfig","Object","keys","length","eslintConfigFiles","configFile","configPath","findFileInParents"],"mappings":"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"}
=======
{"version":3,"sources":["../../../src/lint/ESlintPrerequisite.ts"],"sourcesContent":["import JsonFile, { JSONObject } from '@expo/json-file';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nimport { Log } from '../log';\nimport { PrerequisiteCommandError, ProjectPrerequisite } from '../start/doctor/Prerequisite';\nimport { ensureDependenciesAsync } from '../start/doctor/dependencies/ensureDependenciesAsync';\nimport { findFileInParents } from '../utils/findUp';\nimport { isInteractive } from '../utils/interactive';\nimport { confirmAsync } from '../utils/prompts';\n\nconst debug = require('debug')('expo:lint') as typeof console.log;\n\n// TODO(cedric): if we want to add prettier, also configure proper prettier rules\n// const ESLINT_TEMPLATE_PRETTIER = `// https://docs.expo.dev/guides/using-eslint/\n// module.exports = {\n//   extends: ['expo', 'prettier'],\n//   plugins: ['prettier'],\n//   rules: {\n//     'prettier/prettier': ['warn'],\n//   },\n// };\n// `;\n\n/** Ensure the project has the required ESlint config. */\nexport class ESLintProjectPrerequisite extends ProjectPrerequisite<boolean> {\n  async assertImplementation(): Promise<boolean> {\n    const hasEslintConfig = await eslintIsConfigured(this.projectRoot);\n    const hasLintScript = await lintScriptIsConfigured(this.projectRoot);\n\n    return hasEslintConfig && hasLintScript;\n  }\n\n  async bootstrapAsync(): Promise<boolean> {\n    debug('Setting up ESLint');\n\n    const hasEslintConfig = await eslintIsConfigured(this.projectRoot);\n    if (!hasEslintConfig) {\n      if (!isInteractive()) {\n        Log.warn(`No ESLint config found. Configuring automatically.`);\n      } else {\n        const shouldSetupLint = await confirmAsync({\n          message: 'No ESLint config found. Install and configure ESLint in this project?',\n        });\n        if (!shouldSetupLint) {\n          throw new PrerequisiteCommandError('ESLint is not configured for this project.');\n        }\n      }\n\n      // TODO(cedric): if we want to add prettier, also configure proper prettier rules\n      // const shouldIncludePrettier = await confirmAsync({\n      //   message: 'Include Prettier?',\n      // });\n\n      // if (shouldIncludePrettier) {\n      //   packages.push({ file: 'prettier/package.json', pkg: 'prettier', dev: true });\n      //   packages.push({\n      //     file: 'eslint-config-prettier/package.json',\n      //     pkg: 'eslint-config-prettier',\n      //     dev: true,\n      //   });\n      //   packages.push({\n      //     file: 'eslint-plugin-prettier/package.json',\n      //     pkg: 'eslint-plugin-prettier',\n      //     dev: true,\n      //   });\n      // }\n\n      await this._ensureDependenciesInstalledAsync({ skipPrompt: true, isProjectMutable: true });\n\n      // TODO(cedric): if we want to add prettier, also configure proper prettier rules\n      // if (shouldIncludePrettier) {\n      //   await fs.writeFile(path.join(this.projectRoot, '.prettierrc'), '{}', 'utf8');\n      // }\n\n      await fs.writeFile(\n        path.join(this.projectRoot, '.eslintrc.js'),\n        await fs.readFile(require.resolve(`@expo/cli/static/template/.eslintrc.js`), 'utf8'),\n        'utf8'\n      );\n    }\n\n    const hasLintScript = await lintScriptIsConfigured(this.projectRoot);\n    if (!hasLintScript) {\n      const scripts = JsonFile.read(path.join(this.projectRoot, 'package.json')).scripts;\n      await JsonFile.setAsync(\n        path.join(this.projectRoot, 'package.json'),\n        'scripts',\n        typeof scripts === 'object' ? { ...scripts, lint: 'eslint .' } : { lint: 'eslint .' },\n        { json5: false }\n      );\n    }\n\n    Log.log();\n    Log.log('ESlint has been configured ðŸŽ‰');\n    Log.log();\n\n    return true;\n  }\n\n  async _ensureDependenciesInstalledAsync({\n    skipPrompt,\n    isProjectMutable,\n  }: {\n    skipPrompt?: boolean;\n    isProjectMutable?: boolean;\n  }): Promise<boolean> {\n    try {\n      return await ensureDependenciesAsync(this.projectRoot, {\n        skipPrompt,\n        isProjectMutable,\n        installMessage: 'ESLint is required to lint your project.',\n        warningMessage: 'ESLint not installed, unable to set up linting for your project.',\n        requiredPackages: [\n          { version: '^8.57.0', pkg: 'eslint', file: 'eslint/package.json', dev: true },\n          {\n            pkg: 'eslint-config-expo',\n            file: 'eslint-config-expo/package.json',\n            dev: true,\n          },\n        ],\n      });\n    } catch (error) {\n      this.resetAssertion();\n      throw error;\n    }\n  }\n}\n\nasync function eslintIsConfigured(projectRoot: string) {\n  debug('Ensuring ESlint is configured in', projectRoot);\n\n  // TODO(cedric): drop `package.json` check once we swap to flat config\n  const packageFile = await JsonFile.readAsync(path.join(projectRoot, 'package.json'));\n  if (\n    typeof packageFile.eslintConfig === 'object' &&\n    Object.keys(packageFile.eslintConfig as JSONObject).length > 0\n  ) {\n    debug('Found ESlint config in package.json');\n    return true;\n  }\n\n  const eslintConfigFiles = [\n    // TODO(cedric): drop these files once we swap to flat config\n    // See: https://eslint.org/docs/latest/use/configure/configuration-files-deprecated\n    '.eslintrc.js',\n    '.eslintrc.cjs',\n    '.eslintrc.yaml',\n    '.eslintrc.yml',\n    '.eslintrc.json',\n    // TODO(cedric): use these files once we swap to flat config\n    // See: https://eslint.org/docs/latest/use/configure/configuration-files\n    // 'eslint.config.js',\n    // 'eslint.config.mjs',\n    // 'eslint.config.cjs',\n  ];\n  for (const configFile of eslintConfigFiles) {\n    const configPath = findFileInParents(projectRoot, configFile);\n    const configIsEmpty = configPath ? await eslintConfigIsEmpty(configPath) : null;\n\n    if (configPath && !configIsEmpty) {\n      debug('Found ESlint config file:', configPath);\n      return true;\n    } else if (configPath && configIsEmpty) {\n      debug('Skipping empty ESlint config file:', configPath);\n    }\n  }\n\n  return false;\n}\n\n/** Determine if the eslint config file is empty. */\nasync function eslintConfigIsEmpty(filePath: string) {\n  const content = await fs.readFile(filePath, 'utf8').then(\n    (text) => text.trim().replaceAll(/\\s|\\r\\n|\\n|\\r/g, ''),\n    () => null\n  );\n\n  return (\n    !content ||\n    content === '{}' || // .eslintrc.json\n    content === '---' || // .eslintrc.yaml / .eslintrc.yml\n    content.startsWith('module.exports={}') || // .eslintrc.js / .eslintrc.cjs / eslint.config.js / eslint.config.cjs\n    content.startsWith('exportdefault{}') || // .eslint.config.mjs\n    content.startsWith('exportdefault[]') // .eslint.config.mjs\n  );\n}\n\nasync function lintScriptIsConfigured(projectRoot: string) {\n  const packageFile = await JsonFile.readAsync(path.join(projectRoot, 'package.json'));\n  return typeof (packageFile.scripts as JSONObject | undefined)?.lint === 'string';\n}\n"],"names":["ESLintProjectPrerequisite","debug","require","ProjectPrerequisite","assertImplementation","hasEslintConfig","eslintIsConfigured","projectRoot","hasLintScript","lintScriptIsConfigured","bootstrapAsync","isInteractive","Log","warn","shouldSetupLint","confirmAsync","message","PrerequisiteCommandError","_ensureDependenciesInstalledAsync","skipPrompt","isProjectMutable","fs","writeFile","path","join","readFile","resolve","scripts","JsonFile","read","setAsync","lint","json5","log","ensureDependenciesAsync","installMessage","warningMessage","requiredPackages","version","pkg","file","dev","error","resetAssertion","packageFile","readAsync","eslintConfig","Object","keys","length","eslintConfigFiles","configFile","configPath","findFileInParents","configIsEmpty","eslintConfigIsEmpty","filePath","content","then","text","trim","replaceAll","startsWith"],"mappings":"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"}
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
