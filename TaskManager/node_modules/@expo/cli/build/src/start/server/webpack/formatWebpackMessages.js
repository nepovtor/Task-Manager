/**
 * Copyright (c) 2022 Expo, Inc.
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Based on https://github.com/facebook/create-react-app/blob/b172b5e/packages/react-dev-utils/ModuleNotFoundPlugin.js
 * But with Node LTS support.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "formatWebpackMessages", {
    enumerable: true,
<<<<<<< HEAD
    get: function() {
        return formatWebpackMessages;
    }
});
const friendlySyntaxErrorLabel = 'Syntax error:';
=======
    get: ()=>formatWebpackMessages
});
const friendlySyntaxErrorLabel = "Syntax error:";
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
function isLikelyASyntaxError(message) {
    return message.indexOf(friendlySyntaxErrorLabel) !== -1;
}
// Cleans up webpack error messages.
function formatMessage(message) {
    let lines = [];
<<<<<<< HEAD
    if (typeof message === 'string') {
        lines = message.split('\n');
    } else if ('message' in message) {
        lines = message['message'].split('\n');
    } else if (Array.isArray(message)) {
        message.forEach((message)=>{
            if ('message' in message) {
                lines = message['message'].split('\n');
=======
    if (typeof message === "string") {
        lines = message.split("\n");
    } else if ("message" in message) {
        lines = message["message"].split("\n");
    } else if (Array.isArray(message)) {
        message.forEach((message)=>{
            if ("message" in message) {
                lines = message["message"].split("\n");
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
            }
        });
    }
    // Strip webpack-added headers off errors/warnings
    // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js
    lines = lines.filter((line)=>!/Module [A-z ]+\(from/.test(line));
    // Transform parsing error into syntax error
    // TODO: move this to our ESLint formatter?
    lines = lines.map((line)=>{
        const parsingError = /Line (\d+):(?:(\d+):)?\s*Parsing error: (.+)$/.exec(line);
        if (!parsingError) {
            return line;
        }
        const [, errorLine, errorColumn, errorMessage] = parsingError;
        return `${friendlySyntaxErrorLabel} ${errorMessage} (${errorLine}:${errorColumn})`;
    });
<<<<<<< HEAD
    message = lines.join('\n');
=======
    message = lines.join("\n");
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    // Smoosh syntax errors (commonly found in CSS)
    message = message.replace(/SyntaxError\s+\((\d+):(\d+)\)\s*(.+?)\n/g, `${friendlySyntaxErrorLabel} $3 ($1:$2)\n`);
    // Clean up export errors
    message = message.replace(/^.*export '(.+?)' was not found in '(.+?)'.*$/gm, `Attempted import error: '$1' is not exported from '$2'.`);
    message = message.replace(/^.*export 'default' \(imported as '(.+?)'\) was not found in '(.+?)'.*$/gm, `Attempted import error: '$2' does not contain a default export (imported as '$1').`);
    message = message.replace(/^.*export '(.+?)' \(imported as '(.+?)'\) was not found in '(.+?)'.*$/gm, `Attempted import error: '$1' is not exported from '$3' (imported as '$2').`);
<<<<<<< HEAD
    lines = message.split('\n');
    // Remove leading newline
    if (lines.length > 2 && lines[1].trim() === '') {
        lines.splice(1, 1);
    }
    // Clean up file name
    lines[0] = lines[0].replace(/^(.*) \d+:\d+-\d+$/, '$1');
    // Cleans up verbose "module not found" messages for files and packages.
    if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {
        lines = [
            lines[0],
            lines[1].replace('Error: ', '').replace('Module not found: Cannot find file:', 'Cannot find file:')
=======
    lines = message.split("\n");
    // Remove leading newline
    if (lines.length > 2 && lines[1].trim() === "") {
        lines.splice(1, 1);
    }
    // Clean up file name
    lines[0] = lines[0].replace(/^(.*) \d+:\d+-\d+$/, "$1");
    // Cleans up verbose "module not found" messages for files and packages.
    if (lines[1] && lines[1].indexOf("Module not found: ") === 0) {
        lines = [
            lines[0],
            lines[1].replace("Error: ", "").replace("Module not found: Cannot find file:", "Cannot find file:"), 
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
        ];
    }
    // Add helpful message for users trying to use Sass for the first time
    if (lines[1] && lines[1].match(/Cannot find module.+sass/)) {
<<<<<<< HEAD
        lines[1] = 'To import Sass files, you first need to install sass.\n';
        lines[1] += 'Run `npm install sass` or `yarn add sass` inside your workspace.';
    }
    message = lines.join('\n');
=======
        lines[1] = "To import Sass files, you first need to install sass.\n";
        lines[1] += "Run `npm install sass` or `yarn add sass` inside your workspace.";
    }
    message = lines.join("\n");
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    // Internal stacks are generally useless so we strip them... with the
    // exception of stacks containing `webpack:` because they're normally
    // from user code generated by webpack. For more information see
    // https://github.com/facebook/create-react-app/pull/1050
<<<<<<< HEAD
    message = message.replace(/^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm, ''); // at ... ...:x:y
    message = message.replace(/^\s*at\s<anonymous>(\n|$)/gm, ''); // at <anonymous>
    lines = message.split('\n');
    // Remove duplicated newlines
    lines = lines.filter((line, index, arr)=>index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim());
    // Reassemble the message
    message = lines.join('\n');
    return message.trim();
}
function formatWebpackMessages(json) {
    var _json_errors, _json_warnings, _result_errors;
    const formattedErrors = json == null ? void 0 : (_json_errors = json.errors) == null ? void 0 : _json_errors.map(formatMessage);
    const formattedWarnings = json == null ? void 0 : (_json_warnings = json.warnings) == null ? void 0 : _json_warnings.map(formatMessage);
=======
    message = message.replace(/^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm, ""); // at ... ...:x:y
    message = message.replace(/^\s*at\s<anonymous>(\n|$)/gm, ""); // at <anonymous>
    lines = message.split("\n");
    // Remove duplicated newlines
    lines = lines.filter((line, index, arr)=>index === 0 || line.trim() !== "" || line.trim() !== arr[index - 1].trim());
    // Reassemble the message
    message = lines.join("\n");
    return message.trim();
}
function formatWebpackMessages(json) {
    var ref, ref1, ref2;
    const formattedErrors = json == null ? void 0 : (ref = json.errors) == null ? void 0 : ref.map(formatMessage);
    const formattedWarnings = json == null ? void 0 : (ref1 = json.warnings) == null ? void 0 : ref1.map(formatMessage);
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    const result = {
        errors: formattedErrors,
        warnings: formattedWarnings
    };
<<<<<<< HEAD
    if ((_result_errors = result.errors) == null ? void 0 : _result_errors.some(isLikelyASyntaxError)) {
=======
    if ((ref2 = result.errors) == null ? void 0 : ref2.some(isLikelyASyntaxError)) {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
        // If there are any syntax errors, show just them.
        result.errors = result.errors.filter(isLikelyASyntaxError);
    }
    return result;
}

//# sourceMappingURL=formatWebpackMessages.js.map