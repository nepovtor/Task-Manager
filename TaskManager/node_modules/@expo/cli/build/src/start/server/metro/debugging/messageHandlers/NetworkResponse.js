"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
<<<<<<< HEAD
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NETWORK_RESPONSE_STORAGE: function() {
        return NETWORK_RESPONSE_STORAGE;
    },
    NetworkResponseHandler: function() {
        return NetworkResponseHandler;
    }
});
const _MessageHandler = require("../MessageHandler");
const NETWORK_RESPONSE_STORAGE = new Map();
class NetworkResponseHandler extends _MessageHandler.MessageHandler {
    handleDeviceMessage(message) {
        if (message.method === 'Expo(Network.receivedResponseBody)') {
            const { requestId, ...requestInfo } = message.params;
=======
Object.defineProperty(exports, "NetworkResponseHandler", {
    enumerable: true,
    get: ()=>NetworkResponseHandler
});
const _messageHandler = require("../MessageHandler");
class NetworkResponseHandler extends _messageHandler.MessageHandler {
    /** All known responses, mapped by request id */ storage = new Map();
    isEnabled() {
        return this.page.capabilities.nativeNetworkInspection !== true;
    }
    handleDeviceMessage(message) {
        if (message.method === "Expo(Network.receivedResponseBody)") {
            const { requestId , ...requestInfo } = message.params;
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
            this.storage.set(requestId, requestInfo);
            return true;
        }
        return false;
    }
    handleDebuggerMessage(message) {
<<<<<<< HEAD
        if (message.method === 'Network.getResponseBody' && this.storage.has(message.params.requestId)) {
=======
        if (message.method === "Network.getResponseBody" && this.storage.has(message.params.requestId)) {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
            return this.sendToDebugger({
                id: message.id,
                result: this.storage.get(message.params.requestId)
            });
        }
        return false;
    }
<<<<<<< HEAD
    constructor(...args){
        super(...args), /** All known responses, mapped by request id */ this.storage = NETWORK_RESPONSE_STORAGE;
    }
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

//# sourceMappingURL=NetworkResponse.js.map