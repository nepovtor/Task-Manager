<<<<<<< HEAD
{"version":3,"sources":["../../../../../src/start/server/metro/formatFileCandidates.ts"],"sourcesContent":["/**\n * Copyright © 2022 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * A fork of my proposed Metro change https://github.com/facebook/metro/pull/1036/files\n */\n\nimport type { FileCandidates } from 'metro-resolver';\nimport path from 'path';\n\nfunction groupExtensions(exts: readonly string[]): string[][] {\n  // Reverse the extensions and split into parts\n  const extParts = exts.map((ext) => ext.split('.').reverse());\n\n  // Find the maximum depth of extension parts\n  const maxDepth = Math.max(...extParts.map((parts) => parts.length));\n\n  // Initialize groups based on the max depth\n  const groups = Array.from({ length: maxDepth }, () => new Set<string>());\n\n  extParts.forEach((parts) => {\n    parts.forEach((part, i) => {\n      // Add parts to the corresponding group based on their depth\n      groups[i].add(part);\n    });\n  });\n\n  // Cycle groups and remove duplicates that appear forwards\n  groups.forEach((group, index) => {\n    // Remove duplicates that appear forwards\n    // NOTE: This doesn't support extensions like `.native.native.js`\n    groups.forEach((otherGroup, otherIndex) => {\n      if (index < otherIndex) {\n        otherGroup.forEach((part) => group.delete(part));\n      }\n    });\n  });\n\n  // Convert sets back to arrays and reverse groups to correct order\n  return groups.map((group) => Array.from(group)).reverse();\n}\n\nfunction createMatcherPatternForExtensions(exts: readonly string[]): string {\n  let formatted = '';\n\n  if (exts.length) {\n    // Apply grouping function\n    const groups = groupExtensions(exts);\n\n    formatted += groups\n      .map((group, index) => {\n        return index < groups.length - 1\n          ? `(${group.map((ext) => `.${ext}`).join('|')})?`\n          : `.(${group.join('|')})`;\n      })\n      .join('');\n  }\n\n  return formatted;\n}\n\nexport function formatFileCandidates(\n  candidates: FileCandidates,\n  allowIndex: boolean = false\n): string {\n  if (candidates.type === 'asset') {\n    return candidates.name;\n  }\n\n  let formatted = candidates.filePathPrefix;\n\n  if (allowIndex) {\n    formatted += `(${path.sep}index)?`;\n  }\n\n  const extensions = candidates.candidateExts\n    // Drop additional dots, the first character if it is a dot, and remove empty strings.\n    .map((ext) => ext.replace(/\\.+/g, '.').replace(/^\\./g, ''))\n    .filter(Boolean);\n\n  formatted += createMatcherPatternForExtensions(extensions);\n\n  return formatted;\n}\n"],"names":["formatFileCandidates","groupExtensions","exts","extParts","map","ext","split","reverse","maxDepth","Math","max","parts","length","groups","Array","from","Set","forEach","part","i","add","group","index","otherGroup","otherIndex","delete","createMatcherPatternForExtensions","formatted","join","candidates","allowIndex","type","name","filePathPrefix","path","sep","extensions","candidateExts","replace","filter","Boolean"],"mappings":"AAAA;;;;;;;;CAQC;;;;+BAwDeA;;;eAAAA;;;;gEArDC;;;;;;;;;;;AAEjB,SAASC,gBAAgBC,IAAuB;IAC9C,8CAA8C;IAC9C,MAAMC,WAAWD,KAAKE,GAAG,CAAC,CAACC,MAAQA,IAAIC,KAAK,CAAC,KAAKC,OAAO;IAEzD,4CAA4C;IAC5C,MAAMC,WAAWC,KAAKC,GAAG,IAAIP,SAASC,GAAG,CAAC,CAACO,QAAUA,MAAMC,MAAM;IAEjE,2CAA2C;IAC3C,MAAMC,SAASC,MAAMC,IAAI,CAAC;QAAEH,QAAQJ;IAAS,GAAG,IAAM,IAAIQ;IAE1Db,SAASc,OAAO,CAAC,CAACN;QAChBA,MAAMM,OAAO,CAAC,CAACC,MAAMC;YACnB,4DAA4D;YAC5DN,MAAM,CAACM,EAAE,CAACC,GAAG,CAACF;QAChB;IACF;IAEA,0DAA0D;IAC1DL,OAAOI,OAAO,CAAC,CAACI,OAAOC;QACrB,yCAAyC;QACzC,iEAAiE;QACjET,OAAOI,OAAO,CAAC,CAACM,YAAYC;YAC1B,IAAIF,QAAQE,YAAY;gBACtBD,WAAWN,OAAO,CAAC,CAACC,OAASG,MAAMI,MAAM,CAACP;YAC5C;QACF;IACF;IAEA,kEAAkE;IAClE,OAAOL,OAAOT,GAAG,CAAC,CAACiB,QAAUP,MAAMC,IAAI,CAACM,QAAQd,OAAO;AACzD;AAEA,SAASmB,kCAAkCxB,IAAuB;IAChE,IAAIyB,YAAY;IAEhB,IAAIzB,KAAKU,MAAM,EAAE;QACf,0BAA0B;QAC1B,MAAMC,SAASZ,gBAAgBC;QAE/ByB,aAAad,OACVT,GAAG,CAAC,CAACiB,OAAOC;YACX,OAAOA,QAAQT,OAAOD,MAAM,GAAG,IAC3B,CAAC,CAAC,EAAES,MAAMjB,GAAG,CAAC,CAACC,MAAQ,CAAC,CAAC,EAAEA,KAAK,EAAEuB,IAAI,CAAC,KAAK,EAAE,CAAC,GAC/C,CAAC,EAAE,EAAEP,MAAMO,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7B,GACCA,IAAI,CAAC;IACV;IAEA,OAAOD;AACT;AAEO,SAAS3B,qBACd6B,UAA0B,EAC1BC,aAAsB,KAAK;IAE3B,IAAID,WAAWE,IAAI,KAAK,SAAS;QAC/B,OAAOF,WAAWG,IAAI;IACxB;IAEA,IAAIL,YAAYE,WAAWI,cAAc;IAEzC,IAAIH,YAAY;QACdH,aAAa,CAAC,CAAC,EAAEO,eAAI,CAACC,GAAG,CAAC,OAAO,CAAC;IACpC;IAEA,MAAMC,aAAaP,WAAWQ,aAAa,AACzC,sFAAsF;KACrFjC,GAAG,CAAC,CAACC,MAAQA,IAAIiC,OAAO,CAAC,QAAQ,KAAKA,OAAO,CAAC,QAAQ,KACtDC,MAAM,CAACC;IAEVb,aAAaD,kCAAkCU;IAE/C,OAAOT;AACT"}
=======
{"version":3,"sources":["../../../../../src/start/server/metro/formatFileCandidates.ts"],"sourcesContent":["/**\n * Copyright © 2022 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * A fork of my proposed Metro change https://github.com/facebook/metro/pull/1036/files\n */\n\nimport type { FileCandidates } from 'metro-resolver';\nimport path from 'path';\n\nfunction groupExtensions(exts: readonly string[]): string[][] {\n  // Reverse the extensions and split into parts\n  const extParts = exts.map((ext) => ext.split('.').reverse());\n\n  // Find the maximum depth of extension parts\n  const maxDepth = Math.max(...extParts.map((parts) => parts.length));\n\n  // Initialize groups based on the max depth\n  const groups = Array.from({ length: maxDepth }, () => new Set<string>());\n\n  extParts.forEach((parts) => {\n    parts.forEach((part, i) => {\n      // Add parts to the corresponding group based on their depth\n      groups[i].add(part);\n    });\n  });\n\n  // Cycle groups and remove duplicates that appear forwards\n  groups.forEach((group, index) => {\n    // Remove duplicates that appear forwards\n    // NOTE: This doesn't support extensions like `.native.native.js`\n    groups.forEach((otherGroup, otherIndex) => {\n      if (index < otherIndex) {\n        otherGroup.forEach((part) => group.delete(part));\n      }\n    });\n  });\n\n  // Convert sets back to arrays and reverse groups to correct order\n  return groups.map((group) => Array.from(group)).reverse();\n}\n\nfunction createMatcherPatternForExtensions(exts: readonly string[]): string {\n  let formatted = '';\n\n  if (exts.length) {\n    // Apply grouping function\n    const groups = groupExtensions(exts);\n\n    formatted += groups\n      .map((group, index) => {\n        return index < groups.length - 1\n          ? `(${group.map((ext) => `.${ext}`).join('|')})?`\n          : `.(${group.join('|')})`;\n      })\n      .join('');\n  }\n\n  return formatted;\n}\n\nexport function formatFileCandidates(\n  candidates: FileCandidates,\n  allowIndex: boolean = false\n): string {\n  if (candidates.type === 'asset') {\n    return candidates.name;\n  }\n\n  let formatted = candidates.filePathPrefix;\n\n  if (allowIndex) {\n    formatted += `(${path.sep}index)?`;\n  }\n\n  const extensions = candidates.candidateExts\n    // Drop additional dots, the first character if it is a dot, and remove empty strings.\n    .map((ext) => ext.replace(/\\.+/g, '.').replace(/^\\./g, ''))\n    .filter(Boolean);\n\n  formatted += createMatcherPatternForExtensions(extensions);\n\n  return formatted;\n}\n"],"names":["formatFileCandidates","groupExtensions","exts","extParts","map","ext","split","reverse","maxDepth","Math","max","parts","length","groups","Array","from","Set","forEach","part","i","add","group","index","otherGroup","otherIndex","delete","createMatcherPatternForExtensions","formatted","join","candidates","allowIndex","type","name","filePathPrefix","path","sep","extensions","candidateExts","replace","filter","Boolean"],"mappings":"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"}
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
