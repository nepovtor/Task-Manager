<<<<<<< HEAD
{"version":3,"sources":["../../../../../src/start/server/middleware/FaviconMiddleware.ts"],"sourcesContent":["import { ExpoMiddleware } from './ExpoMiddleware';\nimport { ServerNext, ServerRequest, ServerResponse } from './server.types';\nimport { getFaviconFromExpoConfigAsync } from '../../../export/favicon';\n\nconst debug = require('debug')('expo:start:server:middleware:favicon') as typeof console.log;\n\n/**\n * Middleware for generating a favicon.ico file for the current project if one doesn't exist.\n *\n * Test by making a get request with:\n * curl -v http://localhost:8081/favicon.ico\n */\nexport class FaviconMiddleware extends ExpoMiddleware {\n  constructor(protected projectRoot: string) {\n    super(projectRoot, ['/favicon.ico']);\n  }\n\n  async handleRequestAsync(\n    req: ServerRequest,\n    res: ServerResponse,\n    next: ServerNext\n  ): Promise<void> {\n    if (!['GET', 'HEAD'].includes(req.method || '')) {\n      return next();\n    }\n\n    let faviconImageData: Buffer | null;\n    try {\n      const data = await getFaviconFromExpoConfigAsync(this.projectRoot, { force: true });\n      if (!data) {\n        debug('No favicon defined in the Expo Config, skipping generation.');\n        return next();\n      }\n      faviconImageData = data.source;\n      debug('✅ Generated favicon successfully.');\n    } catch (error: any) {\n      // Pass through on ENOENT errors\n      debug('Failed to generate favicon from Expo config:', error);\n      if (error.code === 'ENOENT') {\n        return next();\n      }\n      return next(error);\n    }\n    // Respond with the generated favicon file\n    res.setHeader('Content-Type', 'image/x-icon');\n    res.end(faviconImageData);\n  }\n}\n"],"names":["FaviconMiddleware","debug","require","ExpoMiddleware","constructor","projectRoot","handleRequestAsync","req","res","next","includes","method","faviconImageData","data","getFaviconFromExpoConfigAsync","force","source","error","code","setHeader","end"],"mappings":";;;;+BAYaA;;;eAAAA;;;gCAZkB;yBAEe;AAE9C,MAAMC,QAAQC,QAAQ,SAAS;AAQxB,MAAMF,0BAA0BG,8BAAc;IACnDC,YAAY,AAAUC,WAAmB,CAAE;QACzC,KAAK,CAACA,aAAa;YAAC;SAAe,QADfA,cAAAA;IAEtB;IAEA,MAAMC,mBACJC,GAAkB,EAClBC,GAAmB,EACnBC,IAAgB,EACD;QACf,IAAI,CAAC;YAAC;YAAO;SAAO,CAACC,QAAQ,CAACH,IAAII,MAAM,IAAI,KAAK;YAC/C,OAAOF;QACT;QAEA,IAAIG;QACJ,IAAI;YACF,MAAMC,OAAO,MAAMC,IAAAA,sCAA6B,EAAC,IAAI,CAACT,WAAW,EAAE;gBAAEU,OAAO;YAAK;YACjF,IAAI,CAACF,MAAM;gBACTZ,MAAM;gBACN,OAAOQ;YACT;YACAG,mBAAmBC,KAAKG,MAAM;YAC9Bf,MAAM;QACR,EAAE,OAAOgB,OAAY;YACnB,gCAAgC;YAChChB,MAAM,gDAAgDgB;YACtD,IAAIA,MAAMC,IAAI,KAAK,UAAU;gBAC3B,OAAOT;YACT;YACA,OAAOA,KAAKQ;QACd;QACA,0CAA0C;QAC1CT,IAAIW,SAAS,CAAC,gBAAgB;QAC9BX,IAAIY,GAAG,CAACR;IACV;AACF"}
=======
{"version":3,"sources":["../../../../../src/start/server/middleware/FaviconMiddleware.ts"],"sourcesContent":["import { ExpoMiddleware } from './ExpoMiddleware';\nimport { ServerNext, ServerRequest, ServerResponse } from './server.types';\nimport { getFaviconFromExpoConfigAsync } from '../../../export/favicon';\n\nconst debug = require('debug')('expo:start:server:middleware:favicon') as typeof console.log;\n\n/**\n * Middleware for generating a favicon.ico file for the current project if one doesn't exist.\n *\n * Test by making a get request with:\n * curl -v http://localhost:8081/favicon.ico\n */\nexport class FaviconMiddleware extends ExpoMiddleware {\n  constructor(protected projectRoot: string) {\n    super(projectRoot, ['/favicon.ico']);\n  }\n\n  async handleRequestAsync(\n    req: ServerRequest,\n    res: ServerResponse,\n    next: ServerNext\n  ): Promise<void> {\n    if (!['GET', 'HEAD'].includes(req.method || '')) {\n      return next();\n    }\n\n    let faviconImageData: Buffer | null;\n    try {\n      const data = await getFaviconFromExpoConfigAsync(this.projectRoot, { force: true });\n      if (!data) {\n        debug('No favicon defined in the Expo Config, skipping generation.');\n        return next();\n      }\n      faviconImageData = data.source;\n      debug('✅ Generated favicon successfully.');\n    } catch (error: any) {\n      debug('Failed to generate favicon from Expo config:', error);\n      return next(error);\n    }\n    // Respond with the generated favicon file\n    res.setHeader('Content-Type', 'image/x-icon');\n    res.end(faviconImageData);\n  }\n}\n"],"names":["FaviconMiddleware","debug","require","ExpoMiddleware","constructor","projectRoot","handleRequestAsync","req","res","next","includes","method","faviconImageData","data","getFaviconFromExpoConfigAsync","force","source","error","setHeader","end"],"mappings":"AAAA;;;;+BAYaA,mBAAiB;;aAAjBA,iBAAiB;;gCAZC,kBAAkB;yBAEH,yBAAyB;AAEvE,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,sCAAsC,CAAC,AAAsB,AAAC;AAQtF,MAAMF,iBAAiB,SAASG,eAAc,eAAA;IACnDC,YAAsBC,WAAmB,CAAE;QACzC,KAAK,CAACA,WAAW,EAAE;YAAC,cAAc;SAAC,CAAC,CAAC;QADjBA,mBAAAA,WAAmB,CAAA;IAEzC;UAEMC,kBAAkB,CACtBC,GAAkB,EAClBC,GAAmB,EACnBC,IAAgB,EACD;QACf,IAAI,CAAC;YAAC,KAAK;YAAE,MAAM;SAAC,CAACC,QAAQ,CAACH,GAAG,CAACI,MAAM,IAAI,EAAE,CAAC,EAAE;YAC/C,OAAOF,IAAI,EAAE,CAAC;QAChB,CAAC;QAED,IAAIG,gBAAgB,AAAe,AAAC;QACpC,IAAI;YACF,MAAMC,IAAI,GAAG,MAAMC,IAAAA,QAA6B,8BAAA,EAAC,IAAI,CAACT,WAAW,EAAE;gBAAEU,KAAK,EAAE,IAAI;aAAE,CAAC,AAAC;YACpF,IAAI,CAACF,IAAI,EAAE;gBACTZ,KAAK,CAAC,6DAA6D,CAAC,CAAC;gBACrE,OAAOQ,IAAI,EAAE,CAAC;YAChB,CAAC;YACDG,gBAAgB,GAAGC,IAAI,CAACG,MAAM,CAAC;YAC/Bf,KAAK,CAAC,mCAAmC,CAAC,CAAC;QAC7C,EAAE,OAAOgB,KAAK,EAAO;YACnBhB,KAAK,CAAC,8CAA8C,EAAEgB,KAAK,CAAC,CAAC;YAC7D,OAAOR,IAAI,CAACQ,KAAK,CAAC,CAAC;QACrB,CAAC;QACD,0CAA0C;QAC1CT,GAAG,CAACU,SAAS,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QAC9CV,GAAG,CAACW,GAAG,CAACP,gBAAgB,CAAC,CAAC;IAC5B;CACD"}
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
