<<<<<<< HEAD
{"version":3,"sources":["../../../../../src/start/server/metro/createExpoMetroResolver.ts"],"sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport fs from 'fs';\nimport { Resolution, ResolutionContext } from 'metro-resolver';\nimport path from 'path';\n\nimport jestResolver from './createJResolver';\nimport { isNodeExternal } from './externals';\nimport { formatFileCandidates } from './formatFileCandidates';\nimport { isServerEnvironment } from '../middleware/metroOptions';\n\nexport class FailedToResolvePathError extends Error {\n  // Added to ensure the error is matched by our tooling.\n  // TODO: Test that this matches `isFailedToResolvePathError`\n  candidates = {};\n}\n\nclass ShimModuleError extends Error {}\n\nconst debug = require('debug')('expo:metro:resolve') as typeof console.log;\n\nconst realpathFS =\n  process.platform !== 'win32' && fs.realpathSync && typeof fs.realpathSync.native === 'function'\n    ? fs.realpathSync.native\n    : fs.realpathSync;\n\nfunction realpathSync(x: string) {\n  try {\n    return realpathFS(x);\n  } catch (realpathErr: any) {\n    if (realpathErr.code !== 'ENOENT') {\n      throw realpathErr;\n    }\n  }\n  return x;\n}\n\nexport function createFastResolver({\n  preserveSymlinks,\n  blockList,\n}: {\n  preserveSymlinks: boolean;\n  blockList: RegExp[];\n}) {\n  debug('Creating with settings:', { preserveSymlinks, blockList });\n  const cachedExtensions: Map<string, readonly string[]> = new Map();\n\n  function getAdjustedExtensions({\n    metroSourceExtensions,\n    platform,\n    isNative,\n  }: {\n    metroSourceExtensions: readonly string[];\n    platform: string | null;\n    isNative: boolean;\n  }): readonly string[] {\n    const key = JSON.stringify({ metroSourceExtensions, platform, isNative });\n    if (cachedExtensions.has(key)) {\n      return cachedExtensions.get(key)!;\n    }\n\n    let output = metroSourceExtensions;\n    if (platform) {\n      const nextOutput: string[] = [];\n\n      output.forEach((ext) => {\n        nextOutput.push(`${platform}.${ext}`);\n        if (isNative) {\n          nextOutput.push(`native.${ext}`);\n        }\n        nextOutput.push(ext);\n      });\n\n      output = nextOutput;\n    }\n\n    output = Array.from(new Set<string>(output));\n\n    // resolve expects these to start with a dot.\n    output = output.map((ext) => `.${ext}`);\n\n    cachedExtensions.set(key, output);\n\n    return output;\n  }\n\n  function fastResolve(\n    context: Pick<\n      ResolutionContext,\n      | 'unstable_enablePackageExports'\n      | 'customResolverOptions'\n      | 'sourceExts'\n      | 'preferNativePlatform'\n      | 'originModulePath'\n      | 'getPackage'\n      | 'nodeModulesPaths'\n      | 'mainFields'\n      | 'resolveAsset'\n      | 'unstable_conditionNames'\n      | 'unstable_conditionsByPlatform'\n      | 'fileSystemLookup'\n      | 'isESMImport'\n    >,\n    moduleName: string,\n    platform: string | null\n  ): Resolution {\n    const environment = context.customResolverOptions?.environment;\n    const isServer = isServerEnvironment(environment);\n\n    const extensions = getAdjustedExtensions({\n      metroSourceExtensions: context.sourceExts,\n      platform,\n      isNative: context.preferNativePlatform,\n    }) as string[];\n\n    let fp: string;\n\n    const conditions = context.unstable_enablePackageExports\n      ? [\n          ...new Set([\n            'default',\n            context.isESMImport === true ? 'import' : 'require',\n            ...context.unstable_conditionNames,\n            ...(platform != null ? (context.unstable_conditionsByPlatform[platform] ?? []) : []),\n          ]),\n        ]\n      : [];\n\n    // NOTE(cedric): metro@0.81.0 ships with `fileSystemLookup`, while `metro@0.80.12` ships as unstable\n    const fileSystemLookup = (\n      'unstable_fileSystemLookup' in context\n        ? context.unstable_fileSystemLookup\n        : context.fileSystemLookup\n    ) as ResolutionContext['fileSystemLookup'] | undefined;\n\n    if (!fileSystemLookup) {\n      throw new Error('Metro API fileSystemLookup is required for fast resolver');\n    }\n\n    try {\n      fp = jestResolver(moduleName, {\n        blockList,\n        enablePackageExports: context.unstable_enablePackageExports,\n        basedir: path.dirname(context.originModulePath),\n        paths: context.nodeModulesPaths.length ? (context.nodeModulesPaths as string[]) : undefined,\n        extensions,\n        conditions,\n        realpathSync(file: string): string {\n          let metroRealPath: string | null = null;\n\n          const res = fileSystemLookup(file);\n          if (res?.exists) {\n            metroRealPath = res.realPath;\n          }\n\n          if (metroRealPath == null && preserveSymlinks) {\n            return realpathSync(file);\n          }\n          return metroRealPath ?? file;\n        },\n        isDirectory(file: string): boolean {\n          const res = fileSystemLookup(file);\n          return res.exists && res.type === 'd';\n        },\n        isFile(file: string): boolean {\n          const res = fileSystemLookup(file);\n          return res.exists && res.type === 'f';\n        },\n        pathExists(file: string): boolean {\n          return fileSystemLookup(file).exists;\n        },\n        packageFilter(pkg) {\n          // set the pkg.main to the first available field in context.mainFields\n          for (const field of context.mainFields) {\n            if (\n              pkg[field] &&\n              // object-inspect uses browser: {} in package.json\n              typeof pkg[field] === 'string'\n            ) {\n              return {\n                ...pkg,\n                main: pkg[field],\n              };\n            }\n          }\n          return pkg;\n        },\n        // Used to ensure files trace to packages instead of node_modules in expo/expo. This is how Metro works and\n        // the app doesn't finish without it.\n        preserveSymlinks,\n        readPackageSync(readFileSync, pkgFile) {\n          return context.getPackage(pkgFile) ?? JSON.parse(fs.readFileSync(pkgFile, 'utf8'));\n        },\n        includeCoreModules: isServer,\n\n        pathFilter:\n          // Disable `browser` field for server environments.\n          isServer\n            ? undefined\n            : // Enable `browser` field support\n              (pkg: any, _resolvedPath: string, relativePathIn: string): string => {\n                let relativePath = relativePathIn;\n                if (relativePath[0] !== '.') {\n                  relativePath = `./${relativePath}`;\n                }\n\n                const replacements = pkg.browser;\n                if (replacements === undefined) {\n                  return '';\n                }\n\n                // TODO: Probably use a better extension matching system here.\n                // This was added for `uuid/v4` -> `./lib/rng` -> `./lib/rng-browser.js`\n                const mappedPath = replacements[relativePath] ?? replacements[relativePath + '.js'];\n                if (mappedPath === false) {\n                  throw new ShimModuleError();\n                }\n                return mappedPath;\n              },\n      });\n    } catch (error: any) {\n      if (error instanceof ShimModuleError) {\n        return {\n          type: 'empty',\n        };\n      }\n\n      if ('code' in error && error.code === 'MODULE_NOT_FOUND') {\n        if (isNodeExternal(moduleName)) {\n          // In this case, mock the file to use an empty module.\n          return {\n            type: 'empty',\n          };\n        }\n\n        debug({ moduleName, platform, conditions, isServer, preserveSymlinks }, context);\n\n        throw new FailedToResolvePathError(\n          'The module could not be resolved because no file or module matched the pattern:\\n' +\n            `  ${formatFileCandidates(\n              {\n                type: 'sourceFile',\n                filePathPrefix: moduleName,\n                candidateExts: extensions,\n              },\n              true\n            )}\\n\\nFrom:\\n  ${context.originModulePath}\\n`\n        );\n      }\n      throw error;\n    }\n\n    if (context.sourceExts.some((ext) => fp.endsWith(ext))) {\n      return {\n        type: 'sourceFile',\n        filePath: fp,\n      };\n    }\n\n    if (isNodeExternal(fp)) {\n      if (isServer) {\n        return {\n          type: 'sourceFile',\n          filePath: fp,\n        };\n      }\n      // NOTE: This shouldn't happen, the module should throw.\n      // Mock non-server built-in modules to empty.\n      return {\n        type: 'empty',\n      };\n    }\n\n    // NOTE: platform extensions may not be supported on assets.\n\n    if (platform === 'web') {\n      // Skip multi-resolution on web/server bundles. Only consideration here is that\n      // we may still need it in case the only image is a multi-resolution image.\n      return {\n        type: 'assetFiles',\n        filePaths: [fp],\n      };\n    }\n\n    const dirPath = path.dirname(fp);\n    const extension = path.extname(fp);\n    const basename = path.basename(fp, extension);\n    return {\n      type: 'assetFiles',\n      // Support multi-resolution asset extensions...\n      filePaths: context.resolveAsset(dirPath, basename, extension) ?? [fp],\n    };\n  }\n\n  return fastResolve;\n}\n"],"names":["FailedToResolvePathError","createFastResolver","Error","candidates","ShimModuleError","debug","require","realpathFS","process","platform","fs","realpathSync","native","x","realpathErr","code","preserveSymlinks","blockList","cachedExtensions","Map","getAdjustedExtensions","metroSourceExtensions","isNative","key","JSON","stringify","has","get","output","nextOutput","forEach","ext","push","Array","from","Set","map","set","fastResolve","context","moduleName","environment","customResolverOptions","isServer","isServerEnvironment","extensions","sourceExts","preferNativePlatform","fp","conditions","unstable_enablePackageExports","isESMImport","unstable_conditionNames","unstable_conditionsByPlatform","fileSystemLookup","unstable_fileSystemLookup","jestResolver","enablePackageExports","basedir","path","dirname","originModulePath","paths","nodeModulesPaths","length","undefined","file","metroRealPath","res","exists","realPath","isDirectory","type","isFile","pathExists","packageFilter","pkg","field","mainFields","main","readPackageSync","readFileSync","pkgFile","getPackage","parse","includeCoreModules","pathFilter","_resolvedPath","relativePathIn","relativePath","replacements","browser","mappedPath","error","isNodeExternal","formatFileCandidates","filePathPrefix","candidateExts","some","endsWith","filePath","filePaths","dirPath","extension","extname","basename","resolveAsset"],"mappings":"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"}
=======
{"version":3,"sources":["../../../../../src/start/server/metro/createExpoMetroResolver.ts"],"sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport fs from 'fs';\nimport { Resolution, ResolutionContext } from 'metro-resolver';\nimport path from 'path';\n\nimport jestResolver from './createJResolver';\nimport { isNodeExternal } from './externals';\nimport { formatFileCandidates } from './formatFileCandidates';\nimport { isServerEnvironment } from '../middleware/metroOptions';\n\nexport class FailedToResolvePathError extends Error {\n  // Added to ensure the error is matched by our tooling.\n  // TODO: Test that this matches `isFailedToResolvePathError`\n  candidates = {};\n}\n\nclass ShimModuleError extends Error {}\n\nconst debug = require('debug')('expo:metro:resolve') as typeof console.log;\n\nconst realpathFS =\n  process.platform !== 'win32' && fs.realpathSync && typeof fs.realpathSync.native === 'function'\n    ? fs.realpathSync.native\n    : fs.realpathSync;\n\nfunction realpathSync(x: string) {\n  try {\n    return realpathFS(x);\n  } catch (realpathErr: any) {\n    if (realpathErr.code !== 'ENOENT') {\n      throw realpathErr;\n    }\n  }\n  return x;\n}\n\nexport function createFastResolver({\n  preserveSymlinks,\n  blockList,\n}: {\n  preserveSymlinks: boolean;\n  blockList: RegExp[];\n}) {\n  debug('Creating with settings:', { preserveSymlinks, blockList });\n  const cachedExtensions: Map<string, readonly string[]> = new Map();\n\n  function getAdjustedExtensions({\n    metroSourceExtensions,\n    platform,\n    isNative,\n  }: {\n    metroSourceExtensions: readonly string[];\n    platform: string | null;\n    isNative: boolean;\n  }): readonly string[] {\n    const key = JSON.stringify({ metroSourceExtensions, platform, isNative });\n    if (cachedExtensions.has(key)) {\n      return cachedExtensions.get(key)!;\n    }\n\n    let output = metroSourceExtensions;\n    if (platform) {\n      const nextOutput: string[] = [];\n\n      output.forEach((ext) => {\n        nextOutput.push(`${platform}.${ext}`);\n        if (isNative) {\n          nextOutput.push(`native.${ext}`);\n        }\n        nextOutput.push(ext);\n      });\n\n      output = nextOutput;\n    }\n\n    output = Array.from(new Set<string>(output));\n\n    // resolve expects these to start with a dot.\n    output = output.map((ext) => `.${ext}`);\n\n    cachedExtensions.set(key, output);\n\n    return output;\n  }\n\n  function fastResolve(\n    context: Pick<\n      ResolutionContext,\n      | 'unstable_enablePackageExports'\n      | 'customResolverOptions'\n      | 'sourceExts'\n      | 'preferNativePlatform'\n      | 'originModulePath'\n      | 'getPackage'\n      | 'nodeModulesPaths'\n      | 'mainFields'\n      | 'resolveAsset'\n      | 'unstable_conditionNames'\n      | 'unstable_conditionsByPlatform'\n    >,\n    moduleName: string,\n    platform: string | null\n  ): Resolution {\n    const environment = context.customResolverOptions?.environment;\n    const isServer = isServerEnvironment(environment);\n\n    const extensions = getAdjustedExtensions({\n      metroSourceExtensions: context.sourceExts,\n      platform,\n      isNative: context.preferNativePlatform,\n    }) as string[];\n\n    let fp: string;\n\n    const conditions = context.unstable_enablePackageExports\n      ? [\n          ...new Set([\n            'default',\n            ...context.unstable_conditionNames,\n            ...(platform != null ? context.unstable_conditionsByPlatform[platform] ?? [] : []),\n          ]),\n        ]\n      : [];\n    try {\n      fp = jestResolver(moduleName, {\n        blockList,\n        enablePackageExports: context.unstable_enablePackageExports,\n        basedir: path.dirname(context.originModulePath),\n        paths: context.nodeModulesPaths.length ? (context.nodeModulesPaths as string[]) : undefined,\n        extensions,\n        conditions,\n        realpathSync(file: string): string {\n          let metroRealPath: string | null = null;\n\n          try {\n            // @ts-expect-error: Missing on type.\n            metroRealPath = context.unstable_getRealPath?.(file);\n          } catch (error: any) {\n            // If invariant\n            if (error.message !== 'Unexpectedly escaped traversal') {\n              throw error;\n            }\n          }\n\n          if (metroRealPath == null && preserveSymlinks) {\n            return realpathSync(file);\n          }\n          return metroRealPath ?? file;\n        },\n        packageFilter(pkg) {\n          // set the pkg.main to the first available field in context.mainFields\n          for (const field of context.mainFields) {\n            if (\n              pkg[field] &&\n              // object-inspect uses browser: {} in package.json\n              typeof pkg[field] === 'string'\n            ) {\n              return {\n                ...pkg,\n                main: pkg[field],\n              };\n            }\n          }\n          return pkg;\n        },\n        // Used to ensure files trace to packages instead of node_modules in expo/expo. This is how Metro works and\n        // the app doesn't finish without it.\n        preserveSymlinks,\n        readPackageSync(readFileSync, pkgFile) {\n          return context.getPackage(pkgFile) ?? JSON.parse(fs.readFileSync(pkgFile, 'utf8'));\n        },\n        includeCoreModules: isServer,\n\n        pathFilter:\n          // Disable `browser` field for server environments.\n          isServer\n            ? undefined\n            : // Enable `browser` field support\n              (pkg: any, _resolvedPath: string, relativePathIn: string): string => {\n                let relativePath = relativePathIn;\n                if (relativePath[0] !== '.') {\n                  relativePath = `./${relativePath}`;\n                }\n\n                const replacements = pkg.browser;\n                if (replacements === undefined) {\n                  return '';\n                }\n\n                // TODO: Probably use a better extension matching system here.\n                // This was added for `uuid/v4` -> `./lib/rng` -> `./lib/rng-browser.js`\n                const mappedPath = replacements[relativePath] ?? replacements[relativePath + '.js'];\n                if (mappedPath === false) {\n                  throw new ShimModuleError();\n                }\n                return mappedPath;\n              },\n      });\n    } catch (error: any) {\n      if (error instanceof ShimModuleError) {\n        return {\n          type: 'empty',\n        };\n      }\n\n      if ('code' in error && error.code === 'MODULE_NOT_FOUND') {\n        if (isNodeExternal(moduleName)) {\n          // In this case, mock the file to use an empty module.\n          return {\n            type: 'empty',\n          };\n        }\n\n        debug({ moduleName, platform, conditions, isServer, preserveSymlinks }, context);\n\n        throw new FailedToResolvePathError(\n          'The module could not be resolved because no file or module matched the pattern:\\n' +\n            `  ${formatFileCandidates(\n              {\n                type: 'sourceFile',\n                filePathPrefix: moduleName,\n                candidateExts: extensions,\n              },\n              true\n            )}\\n\\nFrom:\\n  ${context.originModulePath}\\n`\n        );\n      }\n      throw error;\n    }\n\n    if (context.sourceExts.some((ext) => fp.endsWith(ext))) {\n      return {\n        type: 'sourceFile',\n        filePath: fp,\n      };\n    }\n\n    if (isNodeExternal(fp)) {\n      if (isServer) {\n        return {\n          type: 'sourceFile',\n          filePath: fp,\n        };\n      }\n      // NOTE: This shouldn't happen, the module should throw.\n      // Mock non-server built-in modules to empty.\n      return {\n        type: 'empty',\n      };\n    }\n\n    // NOTE: platform extensions may not be supported on assets.\n\n    if (platform === 'web') {\n      // Skip multi-resolution on web/server bundles. Only consideration here is that\n      // we may still need it in case the only image is a multi-resolution image.\n      return {\n        type: 'assetFiles',\n        filePaths: [fp],\n      };\n    }\n\n    const dirPath = path.dirname(fp);\n    const extension = path.extname(fp);\n    const basename = path.basename(fp, extension);\n    return {\n      type: 'assetFiles',\n      // Support multi-resolution asset extensions...\n      filePaths: context.resolveAsset(dirPath, basename, extension) ?? [fp],\n    };\n  }\n\n  return fastResolve;\n}\n"],"names":["FailedToResolvePathError","createFastResolver","Error","candidates","ShimModuleError","debug","require","realpathFS","process","platform","fs","realpathSync","native","x","realpathErr","code","preserveSymlinks","blockList","cachedExtensions","Map","getAdjustedExtensions","metroSourceExtensions","isNative","key","JSON","stringify","has","get","output","nextOutput","forEach","ext","push","Array","from","Set","map","set","fastResolve","context","moduleName","environment","customResolverOptions","isServer","isServerEnvironment","extensions","sourceExts","preferNativePlatform","fp","conditions","unstable_enablePackageExports","unstable_conditionNames","unstable_conditionsByPlatform","jestResolver","enablePackageExports","basedir","path","dirname","originModulePath","paths","nodeModulesPaths","length","undefined","file","metroRealPath","unstable_getRealPath","error","message","packageFilter","pkg","field","mainFields","main","readPackageSync","readFileSync","pkgFile","getPackage","parse","includeCoreModules","pathFilter","_resolvedPath","relativePathIn","relativePath","replacements","browser","mappedPath","type","isNodeExternal","formatFileCandidates","filePathPrefix","candidateExts","some","endsWith","filePath","filePaths","dirPath","extension","extname","basename","resolveAsset"],"mappings":"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"}
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
