"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "XcrunPrerequisite", {
    enumerable: true,
<<<<<<< HEAD
    get: function() {
        return XcrunPrerequisite;
    }
});
function _spawnasync() {
    const data = /*#__PURE__*/ _interop_require_default(require("@expo/spawn-async"));
    _spawnasync = function() {
=======
    get: ()=>XcrunPrerequisite
});
function _spawnAsync() {
    const data = /*#__PURE__*/ _interopRequireDefault(require("@expo/spawn-async"));
    _spawnAsync = function() {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
        return data;
    };
    return data;
}
function _chalk() {
<<<<<<< HEAD
    const data = /*#__PURE__*/ _interop_require_default(require("chalk"));
=======
    const data = /*#__PURE__*/ _interopRequireDefault(require("chalk"));
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    _chalk = function() {
        return data;
    };
    return data;
}
<<<<<<< HEAD
function _child_process() {
    const data = require("child_process");
    _child_process = function() {
=======
function _childProcess() {
    const data = require("child_process");
    _childProcess = function() {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
        return data;
    };
    return data;
}
const _delay = require("../../../utils/delay");
const _errors = require("../../../utils/errors");
const _prompts = require("../../../utils/prompts");
<<<<<<< HEAD
const _Prerequisite = require("../Prerequisite");
function _interop_require_default(obj) {
=======
const _prerequisite = require("../Prerequisite");
function _interopRequireDefault(obj) {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function isXcrunInstalledAsync() {
    try {
<<<<<<< HEAD
        (0, _child_process().execSync)('xcrun --version', {
            stdio: 'ignore'
=======
        (0, _childProcess().execSync)("xcrun --version", {
            stdio: "ignore"
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
        });
        return true;
    } catch  {
        return false;
    }
}
<<<<<<< HEAD
class XcrunPrerequisite extends _Prerequisite.Prerequisite {
    static #_ = this.instance = new XcrunPrerequisite();
=======
class XcrunPrerequisite extends _prerequisite.Prerequisite {
    static instance = new XcrunPrerequisite();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    /**
   * Ensure Xcode CLI is installed.
   */ async assertImplementation() {
        if (await isXcrunInstalledAsync()) {
            // Run this second to ensure the Xcode version check is run.
            return;
        }
        async function pendingAsync() {
            if (!await isXcrunInstalledAsync()) {
                await (0, _delay.delayAsync)(100);
                return await pendingAsync();
            }
        }
        // This prompt serves no purpose accept informing the user what to do next, we could just open the App Store but it could be confusing if they don't know what's going on.
        const confirm = await (0, _prompts.confirmAsync)({
            initial: true,
            message: (0, _chalk().default)`Xcode {bold Command Line Tools} needs to be installed (requires {bold sudo}), continue?`
        });
        if (confirm) {
            try {
<<<<<<< HEAD
                await (0, _spawnasync().default)('sudo', [
                    'xcode-select',
                    '--install'
=======
                await (0, _spawnAsync().default)("sudo", [
                    "xcode-select",
                    "--install"
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
                ]);
                // Most likely the user will cancel the process, but if they don't this will continue checking until the CLI is available.
                return await pendingAsync();
            } catch  {
            // TODO: Figure out why this might get called (cancel early, network issues, server problems)
            // TODO: Handle me
            }
        }
        throw new _errors.AbortCommandError();
    }
}

//# sourceMappingURL=XcrunPrerequisite.js.map