"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
exports.default = createDevMiddleware;
var _InspectorProxy = _interopRequireDefault(
  require("./inspector-proxy/InspectorProxy")
);
<<<<<<< HEAD
=======
var _deprecated_openFlipperMiddleware = _interopRequireDefault(
  require("./middleware/deprecated_openFlipperMiddleware")
);
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
var _openDebuggerMiddleware = _interopRequireDefault(
  require("./middleware/openDebuggerMiddleware")
);
var _DefaultBrowserLauncher = _interopRequireDefault(
  require("./utils/DefaultBrowserLauncher")
);
var _debuggerFrontend = _interopRequireDefault(
  require("@react-native/debugger-frontend")
);
var _connect = _interopRequireDefault(require("connect"));
var _path = _interopRequireDefault(require("path"));
var _serveStatic = _interopRequireDefault(require("serve-static"));
<<<<<<< HEAD
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : { default: e };
}
=======
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 * @format
 * @oncall react_native
 */

>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
function createDevMiddleware({
  projectRoot,
  serverBaseUrl,
  logger,
  unstable_browserLauncher = _DefaultBrowserLauncher.default,
  unstable_eventReporter,
  unstable_experiments: experimentConfig = {},
  unstable_customInspectorMessageHandler,
}) {
  const experiments = getExperiments(experimentConfig);
<<<<<<< HEAD
  const eventReporter = createWrappedEventReporter(
    unstable_eventReporter,
    logger
  );
  const inspectorProxy = new _InspectorProxy.default(
    projectRoot,
    serverBaseUrl,
    eventReporter,
    experiments,
    logger,
=======
  const inspectorProxy = new _InspectorProxy.default(
    projectRoot,
    serverBaseUrl,
    unstable_eventReporter,
    experiments,
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    unstable_customInspectorMessageHandler
  );
  const middleware = (0, _connect.default)()
    .use(
      "/open-debugger",
<<<<<<< HEAD
      (0, _openDebuggerMiddleware.default)({
        serverBaseUrl,
        inspectorProxy,
        browserLauncher: unstable_browserLauncher,
        eventReporter,
        experiments,
        logger,
      })
    )
    .use(
      "/debugger-frontend/embedder-static/embedderScript.js",
      (_req, res) => {
        res.setHeader("Content-Type", "application/javascript");
        res.end("");
      }
=======
      experiments.enableNewDebugger
        ? (0, _openDebuggerMiddleware.default)({
            serverBaseUrl,
            inspectorProxy,
            browserLauncher: unstable_browserLauncher,
            eventReporter: unstable_eventReporter,
            experiments,
            logger,
          })
        : (0, _deprecated_openFlipperMiddleware.default)({
            logger,
          })
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    )
    .use(
      "/debugger-frontend",
      (0, _serveStatic.default)(_path.default.join(_debuggerFrontend.default), {
        fallthrough: false,
      })
    )
    .use((...args) => inspectorProxy.processRequest(...args));
  return {
    middleware,
    websocketEndpoints: inspectorProxy.createWebSocketListeners(),
  };
}
function getExperiments(config) {
  return {
<<<<<<< HEAD
=======
    enableNewDebugger: config.enableNewDebugger ?? false,
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    enableOpenDebuggerRedirect: config.enableOpenDebuggerRedirect ?? false,
    enableNetworkInspector: config.enableNetworkInspector ?? false,
  };
}
<<<<<<< HEAD
function createWrappedEventReporter(reporter, logger) {
  return {
    logEvent(event) {
      switch (event.type) {
        case "profiling_target_registered":
          logger?.info(
            "Profiling build target '%s' registered for debugging",
            event.appId ?? "unknown"
          );
          break;
        case "fusebox_console_notice":
          logger?.info(
            "\n" +
              "\u001B[7m" +
              " \u001B[1mðŸ’¡ JavaScript logs have moved!\u001B[22m They can now be " +
              "viewed in React Native DevTools. Tip: Type \u001B[1mj\u001B[22m in " +
              "the terminal to open (requires Google Chrome or Microsoft Edge)." +
              "\u001B[27m" +
              "\n"
          );
          break;
      }
      reporter?.logEvent(event);
    },
  };
}
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
