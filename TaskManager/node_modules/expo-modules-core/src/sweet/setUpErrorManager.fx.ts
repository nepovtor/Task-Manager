import NativeErrorManager from './NativeErrorManager';
<<<<<<< HEAD
=======
import { EventEmitter } from '../EventEmitter';
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
import Platform from '../Platform';
import { CodedError } from '../errors/CodedError';

if (__DEV__ && Platform.OS === 'android' && NativeErrorManager) {
  const onNewException = 'ExpoModulesCoreErrorManager.onNewException';
  const onNewWarning = 'ExpoModulesCoreErrorManager.onNewWarning';
<<<<<<< HEAD

  NativeErrorManager.addListener(onNewException, ({ message }: { message: string }) => {
    console.error(message);
  });

  NativeErrorManager.addListener(onNewWarning, ({ message }: { message: string }) => {
=======
  const eventEmitter = new EventEmitter(NativeErrorManager);

  eventEmitter.addListener(onNewException, ({ message }: { message: string }) => {
    console.error(message);
  });

  eventEmitter.addListener(onNewWarning, ({ message }: { message: string }) => {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    console.warn(message);
  });
}

<<<<<<< HEAD
declare namespace globalThis {
  let ExpoModulesCore_CodedError: undefined | typeof CodedError;
}

=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
// We have to export `CodedError` via global object to use in later in the C++ code.
globalThis.ExpoModulesCore_CodedError = CodedError;
