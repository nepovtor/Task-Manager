<<<<<<< HEAD
import type { EventEmitter } from './ts-declarations/EventEmitter';
/**
 * A subscription object that allows to conveniently remove an event listener from the emitter.
 */
export interface EventSubscription {
    /**
     * Removes an event listener for which the subscription has been created.
     * After calling this function, the listener will no longer receive any events from the emitter.
     */
    remove(): void;
}
declare const _default: typeof EventEmitter;
export default _default;
=======
import { NativeEventEmitter } from 'react-native';
type NativeModule = {
    __expo_module_name__?: string;
    startObserving?: () => void;
    stopObserving?: () => void;
    addListener?: any;
    removeListeners?: any;
};
export type Subscription = {
    /**
     * A method to unsubscribe the listener.
     */
    remove: () => void;
};
export declare class EventEmitter {
    _listenerCount: number;
    _nativeModule: NativeModule;
    _eventEmitter: NativeEventEmitter;
    constructor(nativeModule: NativeModule);
    addListener<T>(eventName: string, listener: (event: T) => void): Subscription;
    removeAllListeners(eventName: string): void;
    removeSubscription(subscription: Subscription): void;
    emit(eventName: string, ...params: any[]): void;
}
export {};
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
//# sourceMappingURL=EventEmitter.d.ts.map