// Copyright 2022-present 650 Industries. All rights reserved.

#import <ExpoModulesCore/EXJSIConversions.h>
#import <ExpoModulesCore/EXJavaScriptValue.h>
#import <ExpoModulesCore/EXJavaScriptRuntime.h>
#import <ExpoModulesCore/EXRawJavaScriptFunction.h>
#import <ExpoModulesCore/EXJavaScriptTypedArray.h>
#import <ExpoModulesCore/TypedArray.h>

@implementation EXJavaScriptValue {
  __weak EXJavaScriptRuntime *_runtime;
<<<<<<< HEAD

  /**
   The underlying JS value of which the `JavaScriptValue` is the only owner.
   */
  jsi::Value _value;
}

- (nonnull instancetype)initWithRuntime:(nullable EXJavaScriptRuntime *)runtime
                                  value:(jsi::Value)value
{
  if (self = [super init]) {
    _runtime = runtime;
    _value = std::move(value);
=======
  std::shared_ptr<jsi::Value> _value;
}

- (nonnull instancetype)initWithRuntime:(nonnull EXJavaScriptRuntime *)runtime
                                  value:(std::shared_ptr<jsi::Value>)value
{
  if (self = [super init]) {
    _runtime = runtime;
    _value = value;
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  }
  return self;
}

<<<<<<< HEAD
- (jsi::Value)get
{
  return jsi::Value(*[_runtime get], _value);
=======
- (nonnull jsi::Value *)get
{
  return _value.get();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

#pragma mark - Type checking

- (BOOL)isUndefined
{
<<<<<<< HEAD
  return _value.isUndefined();
=======
  return _value->isUndefined();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (BOOL)isNull
{
<<<<<<< HEAD
  return _value.isNull();
=======
  return _value->isNull();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (BOOL)isBool
{
<<<<<<< HEAD
  return _value.isBool();
=======
  return _value->isBool();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (BOOL)isNumber
{
<<<<<<< HEAD
  return _value.isNumber();
=======
  return _value->isNumber();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (BOOL)isString
{
<<<<<<< HEAD
  return _value.isString();
=======
  return _value->isString();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (BOOL)isSymbol
{
<<<<<<< HEAD
  return _value.isSymbol();
=======
  return _value->isSymbol();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (BOOL)isObject
{
<<<<<<< HEAD
  return _value.isObject();
=======
  return _value->isObject();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (BOOL)isFunction
{
<<<<<<< HEAD
  if (_value.isObject()) {
    jsi::Runtime *runtime = [_runtime get];
    return _value.getObject(*runtime).isFunction(*runtime);
=======
  if (_value->isObject()) {
    jsi::Runtime *runtime = [_runtime get];
    return _value->getObject(*runtime).isFunction(*runtime);
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  }
  return false;
}

- (BOOL)isTypedArray
{
<<<<<<< HEAD
  if (_value.isObject()) {
    jsi::Runtime *runtime = [_runtime get];
    return expo::isTypedArray(*runtime, _value.getObject(*runtime));
=======
  if (_value->isObject()) {
    jsi::Runtime *runtime = [_runtime get];
    return expo::isTypedArray(*runtime, _value->getObject(*runtime));
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  }
  return false;
}

#pragma mark - Type casting

- (nullable id)getRaw
{
<<<<<<< HEAD
  return expo::convertJSIValueToObjCObject(*[_runtime get], _value, [_runtime callInvoker]);
=======
  return expo::convertJSIValueToObjCObject(*[_runtime get], *_value, [_runtime callInvoker]);
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (BOOL)getBool
{
<<<<<<< HEAD
  return _value.getBool();
=======
  return _value->getBool();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (NSInteger)getInt
{
<<<<<<< HEAD
  return _value.getNumber();
=======
  return _value->getNumber();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (double)getDouble
{
<<<<<<< HEAD
  return _value.getNumber();
=======
  return _value->getNumber();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (nonnull NSString *)getString
{
  jsi::Runtime *runtime = [_runtime get];
<<<<<<< HEAD
  return expo::convertJSIStringToNSString(*runtime, _value.getString(*runtime));
=======
  return expo::convertJSIStringToNSString(*runtime, _value->getString(*runtime));
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (nonnull NSArray<EXJavaScriptValue *> *)getArray
{
  jsi::Runtime *runtime = [_runtime get];
<<<<<<< HEAD
  jsi::Array jsiArray = _value.getObject(*runtime).getArray(*runtime);
=======
  jsi::Array jsiArray = _value->getObject(*runtime).getArray(*runtime);
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  size_t arraySize = jsiArray.size(*runtime);
  NSMutableArray *result = [NSMutableArray arrayWithCapacity:arraySize];

  for (size_t i = 0; i < arraySize; i++) {
    jsi::Value item = jsiArray.getValueAtIndex(*runtime, i);

    if (item.isUndefined() || item.isNull()) {
      [result addObject:(id)kCFNull];
    } else {
<<<<<<< HEAD
      [result addObject:[[EXJavaScriptValue alloc] initWithRuntime:_runtime value:std::move(item)]];
=======
      std::shared_ptr<jsi::Value> valuePtr = std::make_shared<jsi::Value>(*runtime, item);
      [result addObject:[[EXJavaScriptValue alloc] initWithRuntime:_runtime value:valuePtr]];
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    }
  }
  return result;
}

- (nonnull NSDictionary<NSString *, id> *)getDictionary
{
  jsi::Runtime *runtime = [_runtime get];
<<<<<<< HEAD
  return expo::convertJSIObjectToNSDictionary(*runtime, _value.getObject(*runtime), [_runtime callInvoker]);
=======
  return expo::convertJSIObjectToNSDictionary(*runtime, _value->getObject(*runtime), [_runtime callInvoker]);
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

- (nonnull EXJavaScriptObject *)getObject
{
  jsi::Runtime *runtime = [_runtime get];
<<<<<<< HEAD
  std::shared_ptr<jsi::Object> objectPtr = std::make_shared<jsi::Object>(_value.asObject(*runtime));
=======
  std::shared_ptr<jsi::Object> objectPtr = std::make_shared<jsi::Object>(_value->asObject(*runtime));
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return [[EXJavaScriptObject alloc] initWith:objectPtr runtime:_runtime];
}

- (nonnull EXRawJavaScriptFunction *)getFunction
{
  jsi::Runtime *runtime = [_runtime get];
<<<<<<< HEAD
  std::shared_ptr<jsi::Function> functionPtr = std::make_shared<jsi::Function>(_value.asObject(*runtime).asFunction(*runtime));
=======
  std::shared_ptr<jsi::Function> functionPtr = std::make_shared<jsi::Function>(_value->asObject(*runtime).asFunction(*runtime));
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return [[EXRawJavaScriptFunction alloc] initWith:functionPtr runtime:_runtime];
}

- (nullable EXJavaScriptTypedArray *)getTypedArray
{
  if (![self isTypedArray]) {
    return nil;
  }
  jsi::Runtime *runtime = [_runtime get];
<<<<<<< HEAD
  std::shared_ptr<jsi::Object> objectPtr = std::make_shared<jsi::Object>(_value.asObject(*runtime));
=======
  std::shared_ptr<jsi::Object> objectPtr = std::make_shared<jsi::Object>(_value->asObject(*runtime));
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return [[EXJavaScriptTypedArray alloc] initWith:objectPtr runtime:_runtime];
}

#pragma mark - Helpers

- (nonnull NSString *)toString
{
  jsi::Runtime *runtime = [_runtime get];
<<<<<<< HEAD
  return expo::convertJSIStringToNSString(*runtime, _value.toString(*runtime));
}

#pragma mark - Static properties

+ (nonnull EXJavaScriptValue *)undefined
{
  auto undefined = std::make_shared<jsi::Value>();
  return [[EXJavaScriptValue alloc] initWithRuntime:nil value:jsi::Value::undefined()];
}

+ (nonnull EXJavaScriptValue *)number:(double)value
{
  return [[EXJavaScriptValue alloc] initWithRuntime:nil value:jsi::Value(value)];
}

+ (nonnull EXJavaScriptValue *)string:(nonnull NSString *)value runtime:(nonnull EXJavaScriptRuntime *)runtime
{
  jsi::Runtime *jsiRuntime = [runtime get];
  return [[EXJavaScriptValue alloc] initWithRuntime:runtime
                                              value:jsi::String::createFromUtf8(*jsiRuntime, [value UTF8String])];
}

+ (nonnull EXJavaScriptValue *)from:(nullable id)value runtime:(nonnull EXJavaScriptRuntime *)runtime
{
  jsi::Runtime *jsiRuntime = [runtime get];
  return [[EXJavaScriptValue alloc] initWithRuntime:runtime
                                              value:expo::convertObjCObjectToJSIValue(*jsiRuntime, value)];
=======
  return expo::convertJSIStringToNSString(*runtime, _value->toString(*runtime));
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
}

@end
