/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @generated
 */

/*
 * !!! GENERATED FILE !!!
 *
 * Any manual changes to this file will be overwritten. To regenerate run `yarn build`.
 */
// lint directives to let us do some basic validation of generated files

/* eslint no-undef: 'error', no-unused-vars: ['error', {vars: "local"}], no-redeclare: 'error' */

<<<<<<< HEAD
/* global $NonMaybeType, Partial, $ReadOnly, $ReadOnlyArray, $FlowFixMe */
=======
/* global $NonMaybeType, Partial, $ReadOnly, $ReadOnlyArray */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
'use strict';
/*::
import type {
  ESNode,
  Token,
<<<<<<< HEAD
  AFunction,
  ClassMember,
  BigIntLiteral,
  BooleanLiteral,
  NullLiteral,
  NumericLiteral,
  RegExpLiteral,
  StringLiteral,
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  Identifier,
  JSXIdentifier,
  JSXText,
  AnyTypeAnnotation,
  ArrayExpression,
  ArrayPattern,
  ArrayTypeAnnotation,
  ArrowFunctionExpression,
<<<<<<< HEAD
  AsConstExpression,
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  AsExpression,
  AssignmentExpression,
  AssignmentPattern,
  AwaitExpression,
  BigIntLiteralTypeAnnotation,
  BigIntTypeAnnotation,
  BinaryExpression,
  BlockStatement,
  BooleanLiteralTypeAnnotation,
  BooleanTypeAnnotation,
  BreakStatement,
  CallExpression,
  CatchClause,
  ChainExpression,
  ClassBody,
  ClassDeclaration,
  ClassExpression,
  ClassImplements,
  ComponentDeclaration,
  ComponentParameter,
  ComponentTypeAnnotation,
  ComponentTypeParameter,
  ConditionalExpression,
  ConditionalTypeAnnotation,
  ContinueStatement,
  DebuggerStatement,
  DeclareClass,
  DeclareComponent,
  DeclaredPredicate,
  DeclareEnum,
  DeclareExportAllDeclaration,
  DeclareExportDeclaration,
  DeclareFunction,
  DeclareHook,
  DeclareInterface,
  DeclareModule,
  DeclareModuleExports,
  DeclareNamespace,
  DeclareOpaqueType,
  DeclareTypeAlias,
  DeclareVariable,
  DoWhileStatement,
  EmptyStatement,
  EmptyTypeAnnotation,
<<<<<<< HEAD
  EnumBigIntBody,
  EnumBigIntMember,
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  EnumBooleanBody,
  EnumBooleanMember,
  EnumDeclaration,
  EnumDefaultedMember,
  EnumNumberBody,
  EnumNumberMember,
  EnumStringBody,
  EnumStringMember,
  EnumSymbolBody,
  ExistsTypeAnnotation,
  ExportAllDeclaration,
  ExportDefaultDeclaration,
  ExportNamedDeclaration,
  ExportSpecifier,
  ExpressionStatement,
  ForInStatement,
  ForOfStatement,
  ForStatement,
  FunctionDeclaration,
  FunctionExpression,
  FunctionTypeAnnotation,
  FunctionTypeParam,
  GenericTypeAnnotation,
  HookDeclaration,
  HookTypeAnnotation,
  IfStatement,
  ImportAttribute,
  ImportDeclaration,
  ImportDefaultSpecifier,
  ImportExpression,
  ImportNamespaceSpecifier,
  ImportSpecifier,
  IndexedAccessType,
  InferredPredicate,
  InferTypeAnnotation,
  InterfaceDeclaration,
  InterfaceExtends,
  InterfaceTypeAnnotation,
  IntersectionTypeAnnotation,
  JSXAttribute,
  JSXClosingElement,
  JSXClosingFragment,
  JSXElement,
  JSXEmptyExpression,
  JSXExpressionContainer,
  JSXFragment,
  JSXMemberExpression,
  JSXNamespacedName,
  JSXOpeningElement,
  JSXOpeningFragment,
  JSXSpreadAttribute,
  JSXSpreadChild,
  KeyofTypeAnnotation,
  LabeledStatement,
  LogicalExpression,
  MemberExpression,
  MetaProperty,
  MethodDefinition,
  MixedTypeAnnotation,
  NewExpression,
  NullableTypeAnnotation,
  NullLiteralTypeAnnotation,
  NumberLiteralTypeAnnotation,
  NumberTypeAnnotation,
  ObjectExpression,
  ObjectPattern,
  ObjectTypeAnnotation,
  ObjectTypeCallProperty,
  ObjectTypeIndexer,
  ObjectTypeInternalSlot,
  ObjectTypeMappedTypeProperty,
  ObjectTypeProperty,
  ObjectTypeSpreadProperty,
  OpaqueType,
  OptionalIndexedAccessType,
  PrivateIdentifier,
<<<<<<< HEAD
  Program,
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  Property,
  PropertyDefinition,
  QualifiedTypeIdentifier,
  QualifiedTypeofIdentifier,
  RestElement,
  ReturnStatement,
  SequenceExpression,
  SpreadElement,
  StringLiteralTypeAnnotation,
  StringTypeAnnotation,
  Super,
  SwitchCase,
  SwitchStatement,
  SymbolTypeAnnotation,
  TaggedTemplateExpression,
  TemplateElement,
  TemplateLiteral,
  ThisExpression,
  ThisTypeAnnotation,
  ThrowStatement,
  TryStatement,
  TupleTypeAnnotation,
  TupleTypeLabeledElement,
  TupleTypeSpreadElement,
  TypeAlias,
  TypeAnnotation,
  TypeCastExpression,
  TypeofTypeAnnotation,
  TypeOperator,
  TypeParameter,
  TypeParameterDeclaration,
  TypeParameterInstantiation,
  TypePredicate,
  UnaryExpression,
  UnionTypeAnnotation,
  UpdateExpression,
  VariableDeclaration,
  VariableDeclarator,
  Variance,
  VoidTypeAnnotation,
  WhileStatement,
  WithStatement,
  YieldExpression,
  Literal,
  LineComment,
  BlockComment,
  MostTokens,
<<<<<<< HEAD
} from '../types';
=======
} from 'hermes-estree';
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
*/

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAnyTypeAnnotation = isAnyTypeAnnotation;
exports.isArrayExpression = isArrayExpression;
exports.isArrayPattern = isArrayPattern;
exports.isArrayTypeAnnotation = isArrayTypeAnnotation;
exports.isArrowFunctionExpression = isArrowFunctionExpression;
<<<<<<< HEAD
exports.isAsConstExpression = isAsConstExpression;
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
exports.isAsExpression = isAsExpression;
exports.isAsKeyword = isAsKeyword;
exports.isAssignmentExpression = isAssignmentExpression;
exports.isAssignmentPattern = isAssignmentPattern;
exports.isAsterixToken = isAsterixToken;
exports.isAsyncKeyword = isAsyncKeyword;
exports.isAwaitExpression = isAwaitExpression;
exports.isAwaitKeyword = isAwaitKeyword;
exports.isBigIntLiteralTypeAnnotation = isBigIntLiteralTypeAnnotation;
exports.isBigIntTypeAnnotation = isBigIntTypeAnnotation;
exports.isBinaryExpression = isBinaryExpression;
exports.isBitwiseANDEqualToken = isBitwiseANDEqualToken;
exports.isBitwiseANDToken = isBitwiseANDToken;
exports.isBitwiseLeftShiftEqualToken = isBitwiseLeftShiftEqualToken;
exports.isBitwiseLeftShiftToken = isBitwiseLeftShiftToken;
exports.isBitwiseOREqualToken = isBitwiseOREqualToken;
exports.isBitwiseORToken = isBitwiseORToken;
exports.isBitwiseRightShiftEqualToken = isBitwiseRightShiftEqualToken;
exports.isBitwiseRightShiftToken = isBitwiseRightShiftToken;
exports.isBitwiseUnsignedRightShiftEqualToken = isBitwiseUnsignedRightShiftEqualToken;
exports.isBitwiseUnsignedRightShiftToken = isBitwiseUnsignedRightShiftToken;
exports.isBitwiseXOREqualToken = isBitwiseXOREqualToken;
exports.isBitwiseXORToken = isBitwiseXORToken;
exports.isBlockComment = isBlockComment;
exports.isBlockStatement = isBlockStatement;
exports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
exports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
exports.isBreakStatement = isBreakStatement;
exports.isBreakToken = isBreakToken;
exports.isCallExpression = isCallExpression;
exports.isCaseToken = isCaseToken;
exports.isCatchClause = isCatchClause;
exports.isCatchToken = isCatchToken;
exports.isChainExpression = isChainExpression;
exports.isClassBody = isClassBody;
exports.isClassDeclaration = isClassDeclaration;
exports.isClassExpression = isClassExpression;
exports.isClassImplements = isClassImplements;
exports.isClassToken = isClassToken;
exports.isClosingAngleBracketToken = isClosingAngleBracketToken;
exports.isClosingCurlyBracketToken = isClosingCurlyBracketToken;
exports.isClosingParenthesisToken = isClosingParenthesisToken;
exports.isColonToken = isColonToken;
exports.isCommaToken = isCommaToken;
exports.isComponentDeclaration = isComponentDeclaration;
exports.isComponentParameter = isComponentParameter;
exports.isComponentTypeAnnotation = isComponentTypeAnnotation;
exports.isComponentTypeParameter = isComponentTypeParameter;
exports.isConditionalExpression = isConditionalExpression;
exports.isConditionalTypeAnnotation = isConditionalTypeAnnotation;
exports.isConstToken = isConstToken;
exports.isContinueStatement = isContinueStatement;
exports.isContinueToken = isContinueToken;
exports.isDebuggerStatement = isDebuggerStatement;
exports.isDebuggerToken = isDebuggerToken;
exports.isDeclareClass = isDeclareClass;
exports.isDeclareComponent = isDeclareComponent;
exports.isDeclareEnum = isDeclareEnum;
exports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
exports.isDeclareExportDeclaration = isDeclareExportDeclaration;
exports.isDeclareFunction = isDeclareFunction;
exports.isDeclareHook = isDeclareHook;
exports.isDeclareInterface = isDeclareInterface;
exports.isDeclareKeyword = isDeclareKeyword;
exports.isDeclareModule = isDeclareModule;
exports.isDeclareModuleExports = isDeclareModuleExports;
exports.isDeclareNamespace = isDeclareNamespace;
exports.isDeclareOpaqueType = isDeclareOpaqueType;
exports.isDeclareTypeAlias = isDeclareTypeAlias;
exports.isDeclareVariable = isDeclareVariable;
exports.isDeclaredPredicate = isDeclaredPredicate;
exports.isDecrementToken = isDecrementToken;
exports.isDefaultToken = isDefaultToken;
exports.isDeleteToken = isDeleteToken;
exports.isDivideEqualToken = isDivideEqualToken;
exports.isDoToken = isDoToken;
exports.isDoWhileStatement = isDoWhileStatement;
exports.isDotDotDotToken = isDotDotDotToken;
exports.isDotToken = isDotToken;
exports.isElseToken = isElseToken;
exports.isEmptyStatement = isEmptyStatement;
exports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
<<<<<<< HEAD
exports.isEnumBigIntBody = isEnumBigIntBody;
exports.isEnumBigIntMember = isEnumBigIntMember;
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
exports.isEnumBooleanBody = isEnumBooleanBody;
exports.isEnumBooleanMember = isEnumBooleanMember;
exports.isEnumDeclaration = isEnumDeclaration;
exports.isEnumDefaultedMember = isEnumDefaultedMember;
exports.isEnumNumberBody = isEnumNumberBody;
exports.isEnumNumberMember = isEnumNumberMember;
exports.isEnumStringBody = isEnumStringBody;
exports.isEnumStringMember = isEnumStringMember;
exports.isEnumSymbolBody = isEnumSymbolBody;
exports.isEnumToken = isEnumToken;
exports.isEqualToken = isEqualToken;
exports.isExistsTypeAnnotation = isExistsTypeAnnotation;
exports.isExponentateEqualToken = isExponentateEqualToken;
exports.isExponentiationToken = isExponentiationToken;
exports.isExportAllDeclaration = isExportAllDeclaration;
exports.isExportDefaultDeclaration = isExportDefaultDeclaration;
exports.isExportNamedDeclaration = isExportNamedDeclaration;
exports.isExportSpecifier = isExportSpecifier;
exports.isExportToken = isExportToken;
exports.isExpressionStatement = isExpressionStatement;
exports.isExtendsToken = isExtendsToken;
exports.isFinallyToken = isFinallyToken;
exports.isForInStatement = isForInStatement;
exports.isForOfStatement = isForOfStatement;
exports.isForStatement = isForStatement;
exports.isForToken = isForToken;
exports.isForwardSlashToken = isForwardSlashToken;
exports.isFromKeyword = isFromKeyword;
exports.isFunctionDeclaration = isFunctionDeclaration;
exports.isFunctionExpression = isFunctionExpression;
exports.isFunctionToken = isFunctionToken;
exports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
exports.isFunctionTypeParam = isFunctionTypeParam;
exports.isGenericTypeAnnotation = isGenericTypeAnnotation;
exports.isGetKeyword = isGetKeyword;
exports.isGreaterThanOrEqualToToken = isGreaterThanOrEqualToToken;
exports.isGreaterThanToken = isGreaterThanToken;
exports.isHookDeclaration = isHookDeclaration;
exports.isHookTypeAnnotation = isHookTypeAnnotation;
exports.isIdentifier = isIdentifier;
exports.isIfStatement = isIfStatement;
exports.isIfToken = isIfToken;
exports.isImplementsToken = isImplementsToken;
exports.isImportAttribute = isImportAttribute;
exports.isImportDeclaration = isImportDeclaration;
exports.isImportDefaultSpecifier = isImportDefaultSpecifier;
exports.isImportExpression = isImportExpression;
exports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
exports.isImportSpecifier = isImportSpecifier;
exports.isImportToken = isImportToken;
exports.isInToken = isInToken;
exports.isIncrementToken = isIncrementToken;
exports.isIndexedAccessType = isIndexedAccessType;
exports.isInferTypeAnnotation = isInferTypeAnnotation;
exports.isInferredPredicate = isInferredPredicate;
exports.isInstanceOfToken = isInstanceOfToken;
exports.isInterfaceDeclaration = isInterfaceDeclaration;
exports.isInterfaceExtends = isInterfaceExtends;
exports.isInterfaceToken = isInterfaceToken;
exports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
exports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
exports.isIntersectionTypeToken = isIntersectionTypeToken;
exports.isJSXAttribute = isJSXAttribute;
exports.isJSXClosingElement = isJSXClosingElement;
exports.isJSXClosingFragment = isJSXClosingFragment;
exports.isJSXElement = isJSXElement;
exports.isJSXEmptyExpression = isJSXEmptyExpression;
exports.isJSXExpressionContainer = isJSXExpressionContainer;
exports.isJSXFragment = isJSXFragment;
exports.isJSXIdentifier = isJSXIdentifier;
exports.isJSXMemberExpression = isJSXMemberExpression;
exports.isJSXNamespacedName = isJSXNamespacedName;
exports.isJSXOpeningElement = isJSXOpeningElement;
exports.isJSXOpeningFragment = isJSXOpeningFragment;
exports.isJSXSpreadAttribute = isJSXSpreadAttribute;
exports.isJSXSpreadChild = isJSXSpreadChild;
exports.isJSXText = isJSXText;
exports.isKeyofTypeAnnotation = isKeyofTypeAnnotation;
exports.isLabeledStatement = isLabeledStatement;
exports.isLessThanOrEqualToToken = isLessThanOrEqualToToken;
exports.isLessThanToken = isLessThanToken;
exports.isLetKeyword = isLetKeyword;
exports.isLineComment = isLineComment;
exports.isLiteral = isLiteral;
exports.isLogicalANDEqualToken = isLogicalANDEqualToken;
exports.isLogicalANDToken = isLogicalANDToken;
exports.isLogicalExpression = isLogicalExpression;
exports.isLogicalNotToken = isLogicalNotToken;
exports.isLogicalOREqualToken = isLogicalOREqualToken;
exports.isLogicalORToken = isLogicalORToken;
exports.isLooseEqualToken = isLooseEqualToken;
exports.isLooseNotEqualToken = isLooseNotEqualToken;
exports.isMemberExpression = isMemberExpression;
exports.isMetaProperty = isMetaProperty;
exports.isMethodDefinition = isMethodDefinition;
exports.isMinusEqualToken = isMinusEqualToken;
exports.isMinusToken = isMinusToken;
exports.isMixedTypeAnnotation = isMixedTypeAnnotation;
exports.isModuleKeyword = isModuleKeyword;
exports.isMultiplyEqualToken = isMultiplyEqualToken;
exports.isNewExpression = isNewExpression;
exports.isNewToken = isNewToken;
exports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
exports.isNullableTypeAnnotation = isNullableTypeAnnotation;
exports.isNullishCoalesceEqualToken = isNullishCoalesceEqualToken;
exports.isNullishCoalesceToken = isNullishCoalesceToken;
exports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
exports.isNumberTypeAnnotation = isNumberTypeAnnotation;
exports.isObjectExpression = isObjectExpression;
exports.isObjectPattern = isObjectPattern;
exports.isObjectTypeAnnotation = isObjectTypeAnnotation;
exports.isObjectTypeCallProperty = isObjectTypeCallProperty;
exports.isObjectTypeIndexer = isObjectTypeIndexer;
exports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
exports.isObjectTypeMappedTypeProperty = isObjectTypeMappedTypeProperty;
exports.isObjectTypeProperty = isObjectTypeProperty;
exports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
exports.isOfKeyword = isOfKeyword;
exports.isOpaqueType = isOpaqueType;
exports.isOpeningAngleBracketToken = isOpeningAngleBracketToken;
exports.isOpeningCurlyBracketToken = isOpeningCurlyBracketToken;
exports.isOpeningParenthesisToken = isOpeningParenthesisToken;
exports.isOptionalChainToken = isOptionalChainToken;
exports.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
exports.isPercentToken = isPercentToken;
exports.isPlusEqualToken = isPlusEqualToken;
exports.isPlusToken = isPlusToken;
exports.isPrivateIdentifier = isPrivateIdentifier;
<<<<<<< HEAD
exports.isProgram = isProgram;
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
exports.isProperty = isProperty;
exports.isPropertyDefinition = isPropertyDefinition;
exports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
exports.isQualifiedTypeofIdentifier = isQualifiedTypeofIdentifier;
exports.isQuestionMarkToken = isQuestionMarkToken;
exports.isRemainderEqualToken = isRemainderEqualToken;
exports.isRestElement = isRestElement;
exports.isReturnStatement = isReturnStatement;
exports.isReturnToken = isReturnToken;
exports.isSemicolonToken = isSemicolonToken;
exports.isSequenceExpression = isSequenceExpression;
exports.isSetKeyword = isSetKeyword;
exports.isSpreadElement = isSpreadElement;
exports.isStaticToken = isStaticToken;
exports.isStrictEqualToken = isStrictEqualToken;
exports.isStrictNotEqualToken = isStrictNotEqualToken;
exports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
exports.isStringTypeAnnotation = isStringTypeAnnotation;
exports.isSuper = isSuper;
exports.isSuperToken = isSuperToken;
exports.isSwitchCase = isSwitchCase;
exports.isSwitchStatement = isSwitchStatement;
exports.isSwitchToken = isSwitchToken;
exports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
exports.isTaggedTemplateExpression = isTaggedTemplateExpression;
exports.isTemplateElement = isTemplateElement;
exports.isTemplateLiteral = isTemplateLiteral;
exports.isThisExpression = isThisExpression;
exports.isThisToken = isThisToken;
exports.isThisTypeAnnotation = isThisTypeAnnotation;
exports.isThrowStatement = isThrowStatement;
exports.isThrowToken = isThrowToken;
exports.isTryStatement = isTryStatement;
exports.isTryToken = isTryToken;
exports.isTupleTypeAnnotation = isTupleTypeAnnotation;
exports.isTupleTypeLabeledElement = isTupleTypeLabeledElement;
exports.isTupleTypeSpreadElement = isTupleTypeSpreadElement;
exports.isTypeAlias = isTypeAlias;
exports.isTypeAnnotation = isTypeAnnotation;
exports.isTypeCastExpression = isTypeCastExpression;
exports.isTypeKeyword = isTypeKeyword;
exports.isTypeOfToken = isTypeOfToken;
exports.isTypeOperator = isTypeOperator;
exports.isTypeParameter = isTypeParameter;
exports.isTypeParameterDeclaration = isTypeParameterDeclaration;
exports.isTypeParameterInstantiation = isTypeParameterInstantiation;
exports.isTypePredicate = isTypePredicate;
exports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
exports.isUnaryExpression = isUnaryExpression;
exports.isUnaryNegationToken = isUnaryNegationToken;
exports.isUnionTypeAnnotation = isUnionTypeAnnotation;
exports.isUnionTypeToken = isUnionTypeToken;
exports.isUpdateExpression = isUpdateExpression;
exports.isVarToken = isVarToken;
exports.isVariableDeclaration = isVariableDeclaration;
exports.isVariableDeclarator = isVariableDeclarator;
exports.isVariance = isVariance;
exports.isVoidToken = isVoidToken;
exports.isVoidTypeAnnotation = isVoidTypeAnnotation;
exports.isWhileStatement = isWhileStatement;
exports.isWhileToken = isWhileToken;
exports.isWithStatement = isWithStatement;
exports.isWithToken = isWithToken;
exports.isYieldExpression = isYieldExpression;
exports.isYieldToken = isYieldToken;

function isIdentifier(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier';
}

function isJSXIdentifier(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (JSXIdentifier | MostTokens) */
=======
/*: node is (JSXIdentifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXIdentifier';
}

function isJSXText(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (JSXText | MostTokens) */
=======
/*: node is (JSXText | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXText';
}

function isAnyTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is AnyTypeAnnotation */
=======
/*: node is AnyTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'AnyTypeAnnotation';
}

function isArrayExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ArrayExpression */
=======
/*: node is ArrayExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ArrayExpression';
}

function isArrayPattern(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ArrayPattern */
=======
/*: node is ArrayPattern */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ArrayPattern';
}

function isArrayTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ArrayTypeAnnotation */
=======
/*: node is ArrayTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ArrayTypeAnnotation';
}

function isArrowFunctionExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ArrowFunctionExpression */
=======
/*: node is ArrowFunctionExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ArrowFunctionExpression';
}

<<<<<<< HEAD
function isAsConstExpression(node
/*: ESNode | Token */
)
/*: implies node is AsConstExpression */
{
  return node.type === 'AsConstExpression';
}

function isAsExpression(node
/*: ESNode | Token */
)
/*: implies node is AsExpression */
=======
function isAsExpression(node
/*: ESNode | Token */
)
/*: node is AsExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'AsExpression';
}

function isAssignmentExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is AssignmentExpression */
=======
/*: node is AssignmentExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'AssignmentExpression';
}

function isAssignmentPattern(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is AssignmentPattern */
=======
/*: node is AssignmentPattern */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'AssignmentPattern';
}

function isAwaitExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is AwaitExpression */
=======
/*: node is AwaitExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'AwaitExpression';
}

function isBigIntLiteralTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is BigIntLiteralTypeAnnotation */
=======
/*: node is BigIntLiteralTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'BigIntLiteralTypeAnnotation';
}

function isBigIntTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is BigIntTypeAnnotation */
=======
/*: node is BigIntTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'BigIntTypeAnnotation';
}

function isBinaryExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is BinaryExpression */
=======
/*: node is BinaryExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'BinaryExpression';
}

function isBlockStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is BlockStatement */
=======
/*: node is BlockStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'BlockStatement';
}

function isBooleanLiteralTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is BooleanLiteralTypeAnnotation */
=======
/*: node is BooleanLiteralTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'BooleanLiteralTypeAnnotation';
}

function isBooleanTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is BooleanTypeAnnotation */
=======
/*: node is BooleanTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'BooleanTypeAnnotation';
}

function isBreakStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is BreakStatement */
=======
/*: node is BreakStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'BreakStatement';
}

function isCallExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is CallExpression */
=======
/*: node is CallExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'CallExpression';
}

function isCatchClause(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is CatchClause */
=======
/*: node is CatchClause */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'CatchClause';
}

function isChainExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ChainExpression */
=======
/*: node is ChainExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ChainExpression';
}

function isClassBody(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ClassBody */
=======
/*: node is ClassBody */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ClassBody';
}

function isClassDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ClassDeclaration */
=======
/*: node is ClassDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ClassDeclaration';
}

function isClassExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ClassExpression */
=======
/*: node is ClassExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ClassExpression';
}

function isClassImplements(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ClassImplements */
=======
/*: node is ClassImplements */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ClassImplements';
}

function isComponentDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ComponentDeclaration */
=======
/*: node is ComponentDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ComponentDeclaration';
}

function isComponentParameter(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ComponentParameter */
=======
/*: node is ComponentParameter */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ComponentParameter';
}

function isComponentTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ComponentTypeAnnotation */
=======
/*: node is ComponentTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ComponentTypeAnnotation';
}

function isComponentTypeParameter(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ComponentTypeParameter */
=======
/*: node is ComponentTypeParameter */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ComponentTypeParameter';
}

function isConditionalExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ConditionalExpression */
=======
/*: node is ConditionalExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ConditionalExpression';
}

function isConditionalTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ConditionalTypeAnnotation */
=======
/*: node is ConditionalTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ConditionalTypeAnnotation';
}

function isContinueStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ContinueStatement */
=======
/*: node is ContinueStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ContinueStatement';
}

function isDebuggerStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DebuggerStatement */
=======
/*: node is DebuggerStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DebuggerStatement';
}

function isDeclareClass(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareClass */
=======
/*: node is DeclareClass */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareClass';
}

function isDeclareComponent(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareComponent */
=======
/*: node is DeclareComponent */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareComponent';
}

function isDeclaredPredicate(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclaredPredicate */
=======
/*: node is DeclaredPredicate */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclaredPredicate';
}

function isDeclareEnum(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareEnum */
=======
/*: node is DeclareEnum */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareEnum';
}

function isDeclareExportAllDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareExportAllDeclaration */
=======
/*: node is DeclareExportAllDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareExportAllDeclaration';
}

function isDeclareExportDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareExportDeclaration */
=======
/*: node is DeclareExportDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareExportDeclaration';
}

function isDeclareFunction(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareFunction */
=======
/*: node is DeclareFunction */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareFunction';
}

function isDeclareHook(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareHook */
=======
/*: node is DeclareHook */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareHook';
}

function isDeclareInterface(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareInterface */
=======
/*: node is DeclareInterface */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareInterface';
}

function isDeclareModule(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareModule */
=======
/*: node is DeclareModule */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareModule';
}

function isDeclareModuleExports(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareModuleExports */
=======
/*: node is DeclareModuleExports */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareModuleExports';
}

function isDeclareNamespace(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareNamespace */
=======
/*: node is DeclareNamespace */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareNamespace';
}

function isDeclareOpaqueType(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareOpaqueType */
=======
/*: node is DeclareOpaqueType */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareOpaqueType';
}

function isDeclareTypeAlias(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareTypeAlias */
=======
/*: node is DeclareTypeAlias */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareTypeAlias';
}

function isDeclareVariable(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DeclareVariable */
=======
/*: node is DeclareVariable */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DeclareVariable';
}

function isDoWhileStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is DoWhileStatement */
=======
/*: node is DoWhileStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'DoWhileStatement';
}

function isEmptyStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is EmptyStatement */
=======
/*: node is EmptyStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EmptyStatement';
}

function isEmptyTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is EmptyTypeAnnotation */
=======
/*: node is EmptyTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EmptyTypeAnnotation';
}

<<<<<<< HEAD
function isEnumBigIntBody(node
/*: ESNode | Token */
)
/*: implies node is EnumBigIntBody */
{
  return node.type === 'EnumBigIntBody';
}

function isEnumBigIntMember(node
/*: ESNode | Token */
)
/*: implies node is EnumBigIntMember */
{
  return node.type === 'EnumBigIntMember';
}

function isEnumBooleanBody(node
/*: ESNode | Token */
)
/*: implies node is EnumBooleanBody */
=======
function isEnumBooleanBody(node
/*: ESNode | Token */
)
/*: node is EnumBooleanBody */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EnumBooleanBody';
}

function isEnumBooleanMember(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is EnumBooleanMember */
=======
/*: node is EnumBooleanMember */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EnumBooleanMember';
}

function isEnumDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is EnumDeclaration */
=======
/*: node is EnumDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EnumDeclaration';
}

function isEnumDefaultedMember(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is EnumDefaultedMember */
=======
/*: node is EnumDefaultedMember */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EnumDefaultedMember';
}

function isEnumNumberBody(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is EnumNumberBody */
=======
/*: node is EnumNumberBody */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EnumNumberBody';
}

function isEnumNumberMember(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is EnumNumberMember */
=======
/*: node is EnumNumberMember */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EnumNumberMember';
}

function isEnumStringBody(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is EnumStringBody */
=======
/*: node is EnumStringBody */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EnumStringBody';
}

function isEnumStringMember(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is EnumStringMember */
=======
/*: node is EnumStringMember */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EnumStringMember';
}

function isEnumSymbolBody(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is EnumSymbolBody */
=======
/*: node is EnumSymbolBody */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'EnumSymbolBody';
}

function isExistsTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ExistsTypeAnnotation */
=======
/*: node is ExistsTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ExistsTypeAnnotation';
}

function isExportAllDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ExportAllDeclaration */
=======
/*: node is ExportAllDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ExportAllDeclaration';
}

function isExportDefaultDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ExportDefaultDeclaration */
=======
/*: node is ExportDefaultDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ExportDefaultDeclaration';
}

function isExportNamedDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ExportNamedDeclaration */
=======
/*: node is ExportNamedDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ExportNamedDeclaration';
}

function isExportSpecifier(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ExportSpecifier */
=======
/*: node is ExportSpecifier */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ExportSpecifier';
}

function isExpressionStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ExpressionStatement */
=======
/*: node is ExpressionStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ExpressionStatement';
}

function isForInStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ForInStatement */
=======
/*: node is ForInStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ForInStatement';
}

function isForOfStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ForOfStatement */
=======
/*: node is ForOfStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ForOfStatement';
}

function isForStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ForStatement */
=======
/*: node is ForStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ForStatement';
}

function isFunctionDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is FunctionDeclaration */
=======
/*: node is FunctionDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'FunctionDeclaration';
}

function isFunctionExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is FunctionExpression */
=======
/*: node is FunctionExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'FunctionExpression';
}

function isFunctionTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is FunctionTypeAnnotation */
=======
/*: node is FunctionTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'FunctionTypeAnnotation';
}

function isFunctionTypeParam(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is FunctionTypeParam */
=======
/*: node is FunctionTypeParam */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'FunctionTypeParam';
}

function isGenericTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is GenericTypeAnnotation */
=======
/*: node is GenericTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'GenericTypeAnnotation';
}

function isHookDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is HookDeclaration */
=======
/*: node is HookDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'HookDeclaration';
}

function isHookTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is HookTypeAnnotation */
=======
/*: node is HookTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'HookTypeAnnotation';
}

function isIfStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is IfStatement */
=======
/*: node is IfStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'IfStatement';
}

function isImportAttribute(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ImportAttribute */
=======
/*: node is ImportAttribute */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ImportAttribute';
}

function isImportDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ImportDeclaration */
=======
/*: node is ImportDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ImportDeclaration';
}

function isImportDefaultSpecifier(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ImportDefaultSpecifier */
=======
/*: node is ImportDefaultSpecifier */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ImportDefaultSpecifier';
}

function isImportExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ImportExpression */
=======
/*: node is ImportExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ImportExpression';
}

function isImportNamespaceSpecifier(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ImportNamespaceSpecifier */
=======
/*: node is ImportNamespaceSpecifier */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ImportNamespaceSpecifier';
}

function isImportSpecifier(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ImportSpecifier */
=======
/*: node is ImportSpecifier */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ImportSpecifier';
}

function isIndexedAccessType(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is IndexedAccessType */
=======
/*: node is IndexedAccessType */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'IndexedAccessType';
}

function isInferredPredicate(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is InferredPredicate */
=======
/*: node is InferredPredicate */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'InferredPredicate';
}

function isInferTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is InferTypeAnnotation */
=======
/*: node is InferTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'InferTypeAnnotation';
}

function isInterfaceDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is InterfaceDeclaration */
=======
/*: node is InterfaceDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'InterfaceDeclaration';
}

function isInterfaceExtends(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is InterfaceExtends */
=======
/*: node is InterfaceExtends */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'InterfaceExtends';
}

function isInterfaceTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is InterfaceTypeAnnotation */
=======
/*: node is InterfaceTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'InterfaceTypeAnnotation';
}

function isIntersectionTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is IntersectionTypeAnnotation */
=======
/*: node is IntersectionTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'IntersectionTypeAnnotation';
}

function isJSXAttribute(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXAttribute */
=======
/*: node is JSXAttribute */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXAttribute';
}

function isJSXClosingElement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXClosingElement */
=======
/*: node is JSXClosingElement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXClosingElement';
}

function isJSXClosingFragment(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXClosingFragment */
=======
/*: node is JSXClosingFragment */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXClosingFragment';
}

function isJSXElement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXElement */
=======
/*: node is JSXElement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXElement';
}

function isJSXEmptyExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXEmptyExpression */
=======
/*: node is JSXEmptyExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXEmptyExpression';
}

function isJSXExpressionContainer(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXExpressionContainer */
=======
/*: node is JSXExpressionContainer */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXExpressionContainer';
}

function isJSXFragment(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXFragment */
=======
/*: node is JSXFragment */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXFragment';
}

function isJSXMemberExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXMemberExpression */
=======
/*: node is JSXMemberExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXMemberExpression';
}

function isJSXNamespacedName(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXNamespacedName */
=======
/*: node is JSXNamespacedName */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXNamespacedName';
}

function isJSXOpeningElement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXOpeningElement */
=======
/*: node is JSXOpeningElement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXOpeningElement';
}

function isJSXOpeningFragment(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXOpeningFragment */
=======
/*: node is JSXOpeningFragment */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXOpeningFragment';
}

function isJSXSpreadAttribute(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXSpreadAttribute */
=======
/*: node is JSXSpreadAttribute */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXSpreadAttribute';
}

function isJSXSpreadChild(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is JSXSpreadChild */
=======
/*: node is JSXSpreadChild */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'JSXSpreadChild';
}

function isKeyofTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is KeyofTypeAnnotation */
=======
/*: node is KeyofTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'KeyofTypeAnnotation';
}

function isLabeledStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is LabeledStatement */
=======
/*: node is LabeledStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'LabeledStatement';
}

function isLogicalExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is LogicalExpression */
=======
/*: node is LogicalExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'LogicalExpression';
}

function isMemberExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MemberExpression */
=======
/*: node is MemberExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'MemberExpression';
}

function isMetaProperty(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MetaProperty */
=======
/*: node is MetaProperty */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'MetaProperty';
}

function isMethodDefinition(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MethodDefinition */
=======
/*: node is MethodDefinition */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'MethodDefinition';
}

function isMixedTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MixedTypeAnnotation */
=======
/*: node is MixedTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'MixedTypeAnnotation';
}

function isNewExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is NewExpression */
=======
/*: node is NewExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'NewExpression';
}

function isNullableTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is NullableTypeAnnotation */
=======
/*: node is NullableTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'NullableTypeAnnotation';
}

function isNullLiteralTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is NullLiteralTypeAnnotation */
=======
/*: node is NullLiteralTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'NullLiteralTypeAnnotation';
}

function isNumberLiteralTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is NumberLiteralTypeAnnotation */
=======
/*: node is NumberLiteralTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'NumberLiteralTypeAnnotation';
}

function isNumberTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is NumberTypeAnnotation */
=======
/*: node is NumberTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'NumberTypeAnnotation';
}

function isObjectExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ObjectExpression */
=======
/*: node is ObjectExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ObjectExpression';
}

function isObjectPattern(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ObjectPattern */
=======
/*: node is ObjectPattern */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ObjectPattern';
}

function isObjectTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ObjectTypeAnnotation */
=======
/*: node is ObjectTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ObjectTypeAnnotation';
}

function isObjectTypeCallProperty(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ObjectTypeCallProperty */
=======
/*: node is ObjectTypeCallProperty */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ObjectTypeCallProperty';
}

function isObjectTypeIndexer(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ObjectTypeIndexer */
=======
/*: node is ObjectTypeIndexer */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ObjectTypeIndexer';
}

function isObjectTypeInternalSlot(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ObjectTypeInternalSlot */
=======
/*: node is ObjectTypeInternalSlot */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ObjectTypeInternalSlot';
}

function isObjectTypeMappedTypeProperty(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ObjectTypeMappedTypeProperty */
=======
/*: node is ObjectTypeMappedTypeProperty */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ObjectTypeMappedTypeProperty';
}

function isObjectTypeProperty(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ObjectTypeProperty */
=======
/*: node is ObjectTypeProperty */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ObjectTypeProperty';
}

function isObjectTypeSpreadProperty(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ObjectTypeSpreadProperty */
=======
/*: node is ObjectTypeSpreadProperty */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ObjectTypeSpreadProperty';
}

function isOpaqueType(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is OpaqueType */
=======
/*: node is OpaqueType */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'OpaqueType';
}

function isOptionalIndexedAccessType(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is OptionalIndexedAccessType */
=======
/*: node is OptionalIndexedAccessType */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'OptionalIndexedAccessType';
}

function isPrivateIdentifier(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is PrivateIdentifier */
=======
/*: node is PrivateIdentifier */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'PrivateIdentifier';
}

<<<<<<< HEAD
function isProgram(node
/*: ESNode | Token */
)
/*: implies node is Program */
{
  return node.type === 'Program';
}

function isProperty(node
/*: ESNode | Token */
)
/*: implies node is Property */
=======
function isProperty(node
/*: ESNode | Token */
)
/*: node is Property */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Property';
}

function isPropertyDefinition(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is PropertyDefinition */
=======
/*: node is PropertyDefinition */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'PropertyDefinition';
}

function isQualifiedTypeIdentifier(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is QualifiedTypeIdentifier */
=======
/*: node is QualifiedTypeIdentifier */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'QualifiedTypeIdentifier';
}

function isQualifiedTypeofIdentifier(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is QualifiedTypeofIdentifier */
=======
/*: node is QualifiedTypeofIdentifier */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'QualifiedTypeofIdentifier';
}

function isRestElement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is RestElement */
=======
/*: node is RestElement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'RestElement';
}

function isReturnStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ReturnStatement */
=======
/*: node is ReturnStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ReturnStatement';
}

function isSequenceExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is SequenceExpression */
=======
/*: node is SequenceExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'SequenceExpression';
}

function isSpreadElement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is SpreadElement */
=======
/*: node is SpreadElement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'SpreadElement';
}

function isStringLiteralTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is StringLiteralTypeAnnotation */
=======
/*: node is StringLiteralTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'StringLiteralTypeAnnotation';
}

function isStringTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is StringTypeAnnotation */
=======
/*: node is StringTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'StringTypeAnnotation';
}

function isSuper(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is Super */
=======
/*: node is Super */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Super';
}

function isSwitchCase(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is SwitchCase */
=======
/*: node is SwitchCase */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'SwitchCase';
}

function isSwitchStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is SwitchStatement */
=======
/*: node is SwitchStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'SwitchStatement';
}

function isSymbolTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is SymbolTypeAnnotation */
=======
/*: node is SymbolTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'SymbolTypeAnnotation';
}

function isTaggedTemplateExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TaggedTemplateExpression */
=======
/*: node is TaggedTemplateExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TaggedTemplateExpression';
}

function isTemplateElement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TemplateElement */
=======
/*: node is TemplateElement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TemplateElement';
}

function isTemplateLiteral(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TemplateLiteral */
=======
/*: node is TemplateLiteral */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TemplateLiteral';
}

function isThisExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ThisExpression */
=======
/*: node is ThisExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ThisExpression';
}

function isThisTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ThisTypeAnnotation */
=======
/*: node is ThisTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ThisTypeAnnotation';
}

function isThrowStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is ThrowStatement */
=======
/*: node is ThrowStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'ThrowStatement';
}

function isTryStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TryStatement */
=======
/*: node is TryStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TryStatement';
}

function isTupleTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TupleTypeAnnotation */
=======
/*: node is TupleTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TupleTypeAnnotation';
}

function isTupleTypeLabeledElement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TupleTypeLabeledElement */
=======
/*: node is TupleTypeLabeledElement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TupleTypeLabeledElement';
}

function isTupleTypeSpreadElement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TupleTypeSpreadElement */
=======
/*: node is TupleTypeSpreadElement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TupleTypeSpreadElement';
}

function isTypeAlias(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TypeAlias */
=======
/*: node is TypeAlias */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TypeAlias';
}

function isTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TypeAnnotation */
=======
/*: node is TypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TypeAnnotation';
}

function isTypeCastExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TypeCastExpression */
=======
/*: node is TypeCastExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TypeCastExpression';
}

function isTypeofTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TypeofTypeAnnotation */
=======
/*: node is TypeofTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TypeofTypeAnnotation';
}

function isTypeOperator(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TypeOperator */
=======
/*: node is TypeOperator */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TypeOperator';
}

function isTypeParameter(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TypeParameter */
=======
/*: node is TypeParameter */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TypeParameter';
}

function isTypeParameterDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TypeParameterDeclaration */
=======
/*: node is TypeParameterDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TypeParameterDeclaration';
}

function isTypeParameterInstantiation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TypeParameterInstantiation */
=======
/*: node is TypeParameterInstantiation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TypeParameterInstantiation';
}

function isTypePredicate(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is TypePredicate */
=======
/*: node is TypePredicate */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'TypePredicate';
}

function isUnaryExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is UnaryExpression */
=======
/*: node is UnaryExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'UnaryExpression';
}

function isUnionTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is UnionTypeAnnotation */
=======
/*: node is UnionTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'UnionTypeAnnotation';
}

function isUpdateExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is UpdateExpression */
=======
/*: node is UpdateExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'UpdateExpression';
}

function isVariableDeclaration(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is VariableDeclaration */
=======
/*: node is VariableDeclaration */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'VariableDeclaration';
}

function isVariableDeclarator(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is VariableDeclarator */
=======
/*: node is VariableDeclarator */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'VariableDeclarator';
}

function isVariance(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is Variance */
=======
/*: node is Variance */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Variance';
}

function isVoidTypeAnnotation(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is VoidTypeAnnotation */
=======
/*: node is VoidTypeAnnotation */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'VoidTypeAnnotation';
}

function isWhileStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is WhileStatement */
=======
/*: node is WhileStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'WhileStatement';
}

function isWithStatement(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is WithStatement */
=======
/*: node is WithStatement */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'WithStatement';
}

function isYieldExpression(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is YieldExpression */
=======
/*: node is YieldExpression */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'YieldExpression';
}

function isLiteral(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is Literal */
=======
/*: node is Literal */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Literal';
}

function isLineComment(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (MostTokens | LineComment) */
=======
/*: node is (MostTokens | LineComment) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Line';
}

function isBlockComment(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (MostTokens | BlockComment) */
=======
/*: node is (MostTokens | BlockComment) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Block';
}

function isMinusToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '-';
}

function isPlusToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '+';
}

function isLogicalNotToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '!';
}

function isUnaryNegationToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '~';
}

function isTypeOfToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'typeof';
}

function isVoidToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'void';
}

function isDeleteToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'delete';
}

function isLooseEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '==';
}

function isLooseNotEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '!=';
}

function isStrictEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '===';
}

function isStrictNotEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '!==';
}

function isLessThanToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '<';
}

function isLessThanOrEqualToToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '<=';
}

function isGreaterThanToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '>';
}

function isGreaterThanOrEqualToToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '>=';
}

function isBitwiseLeftShiftToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '<<';
}

function isBitwiseRightShiftToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '>>';
}

function isBitwiseUnsignedRightShiftToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '>>>';
}

function isAsterixToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '*';
}

function isForwardSlashToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '/';
}

function isPercentToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '%';
}

function isExponentiationToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '**';
}

function isBitwiseORToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '|';
}

function isBitwiseXORToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '^';
}

function isBitwiseANDToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '&';
}

function isInToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'in';
}

function isInstanceOfToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'instanceof';
}

function isLogicalORToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '||';
}

function isLogicalANDToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '&&';
}

function isNullishCoalesceToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '??';
}

function isEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '=';
}

function isPlusEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '+=';
}

function isMinusEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '-=';
}

function isMultiplyEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '*=';
}

function isDivideEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '/=';
}

function isRemainderEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '%=';
}

function isExponentateEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '**=';
}

function isBitwiseLeftShiftEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '<<=';
}

function isBitwiseRightShiftEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '>>=';
}

function isBitwiseUnsignedRightShiftEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '>>>=';
}

function isBitwiseOREqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '|=';
}

function isBitwiseXOREqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '^=';
}

function isBitwiseANDEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '&=';
}

function isLogicalOREqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '||=';
}

function isLogicalANDEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '&&=';
}

function isNullishCoalesceEqualToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '??=';
}

function isIncrementToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '++';
}

function isDecrementToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '--';
}

function isUnionTypeToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '|';
}

function isIntersectionTypeToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '&';
}

function isBreakToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'break';
}

function isCaseToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'case';
}

function isCatchToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'catch';
}

function isClassToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'class';
}

function isConstToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'const';
}

function isContinueToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'continue';
}

function isDebuggerToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'debugger';
}

function isDefaultToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'default';
}

function isDoToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'do';
}

function isElseToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'else';
}

function isEnumToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'enum';
}

function isExportToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'export';
}

function isExtendsToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'extends';
}

function isFinallyToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'finally';
}

function isForToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'for';
}

function isFunctionToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'function';
}

function isIfToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'if';
}

function isImplementsToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'implements';
}

function isImportToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'import';
}

function isInterfaceToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'interface';
}

function isNewToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'new';
}

function isReturnToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'return';
}

function isStaticToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'static';
}

function isSuperToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'super';
}

function isSwitchToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'switch';
}

function isThisToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'this';
}

function isThrowToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'throw';
}

function isTryToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'try';
}

function isVarToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'var';
}

function isWhileToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'while';
}

function isWithToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'with';
}

function isYieldToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Keyword' && node.value === 'yield';
}

function isAsKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'as' || node.type === 'Keyword' && node.value === 'as';
}

function isAsyncKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'async' || node.type === 'Keyword' && node.value === 'async';
}

function isAwaitKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'await' || node.type === 'Keyword' && node.value === 'await';
}

function isDeclareKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'declare' || node.type === 'Keyword' && node.value === 'declare';
}

function isFromKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'from' || node.type === 'Keyword' && node.value === 'from';
}

function isGetKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'get' || node.type === 'Keyword' && node.value === 'get';
}

function isLetKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'let' || node.type === 'Keyword' && node.value === 'let';
}

function isModuleKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'module' || node.type === 'Keyword' && node.value === 'module';
}

function isOfKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'of' || node.type === 'Keyword' && node.value === 'of';
}

function isSetKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'set' || node.type === 'Keyword' && node.value === 'set';
}

function isTypeKeyword(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is (Identifier | MostTokens) */
=======
/*: node is (Identifier | MostTokens) */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Identifier' && node.name === 'type' || node.type === 'Keyword' && node.value === 'type';
}

function isCommaToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === ',';
}

function isColonToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === ':';
}

function isSemicolonToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === ';';
}

function isDotToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '.';
}

function isDotDotDotToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '...';
}

function isOptionalChainToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '?.';
}

function isQuestionMarkToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '?';
}

function isOpeningParenthesisToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '(';
}

function isClosingParenthesisToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === ')';
}

function isOpeningCurlyBracketToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '{';
}

function isClosingCurlyBracketToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '}';
}

function isOpeningAngleBracketToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '<';
}

function isClosingAngleBracketToken(node
/*: ESNode | Token */
)
<<<<<<< HEAD
/*: implies node is MostTokens */
=======
/*: node is MostTokens */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
{
  return node.type === 'Punctuator' && node.value === '>';
}