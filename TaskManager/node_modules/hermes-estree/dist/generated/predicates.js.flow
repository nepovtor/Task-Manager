/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict-local
 * @generated
 */

/*
 * !!! GENERATED FILE !!!
 *
 * Any manual changes to this file will be overwritten. To regenerate run `yarn build`.
 */

// lint directives to let us do some basic validation of generated files
/* eslint no-undef: 'error', no-unused-vars: ['error', {vars: "local"}], no-redeclare: 'error' */
<<<<<<< HEAD
/* global $NonMaybeType, Partial, $ReadOnly, $ReadOnlyArray, $FlowFixMe */
=======
/* global $NonMaybeType, Partial, $ReadOnly, $ReadOnlyArray */
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251

'use strict';

/*::
import type {
  ESNode,
  Token,
<<<<<<< HEAD
  AFunction,
  ClassMember,
  BigIntLiteral,
  BooleanLiteral,
  NullLiteral,
  NumericLiteral,
  RegExpLiteral,
  StringLiteral,
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  Identifier,
  JSXIdentifier,
  JSXText,
  AnyTypeAnnotation,
  ArrayExpression,
  ArrayPattern,
  ArrayTypeAnnotation,
  ArrowFunctionExpression,
<<<<<<< HEAD
  AsConstExpression,
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  AsExpression,
  AssignmentExpression,
  AssignmentPattern,
  AwaitExpression,
  BigIntLiteralTypeAnnotation,
  BigIntTypeAnnotation,
  BinaryExpression,
  BlockStatement,
  BooleanLiteralTypeAnnotation,
  BooleanTypeAnnotation,
  BreakStatement,
  CallExpression,
  CatchClause,
  ChainExpression,
  ClassBody,
  ClassDeclaration,
  ClassExpression,
  ClassImplements,
  ComponentDeclaration,
  ComponentParameter,
  ComponentTypeAnnotation,
  ComponentTypeParameter,
  ConditionalExpression,
  ConditionalTypeAnnotation,
  ContinueStatement,
  DebuggerStatement,
  DeclareClass,
  DeclareComponent,
  DeclaredPredicate,
  DeclareEnum,
  DeclareExportAllDeclaration,
  DeclareExportDeclaration,
  DeclareFunction,
  DeclareHook,
  DeclareInterface,
  DeclareModule,
  DeclareModuleExports,
  DeclareNamespace,
  DeclareOpaqueType,
  DeclareTypeAlias,
  DeclareVariable,
  DoWhileStatement,
  EmptyStatement,
  EmptyTypeAnnotation,
<<<<<<< HEAD
  EnumBigIntBody,
  EnumBigIntMember,
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  EnumBooleanBody,
  EnumBooleanMember,
  EnumDeclaration,
  EnumDefaultedMember,
  EnumNumberBody,
  EnumNumberMember,
  EnumStringBody,
  EnumStringMember,
  EnumSymbolBody,
  ExistsTypeAnnotation,
  ExportAllDeclaration,
  ExportDefaultDeclaration,
  ExportNamedDeclaration,
  ExportSpecifier,
  ExpressionStatement,
  ForInStatement,
  ForOfStatement,
  ForStatement,
  FunctionDeclaration,
  FunctionExpression,
  FunctionTypeAnnotation,
  FunctionTypeParam,
  GenericTypeAnnotation,
  HookDeclaration,
  HookTypeAnnotation,
  IfStatement,
  ImportAttribute,
  ImportDeclaration,
  ImportDefaultSpecifier,
  ImportExpression,
  ImportNamespaceSpecifier,
  ImportSpecifier,
  IndexedAccessType,
  InferredPredicate,
  InferTypeAnnotation,
  InterfaceDeclaration,
  InterfaceExtends,
  InterfaceTypeAnnotation,
  IntersectionTypeAnnotation,
  JSXAttribute,
  JSXClosingElement,
  JSXClosingFragment,
  JSXElement,
  JSXEmptyExpression,
  JSXExpressionContainer,
  JSXFragment,
  JSXMemberExpression,
  JSXNamespacedName,
  JSXOpeningElement,
  JSXOpeningFragment,
  JSXSpreadAttribute,
  JSXSpreadChild,
  KeyofTypeAnnotation,
  LabeledStatement,
  LogicalExpression,
  MemberExpression,
  MetaProperty,
  MethodDefinition,
  MixedTypeAnnotation,
  NewExpression,
  NullableTypeAnnotation,
  NullLiteralTypeAnnotation,
  NumberLiteralTypeAnnotation,
  NumberTypeAnnotation,
  ObjectExpression,
  ObjectPattern,
  ObjectTypeAnnotation,
  ObjectTypeCallProperty,
  ObjectTypeIndexer,
  ObjectTypeInternalSlot,
  ObjectTypeMappedTypeProperty,
  ObjectTypeProperty,
  ObjectTypeSpreadProperty,
  OpaqueType,
  OptionalIndexedAccessType,
  PrivateIdentifier,
<<<<<<< HEAD
  Program,
=======
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  Property,
  PropertyDefinition,
  QualifiedTypeIdentifier,
  QualifiedTypeofIdentifier,
  RestElement,
  ReturnStatement,
  SequenceExpression,
  SpreadElement,
  StringLiteralTypeAnnotation,
  StringTypeAnnotation,
  Super,
  SwitchCase,
  SwitchStatement,
  SymbolTypeAnnotation,
  TaggedTemplateExpression,
  TemplateElement,
  TemplateLiteral,
  ThisExpression,
  ThisTypeAnnotation,
  ThrowStatement,
  TryStatement,
  TupleTypeAnnotation,
  TupleTypeLabeledElement,
  TupleTypeSpreadElement,
  TypeAlias,
  TypeAnnotation,
  TypeCastExpression,
  TypeofTypeAnnotation,
  TypeOperator,
  TypeParameter,
  TypeParameterDeclaration,
  TypeParameterInstantiation,
  TypePredicate,
  UnaryExpression,
  UnionTypeAnnotation,
  UpdateExpression,
  VariableDeclaration,
  VariableDeclarator,
  Variance,
  VoidTypeAnnotation,
  WhileStatement,
  WithStatement,
  YieldExpression,
  Literal,
  LineComment,
  BlockComment,
  MostTokens,
<<<<<<< HEAD
} from '../types';
*/


export function isIdentifier(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
} from 'hermes-estree';
*/


export function isIdentifier(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Identifier';
}
  

<<<<<<< HEAD
export function isJSXIdentifier(node /*: ESNode | Token */) /*: implies node is (JSXIdentifier | MostTokens) */ {
=======
export function isJSXIdentifier(node /*: ESNode | Token */) /*: node is (JSXIdentifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXIdentifier';
}
  

<<<<<<< HEAD
export function isJSXText(node /*: ESNode | Token */) /*: implies node is (JSXText | MostTokens) */ {
=======
export function isJSXText(node /*: ESNode | Token */) /*: node is (JSXText | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXText';
}
  

<<<<<<< HEAD
export function isAnyTypeAnnotation(node /*: ESNode | Token */) /*: implies node is AnyTypeAnnotation */ {
=======
export function isAnyTypeAnnotation(node /*: ESNode | Token */) /*: node is AnyTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'AnyTypeAnnotation';
}
    

<<<<<<< HEAD
export function isArrayExpression(node /*: ESNode | Token */) /*: implies node is ArrayExpression */ {
=======
export function isArrayExpression(node /*: ESNode | Token */) /*: node is ArrayExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ArrayExpression';
}
    

<<<<<<< HEAD
export function isArrayPattern(node /*: ESNode | Token */) /*: implies node is ArrayPattern */ {
=======
export function isArrayPattern(node /*: ESNode | Token */) /*: node is ArrayPattern */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ArrayPattern';
}
    

<<<<<<< HEAD
export function isArrayTypeAnnotation(node /*: ESNode | Token */) /*: implies node is ArrayTypeAnnotation */ {
=======
export function isArrayTypeAnnotation(node /*: ESNode | Token */) /*: node is ArrayTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ArrayTypeAnnotation';
}
    

<<<<<<< HEAD
export function isArrowFunctionExpression(node /*: ESNode | Token */) /*: implies node is ArrowFunctionExpression */ {
=======
export function isArrowFunctionExpression(node /*: ESNode | Token */) /*: node is ArrowFunctionExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ArrowFunctionExpression';
}
    

<<<<<<< HEAD
export function isAsConstExpression(node /*: ESNode | Token */) /*: implies node is AsConstExpression */ {
  return node.type === 'AsConstExpression';
}
    

export function isAsExpression(node /*: ESNode | Token */) /*: implies node is AsExpression */ {
=======
export function isAsExpression(node /*: ESNode | Token */) /*: node is AsExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'AsExpression';
}
    

<<<<<<< HEAD
export function isAssignmentExpression(node /*: ESNode | Token */) /*: implies node is AssignmentExpression */ {
=======
export function isAssignmentExpression(node /*: ESNode | Token */) /*: node is AssignmentExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'AssignmentExpression';
}
    

<<<<<<< HEAD
export function isAssignmentPattern(node /*: ESNode | Token */) /*: implies node is AssignmentPattern */ {
=======
export function isAssignmentPattern(node /*: ESNode | Token */) /*: node is AssignmentPattern */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'AssignmentPattern';
}
    

<<<<<<< HEAD
export function isAwaitExpression(node /*: ESNode | Token */) /*: implies node is AwaitExpression */ {
=======
export function isAwaitExpression(node /*: ESNode | Token */) /*: node is AwaitExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'AwaitExpression';
}
    

<<<<<<< HEAD
export function isBigIntLiteralTypeAnnotation(node /*: ESNode | Token */) /*: implies node is BigIntLiteralTypeAnnotation */ {
=======
export function isBigIntLiteralTypeAnnotation(node /*: ESNode | Token */) /*: node is BigIntLiteralTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'BigIntLiteralTypeAnnotation';
}
    

<<<<<<< HEAD
export function isBigIntTypeAnnotation(node /*: ESNode | Token */) /*: implies node is BigIntTypeAnnotation */ {
=======
export function isBigIntTypeAnnotation(node /*: ESNode | Token */) /*: node is BigIntTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'BigIntTypeAnnotation';
}
    

<<<<<<< HEAD
export function isBinaryExpression(node /*: ESNode | Token */) /*: implies node is BinaryExpression */ {
=======
export function isBinaryExpression(node /*: ESNode | Token */) /*: node is BinaryExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'BinaryExpression';
}
    

<<<<<<< HEAD
export function isBlockStatement(node /*: ESNode | Token */) /*: implies node is BlockStatement */ {
=======
export function isBlockStatement(node /*: ESNode | Token */) /*: node is BlockStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'BlockStatement';
}
    

<<<<<<< HEAD
export function isBooleanLiteralTypeAnnotation(node /*: ESNode | Token */) /*: implies node is BooleanLiteralTypeAnnotation */ {
=======
export function isBooleanLiteralTypeAnnotation(node /*: ESNode | Token */) /*: node is BooleanLiteralTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'BooleanLiteralTypeAnnotation';
}
    

<<<<<<< HEAD
export function isBooleanTypeAnnotation(node /*: ESNode | Token */) /*: implies node is BooleanTypeAnnotation */ {
=======
export function isBooleanTypeAnnotation(node /*: ESNode | Token */) /*: node is BooleanTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'BooleanTypeAnnotation';
}
    

<<<<<<< HEAD
export function isBreakStatement(node /*: ESNode | Token */) /*: implies node is BreakStatement */ {
=======
export function isBreakStatement(node /*: ESNode | Token */) /*: node is BreakStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'BreakStatement';
}
    

<<<<<<< HEAD
export function isCallExpression(node /*: ESNode | Token */) /*: implies node is CallExpression */ {
=======
export function isCallExpression(node /*: ESNode | Token */) /*: node is CallExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'CallExpression';
}
    

<<<<<<< HEAD
export function isCatchClause(node /*: ESNode | Token */) /*: implies node is CatchClause */ {
=======
export function isCatchClause(node /*: ESNode | Token */) /*: node is CatchClause */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'CatchClause';
}
    

<<<<<<< HEAD
export function isChainExpression(node /*: ESNode | Token */) /*: implies node is ChainExpression */ {
=======
export function isChainExpression(node /*: ESNode | Token */) /*: node is ChainExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ChainExpression';
}
    

<<<<<<< HEAD
export function isClassBody(node /*: ESNode | Token */) /*: implies node is ClassBody */ {
=======
export function isClassBody(node /*: ESNode | Token */) /*: node is ClassBody */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ClassBody';
}
    

<<<<<<< HEAD
export function isClassDeclaration(node /*: ESNode | Token */) /*: implies node is ClassDeclaration */ {
=======
export function isClassDeclaration(node /*: ESNode | Token */) /*: node is ClassDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ClassDeclaration';
}
    

<<<<<<< HEAD
export function isClassExpression(node /*: ESNode | Token */) /*: implies node is ClassExpression */ {
=======
export function isClassExpression(node /*: ESNode | Token */) /*: node is ClassExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ClassExpression';
}
    

<<<<<<< HEAD
export function isClassImplements(node /*: ESNode | Token */) /*: implies node is ClassImplements */ {
=======
export function isClassImplements(node /*: ESNode | Token */) /*: node is ClassImplements */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ClassImplements';
}
    

<<<<<<< HEAD
export function isComponentDeclaration(node /*: ESNode | Token */) /*: implies node is ComponentDeclaration */ {
=======
export function isComponentDeclaration(node /*: ESNode | Token */) /*: node is ComponentDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ComponentDeclaration';
}
    

<<<<<<< HEAD
export function isComponentParameter(node /*: ESNode | Token */) /*: implies node is ComponentParameter */ {
=======
export function isComponentParameter(node /*: ESNode | Token */) /*: node is ComponentParameter */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ComponentParameter';
}
    

<<<<<<< HEAD
export function isComponentTypeAnnotation(node /*: ESNode | Token */) /*: implies node is ComponentTypeAnnotation */ {
=======
export function isComponentTypeAnnotation(node /*: ESNode | Token */) /*: node is ComponentTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ComponentTypeAnnotation';
}
    

<<<<<<< HEAD
export function isComponentTypeParameter(node /*: ESNode | Token */) /*: implies node is ComponentTypeParameter */ {
=======
export function isComponentTypeParameter(node /*: ESNode | Token */) /*: node is ComponentTypeParameter */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ComponentTypeParameter';
}
    

<<<<<<< HEAD
export function isConditionalExpression(node /*: ESNode | Token */) /*: implies node is ConditionalExpression */ {
=======
export function isConditionalExpression(node /*: ESNode | Token */) /*: node is ConditionalExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ConditionalExpression';
}
    

<<<<<<< HEAD
export function isConditionalTypeAnnotation(node /*: ESNode | Token */) /*: implies node is ConditionalTypeAnnotation */ {
=======
export function isConditionalTypeAnnotation(node /*: ESNode | Token */) /*: node is ConditionalTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ConditionalTypeAnnotation';
}
    

<<<<<<< HEAD
export function isContinueStatement(node /*: ESNode | Token */) /*: implies node is ContinueStatement */ {
=======
export function isContinueStatement(node /*: ESNode | Token */) /*: node is ContinueStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ContinueStatement';
}
    

<<<<<<< HEAD
export function isDebuggerStatement(node /*: ESNode | Token */) /*: implies node is DebuggerStatement */ {
=======
export function isDebuggerStatement(node /*: ESNode | Token */) /*: node is DebuggerStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DebuggerStatement';
}
    

<<<<<<< HEAD
export function isDeclareClass(node /*: ESNode | Token */) /*: implies node is DeclareClass */ {
=======
export function isDeclareClass(node /*: ESNode | Token */) /*: node is DeclareClass */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareClass';
}
    

<<<<<<< HEAD
export function isDeclareComponent(node /*: ESNode | Token */) /*: implies node is DeclareComponent */ {
=======
export function isDeclareComponent(node /*: ESNode | Token */) /*: node is DeclareComponent */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareComponent';
}
    

<<<<<<< HEAD
export function isDeclaredPredicate(node /*: ESNode | Token */) /*: implies node is DeclaredPredicate */ {
=======
export function isDeclaredPredicate(node /*: ESNode | Token */) /*: node is DeclaredPredicate */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclaredPredicate';
}
    

<<<<<<< HEAD
export function isDeclareEnum(node /*: ESNode | Token */) /*: implies node is DeclareEnum */ {
=======
export function isDeclareEnum(node /*: ESNode | Token */) /*: node is DeclareEnum */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareEnum';
}
    

<<<<<<< HEAD
export function isDeclareExportAllDeclaration(node /*: ESNode | Token */) /*: implies node is DeclareExportAllDeclaration */ {
=======
export function isDeclareExportAllDeclaration(node /*: ESNode | Token */) /*: node is DeclareExportAllDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareExportAllDeclaration';
}
    

<<<<<<< HEAD
export function isDeclareExportDeclaration(node /*: ESNode | Token */) /*: implies node is DeclareExportDeclaration */ {
=======
export function isDeclareExportDeclaration(node /*: ESNode | Token */) /*: node is DeclareExportDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareExportDeclaration';
}
    

<<<<<<< HEAD
export function isDeclareFunction(node /*: ESNode | Token */) /*: implies node is DeclareFunction */ {
=======
export function isDeclareFunction(node /*: ESNode | Token */) /*: node is DeclareFunction */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareFunction';
}
    

<<<<<<< HEAD
export function isDeclareHook(node /*: ESNode | Token */) /*: implies node is DeclareHook */ {
=======
export function isDeclareHook(node /*: ESNode | Token */) /*: node is DeclareHook */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareHook';
}
    

<<<<<<< HEAD
export function isDeclareInterface(node /*: ESNode | Token */) /*: implies node is DeclareInterface */ {
=======
export function isDeclareInterface(node /*: ESNode | Token */) /*: node is DeclareInterface */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareInterface';
}
    

<<<<<<< HEAD
export function isDeclareModule(node /*: ESNode | Token */) /*: implies node is DeclareModule */ {
=======
export function isDeclareModule(node /*: ESNode | Token */) /*: node is DeclareModule */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareModule';
}
    

<<<<<<< HEAD
export function isDeclareModuleExports(node /*: ESNode | Token */) /*: implies node is DeclareModuleExports */ {
=======
export function isDeclareModuleExports(node /*: ESNode | Token */) /*: node is DeclareModuleExports */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareModuleExports';
}
    

<<<<<<< HEAD
export function isDeclareNamespace(node /*: ESNode | Token */) /*: implies node is DeclareNamespace */ {
=======
export function isDeclareNamespace(node /*: ESNode | Token */) /*: node is DeclareNamespace */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareNamespace';
}
    

<<<<<<< HEAD
export function isDeclareOpaqueType(node /*: ESNode | Token */) /*: implies node is DeclareOpaqueType */ {
=======
export function isDeclareOpaqueType(node /*: ESNode | Token */) /*: node is DeclareOpaqueType */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareOpaqueType';
}
    

<<<<<<< HEAD
export function isDeclareTypeAlias(node /*: ESNode | Token */) /*: implies node is DeclareTypeAlias */ {
=======
export function isDeclareTypeAlias(node /*: ESNode | Token */) /*: node is DeclareTypeAlias */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareTypeAlias';
}
    

<<<<<<< HEAD
export function isDeclareVariable(node /*: ESNode | Token */) /*: implies node is DeclareVariable */ {
=======
export function isDeclareVariable(node /*: ESNode | Token */) /*: node is DeclareVariable */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DeclareVariable';
}
    

<<<<<<< HEAD
export function isDoWhileStatement(node /*: ESNode | Token */) /*: implies node is DoWhileStatement */ {
=======
export function isDoWhileStatement(node /*: ESNode | Token */) /*: node is DoWhileStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'DoWhileStatement';
}
    

<<<<<<< HEAD
export function isEmptyStatement(node /*: ESNode | Token */) /*: implies node is EmptyStatement */ {
=======
export function isEmptyStatement(node /*: ESNode | Token */) /*: node is EmptyStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EmptyStatement';
}
    

<<<<<<< HEAD
export function isEmptyTypeAnnotation(node /*: ESNode | Token */) /*: implies node is EmptyTypeAnnotation */ {
=======
export function isEmptyTypeAnnotation(node /*: ESNode | Token */) /*: node is EmptyTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EmptyTypeAnnotation';
}
    

<<<<<<< HEAD
export function isEnumBigIntBody(node /*: ESNode | Token */) /*: implies node is EnumBigIntBody */ {
  return node.type === 'EnumBigIntBody';
}
    

export function isEnumBigIntMember(node /*: ESNode | Token */) /*: implies node is EnumBigIntMember */ {
  return node.type === 'EnumBigIntMember';
}
    

export function isEnumBooleanBody(node /*: ESNode | Token */) /*: implies node is EnumBooleanBody */ {
=======
export function isEnumBooleanBody(node /*: ESNode | Token */) /*: node is EnumBooleanBody */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EnumBooleanBody';
}
    

<<<<<<< HEAD
export function isEnumBooleanMember(node /*: ESNode | Token */) /*: implies node is EnumBooleanMember */ {
=======
export function isEnumBooleanMember(node /*: ESNode | Token */) /*: node is EnumBooleanMember */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EnumBooleanMember';
}
    

<<<<<<< HEAD
export function isEnumDeclaration(node /*: ESNode | Token */) /*: implies node is EnumDeclaration */ {
=======
export function isEnumDeclaration(node /*: ESNode | Token */) /*: node is EnumDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EnumDeclaration';
}
    

<<<<<<< HEAD
export function isEnumDefaultedMember(node /*: ESNode | Token */) /*: implies node is EnumDefaultedMember */ {
=======
export function isEnumDefaultedMember(node /*: ESNode | Token */) /*: node is EnumDefaultedMember */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EnumDefaultedMember';
}
    

<<<<<<< HEAD
export function isEnumNumberBody(node /*: ESNode | Token */) /*: implies node is EnumNumberBody */ {
=======
export function isEnumNumberBody(node /*: ESNode | Token */) /*: node is EnumNumberBody */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EnumNumberBody';
}
    

<<<<<<< HEAD
export function isEnumNumberMember(node /*: ESNode | Token */) /*: implies node is EnumNumberMember */ {
=======
export function isEnumNumberMember(node /*: ESNode | Token */) /*: node is EnumNumberMember */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EnumNumberMember';
}
    

<<<<<<< HEAD
export function isEnumStringBody(node /*: ESNode | Token */) /*: implies node is EnumStringBody */ {
=======
export function isEnumStringBody(node /*: ESNode | Token */) /*: node is EnumStringBody */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EnumStringBody';
}
    

<<<<<<< HEAD
export function isEnumStringMember(node /*: ESNode | Token */) /*: implies node is EnumStringMember */ {
=======
export function isEnumStringMember(node /*: ESNode | Token */) /*: node is EnumStringMember */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EnumStringMember';
}
    

<<<<<<< HEAD
export function isEnumSymbolBody(node /*: ESNode | Token */) /*: implies node is EnumSymbolBody */ {
=======
export function isEnumSymbolBody(node /*: ESNode | Token */) /*: node is EnumSymbolBody */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'EnumSymbolBody';
}
    

<<<<<<< HEAD
export function isExistsTypeAnnotation(node /*: ESNode | Token */) /*: implies node is ExistsTypeAnnotation */ {
=======
export function isExistsTypeAnnotation(node /*: ESNode | Token */) /*: node is ExistsTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ExistsTypeAnnotation';
}
    

<<<<<<< HEAD
export function isExportAllDeclaration(node /*: ESNode | Token */) /*: implies node is ExportAllDeclaration */ {
=======
export function isExportAllDeclaration(node /*: ESNode | Token */) /*: node is ExportAllDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ExportAllDeclaration';
}
    

<<<<<<< HEAD
export function isExportDefaultDeclaration(node /*: ESNode | Token */) /*: implies node is ExportDefaultDeclaration */ {
=======
export function isExportDefaultDeclaration(node /*: ESNode | Token */) /*: node is ExportDefaultDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ExportDefaultDeclaration';
}
    

<<<<<<< HEAD
export function isExportNamedDeclaration(node /*: ESNode | Token */) /*: implies node is ExportNamedDeclaration */ {
=======
export function isExportNamedDeclaration(node /*: ESNode | Token */) /*: node is ExportNamedDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ExportNamedDeclaration';
}
    

<<<<<<< HEAD
export function isExportSpecifier(node /*: ESNode | Token */) /*: implies node is ExportSpecifier */ {
=======
export function isExportSpecifier(node /*: ESNode | Token */) /*: node is ExportSpecifier */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ExportSpecifier';
}
    

<<<<<<< HEAD
export function isExpressionStatement(node /*: ESNode | Token */) /*: implies node is ExpressionStatement */ {
=======
export function isExpressionStatement(node /*: ESNode | Token */) /*: node is ExpressionStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ExpressionStatement';
}
    

<<<<<<< HEAD
export function isForInStatement(node /*: ESNode | Token */) /*: implies node is ForInStatement */ {
=======
export function isForInStatement(node /*: ESNode | Token */) /*: node is ForInStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ForInStatement';
}
    

<<<<<<< HEAD
export function isForOfStatement(node /*: ESNode | Token */) /*: implies node is ForOfStatement */ {
=======
export function isForOfStatement(node /*: ESNode | Token */) /*: node is ForOfStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ForOfStatement';
}
    

<<<<<<< HEAD
export function isForStatement(node /*: ESNode | Token */) /*: implies node is ForStatement */ {
=======
export function isForStatement(node /*: ESNode | Token */) /*: node is ForStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ForStatement';
}
    

<<<<<<< HEAD
export function isFunctionDeclaration(node /*: ESNode | Token */) /*: implies node is FunctionDeclaration */ {
=======
export function isFunctionDeclaration(node /*: ESNode | Token */) /*: node is FunctionDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'FunctionDeclaration';
}
    

<<<<<<< HEAD
export function isFunctionExpression(node /*: ESNode | Token */) /*: implies node is FunctionExpression */ {
=======
export function isFunctionExpression(node /*: ESNode | Token */) /*: node is FunctionExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'FunctionExpression';
}
    

<<<<<<< HEAD
export function isFunctionTypeAnnotation(node /*: ESNode | Token */) /*: implies node is FunctionTypeAnnotation */ {
=======
export function isFunctionTypeAnnotation(node /*: ESNode | Token */) /*: node is FunctionTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'FunctionTypeAnnotation';
}
    

<<<<<<< HEAD
export function isFunctionTypeParam(node /*: ESNode | Token */) /*: implies node is FunctionTypeParam */ {
=======
export function isFunctionTypeParam(node /*: ESNode | Token */) /*: node is FunctionTypeParam */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'FunctionTypeParam';
}
    

<<<<<<< HEAD
export function isGenericTypeAnnotation(node /*: ESNode | Token */) /*: implies node is GenericTypeAnnotation */ {
=======
export function isGenericTypeAnnotation(node /*: ESNode | Token */) /*: node is GenericTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'GenericTypeAnnotation';
}
    

<<<<<<< HEAD
export function isHookDeclaration(node /*: ESNode | Token */) /*: implies node is HookDeclaration */ {
=======
export function isHookDeclaration(node /*: ESNode | Token */) /*: node is HookDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'HookDeclaration';
}
    

<<<<<<< HEAD
export function isHookTypeAnnotation(node /*: ESNode | Token */) /*: implies node is HookTypeAnnotation */ {
=======
export function isHookTypeAnnotation(node /*: ESNode | Token */) /*: node is HookTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'HookTypeAnnotation';
}
    

<<<<<<< HEAD
export function isIfStatement(node /*: ESNode | Token */) /*: implies node is IfStatement */ {
=======
export function isIfStatement(node /*: ESNode | Token */) /*: node is IfStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'IfStatement';
}
    

<<<<<<< HEAD
export function isImportAttribute(node /*: ESNode | Token */) /*: implies node is ImportAttribute */ {
=======
export function isImportAttribute(node /*: ESNode | Token */) /*: node is ImportAttribute */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ImportAttribute';
}
    

<<<<<<< HEAD
export function isImportDeclaration(node /*: ESNode | Token */) /*: implies node is ImportDeclaration */ {
=======
export function isImportDeclaration(node /*: ESNode | Token */) /*: node is ImportDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ImportDeclaration';
}
    

<<<<<<< HEAD
export function isImportDefaultSpecifier(node /*: ESNode | Token */) /*: implies node is ImportDefaultSpecifier */ {
=======
export function isImportDefaultSpecifier(node /*: ESNode | Token */) /*: node is ImportDefaultSpecifier */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ImportDefaultSpecifier';
}
    

<<<<<<< HEAD
export function isImportExpression(node /*: ESNode | Token */) /*: implies node is ImportExpression */ {
=======
export function isImportExpression(node /*: ESNode | Token */) /*: node is ImportExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ImportExpression';
}
    

<<<<<<< HEAD
export function isImportNamespaceSpecifier(node /*: ESNode | Token */) /*: implies node is ImportNamespaceSpecifier */ {
=======
export function isImportNamespaceSpecifier(node /*: ESNode | Token */) /*: node is ImportNamespaceSpecifier */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ImportNamespaceSpecifier';
}
    

<<<<<<< HEAD
export function isImportSpecifier(node /*: ESNode | Token */) /*: implies node is ImportSpecifier */ {
=======
export function isImportSpecifier(node /*: ESNode | Token */) /*: node is ImportSpecifier */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ImportSpecifier';
}
    

<<<<<<< HEAD
export function isIndexedAccessType(node /*: ESNode | Token */) /*: implies node is IndexedAccessType */ {
=======
export function isIndexedAccessType(node /*: ESNode | Token */) /*: node is IndexedAccessType */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'IndexedAccessType';
}
    

<<<<<<< HEAD
export function isInferredPredicate(node /*: ESNode | Token */) /*: implies node is InferredPredicate */ {
=======
export function isInferredPredicate(node /*: ESNode | Token */) /*: node is InferredPredicate */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'InferredPredicate';
}
    

<<<<<<< HEAD
export function isInferTypeAnnotation(node /*: ESNode | Token */) /*: implies node is InferTypeAnnotation */ {
=======
export function isInferTypeAnnotation(node /*: ESNode | Token */) /*: node is InferTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'InferTypeAnnotation';
}
    

<<<<<<< HEAD
export function isInterfaceDeclaration(node /*: ESNode | Token */) /*: implies node is InterfaceDeclaration */ {
=======
export function isInterfaceDeclaration(node /*: ESNode | Token */) /*: node is InterfaceDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'InterfaceDeclaration';
}
    

<<<<<<< HEAD
export function isInterfaceExtends(node /*: ESNode | Token */) /*: implies node is InterfaceExtends */ {
=======
export function isInterfaceExtends(node /*: ESNode | Token */) /*: node is InterfaceExtends */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'InterfaceExtends';
}
    

<<<<<<< HEAD
export function isInterfaceTypeAnnotation(node /*: ESNode | Token */) /*: implies node is InterfaceTypeAnnotation */ {
=======
export function isInterfaceTypeAnnotation(node /*: ESNode | Token */) /*: node is InterfaceTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'InterfaceTypeAnnotation';
}
    

<<<<<<< HEAD
export function isIntersectionTypeAnnotation(node /*: ESNode | Token */) /*: implies node is IntersectionTypeAnnotation */ {
=======
export function isIntersectionTypeAnnotation(node /*: ESNode | Token */) /*: node is IntersectionTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'IntersectionTypeAnnotation';
}
    

<<<<<<< HEAD
export function isJSXAttribute(node /*: ESNode | Token */) /*: implies node is JSXAttribute */ {
=======
export function isJSXAttribute(node /*: ESNode | Token */) /*: node is JSXAttribute */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXAttribute';
}
    

<<<<<<< HEAD
export function isJSXClosingElement(node /*: ESNode | Token */) /*: implies node is JSXClosingElement */ {
=======
export function isJSXClosingElement(node /*: ESNode | Token */) /*: node is JSXClosingElement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXClosingElement';
}
    

<<<<<<< HEAD
export function isJSXClosingFragment(node /*: ESNode | Token */) /*: implies node is JSXClosingFragment */ {
=======
export function isJSXClosingFragment(node /*: ESNode | Token */) /*: node is JSXClosingFragment */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXClosingFragment';
}
    

<<<<<<< HEAD
export function isJSXElement(node /*: ESNode | Token */) /*: implies node is JSXElement */ {
=======
export function isJSXElement(node /*: ESNode | Token */) /*: node is JSXElement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXElement';
}
    

<<<<<<< HEAD
export function isJSXEmptyExpression(node /*: ESNode | Token */) /*: implies node is JSXEmptyExpression */ {
=======
export function isJSXEmptyExpression(node /*: ESNode | Token */) /*: node is JSXEmptyExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXEmptyExpression';
}
    

<<<<<<< HEAD
export function isJSXExpressionContainer(node /*: ESNode | Token */) /*: implies node is JSXExpressionContainer */ {
=======
export function isJSXExpressionContainer(node /*: ESNode | Token */) /*: node is JSXExpressionContainer */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXExpressionContainer';
}
    

<<<<<<< HEAD
export function isJSXFragment(node /*: ESNode | Token */) /*: implies node is JSXFragment */ {
=======
export function isJSXFragment(node /*: ESNode | Token */) /*: node is JSXFragment */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXFragment';
}
    

<<<<<<< HEAD
export function isJSXMemberExpression(node /*: ESNode | Token */) /*: implies node is JSXMemberExpression */ {
=======
export function isJSXMemberExpression(node /*: ESNode | Token */) /*: node is JSXMemberExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXMemberExpression';
}
    

<<<<<<< HEAD
export function isJSXNamespacedName(node /*: ESNode | Token */) /*: implies node is JSXNamespacedName */ {
=======
export function isJSXNamespacedName(node /*: ESNode | Token */) /*: node is JSXNamespacedName */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXNamespacedName';
}
    

<<<<<<< HEAD
export function isJSXOpeningElement(node /*: ESNode | Token */) /*: implies node is JSXOpeningElement */ {
=======
export function isJSXOpeningElement(node /*: ESNode | Token */) /*: node is JSXOpeningElement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXOpeningElement';
}
    

<<<<<<< HEAD
export function isJSXOpeningFragment(node /*: ESNode | Token */) /*: implies node is JSXOpeningFragment */ {
=======
export function isJSXOpeningFragment(node /*: ESNode | Token */) /*: node is JSXOpeningFragment */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXOpeningFragment';
}
    

<<<<<<< HEAD
export function isJSXSpreadAttribute(node /*: ESNode | Token */) /*: implies node is JSXSpreadAttribute */ {
=======
export function isJSXSpreadAttribute(node /*: ESNode | Token */) /*: node is JSXSpreadAttribute */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXSpreadAttribute';
}
    

<<<<<<< HEAD
export function isJSXSpreadChild(node /*: ESNode | Token */) /*: implies node is JSXSpreadChild */ {
=======
export function isJSXSpreadChild(node /*: ESNode | Token */) /*: node is JSXSpreadChild */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'JSXSpreadChild';
}
    

<<<<<<< HEAD
export function isKeyofTypeAnnotation(node /*: ESNode | Token */) /*: implies node is KeyofTypeAnnotation */ {
=======
export function isKeyofTypeAnnotation(node /*: ESNode | Token */) /*: node is KeyofTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'KeyofTypeAnnotation';
}
    

<<<<<<< HEAD
export function isLabeledStatement(node /*: ESNode | Token */) /*: implies node is LabeledStatement */ {
=======
export function isLabeledStatement(node /*: ESNode | Token */) /*: node is LabeledStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'LabeledStatement';
}
    

<<<<<<< HEAD
export function isLogicalExpression(node /*: ESNode | Token */) /*: implies node is LogicalExpression */ {
=======
export function isLogicalExpression(node /*: ESNode | Token */) /*: node is LogicalExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'LogicalExpression';
}
    

<<<<<<< HEAD
export function isMemberExpression(node /*: ESNode | Token */) /*: implies node is MemberExpression */ {
=======
export function isMemberExpression(node /*: ESNode | Token */) /*: node is MemberExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'MemberExpression';
}
    

<<<<<<< HEAD
export function isMetaProperty(node /*: ESNode | Token */) /*: implies node is MetaProperty */ {
=======
export function isMetaProperty(node /*: ESNode | Token */) /*: node is MetaProperty */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'MetaProperty';
}
    

<<<<<<< HEAD
export function isMethodDefinition(node /*: ESNode | Token */) /*: implies node is MethodDefinition */ {
=======
export function isMethodDefinition(node /*: ESNode | Token */) /*: node is MethodDefinition */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'MethodDefinition';
}
    

<<<<<<< HEAD
export function isMixedTypeAnnotation(node /*: ESNode | Token */) /*: implies node is MixedTypeAnnotation */ {
=======
export function isMixedTypeAnnotation(node /*: ESNode | Token */) /*: node is MixedTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'MixedTypeAnnotation';
}
    

<<<<<<< HEAD
export function isNewExpression(node /*: ESNode | Token */) /*: implies node is NewExpression */ {
=======
export function isNewExpression(node /*: ESNode | Token */) /*: node is NewExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'NewExpression';
}
    

<<<<<<< HEAD
export function isNullableTypeAnnotation(node /*: ESNode | Token */) /*: implies node is NullableTypeAnnotation */ {
=======
export function isNullableTypeAnnotation(node /*: ESNode | Token */) /*: node is NullableTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'NullableTypeAnnotation';
}
    

<<<<<<< HEAD
export function isNullLiteralTypeAnnotation(node /*: ESNode | Token */) /*: implies node is NullLiteralTypeAnnotation */ {
=======
export function isNullLiteralTypeAnnotation(node /*: ESNode | Token */) /*: node is NullLiteralTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'NullLiteralTypeAnnotation';
}
    

<<<<<<< HEAD
export function isNumberLiteralTypeAnnotation(node /*: ESNode | Token */) /*: implies node is NumberLiteralTypeAnnotation */ {
=======
export function isNumberLiteralTypeAnnotation(node /*: ESNode | Token */) /*: node is NumberLiteralTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'NumberLiteralTypeAnnotation';
}
    

<<<<<<< HEAD
export function isNumberTypeAnnotation(node /*: ESNode | Token */) /*: implies node is NumberTypeAnnotation */ {
=======
export function isNumberTypeAnnotation(node /*: ESNode | Token */) /*: node is NumberTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'NumberTypeAnnotation';
}
    

<<<<<<< HEAD
export function isObjectExpression(node /*: ESNode | Token */) /*: implies node is ObjectExpression */ {
=======
export function isObjectExpression(node /*: ESNode | Token */) /*: node is ObjectExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ObjectExpression';
}
    

<<<<<<< HEAD
export function isObjectPattern(node /*: ESNode | Token */) /*: implies node is ObjectPattern */ {
=======
export function isObjectPattern(node /*: ESNode | Token */) /*: node is ObjectPattern */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ObjectPattern';
}
    

<<<<<<< HEAD
export function isObjectTypeAnnotation(node /*: ESNode | Token */) /*: implies node is ObjectTypeAnnotation */ {
=======
export function isObjectTypeAnnotation(node /*: ESNode | Token */) /*: node is ObjectTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ObjectTypeAnnotation';
}
    

<<<<<<< HEAD
export function isObjectTypeCallProperty(node /*: ESNode | Token */) /*: implies node is ObjectTypeCallProperty */ {
=======
export function isObjectTypeCallProperty(node /*: ESNode | Token */) /*: node is ObjectTypeCallProperty */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ObjectTypeCallProperty';
}
    

<<<<<<< HEAD
export function isObjectTypeIndexer(node /*: ESNode | Token */) /*: implies node is ObjectTypeIndexer */ {
=======
export function isObjectTypeIndexer(node /*: ESNode | Token */) /*: node is ObjectTypeIndexer */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ObjectTypeIndexer';
}
    

<<<<<<< HEAD
export function isObjectTypeInternalSlot(node /*: ESNode | Token */) /*: implies node is ObjectTypeInternalSlot */ {
=======
export function isObjectTypeInternalSlot(node /*: ESNode | Token */) /*: node is ObjectTypeInternalSlot */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ObjectTypeInternalSlot';
}
    

<<<<<<< HEAD
export function isObjectTypeMappedTypeProperty(node /*: ESNode | Token */) /*: implies node is ObjectTypeMappedTypeProperty */ {
=======
export function isObjectTypeMappedTypeProperty(node /*: ESNode | Token */) /*: node is ObjectTypeMappedTypeProperty */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ObjectTypeMappedTypeProperty';
}
    

<<<<<<< HEAD
export function isObjectTypeProperty(node /*: ESNode | Token */) /*: implies node is ObjectTypeProperty */ {
=======
export function isObjectTypeProperty(node /*: ESNode | Token */) /*: node is ObjectTypeProperty */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ObjectTypeProperty';
}
    

<<<<<<< HEAD
export function isObjectTypeSpreadProperty(node /*: ESNode | Token */) /*: implies node is ObjectTypeSpreadProperty */ {
=======
export function isObjectTypeSpreadProperty(node /*: ESNode | Token */) /*: node is ObjectTypeSpreadProperty */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ObjectTypeSpreadProperty';
}
    

<<<<<<< HEAD
export function isOpaqueType(node /*: ESNode | Token */) /*: implies node is OpaqueType */ {
=======
export function isOpaqueType(node /*: ESNode | Token */) /*: node is OpaqueType */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'OpaqueType';
}
    

<<<<<<< HEAD
export function isOptionalIndexedAccessType(node /*: ESNode | Token */) /*: implies node is OptionalIndexedAccessType */ {
=======
export function isOptionalIndexedAccessType(node /*: ESNode | Token */) /*: node is OptionalIndexedAccessType */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'OptionalIndexedAccessType';
}
    

<<<<<<< HEAD
export function isPrivateIdentifier(node /*: ESNode | Token */) /*: implies node is PrivateIdentifier */ {
=======
export function isPrivateIdentifier(node /*: ESNode | Token */) /*: node is PrivateIdentifier */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'PrivateIdentifier';
}
    

<<<<<<< HEAD
export function isProgram(node /*: ESNode | Token */) /*: implies node is Program */ {
  return node.type === 'Program';
}
    

export function isProperty(node /*: ESNode | Token */) /*: implies node is Property */ {
=======
export function isProperty(node /*: ESNode | Token */) /*: node is Property */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Property';
}
    

<<<<<<< HEAD
export function isPropertyDefinition(node /*: ESNode | Token */) /*: implies node is PropertyDefinition */ {
=======
export function isPropertyDefinition(node /*: ESNode | Token */) /*: node is PropertyDefinition */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'PropertyDefinition';
}
    

<<<<<<< HEAD
export function isQualifiedTypeIdentifier(node /*: ESNode | Token */) /*: implies node is QualifiedTypeIdentifier */ {
=======
export function isQualifiedTypeIdentifier(node /*: ESNode | Token */) /*: node is QualifiedTypeIdentifier */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'QualifiedTypeIdentifier';
}
    

<<<<<<< HEAD
export function isQualifiedTypeofIdentifier(node /*: ESNode | Token */) /*: implies node is QualifiedTypeofIdentifier */ {
=======
export function isQualifiedTypeofIdentifier(node /*: ESNode | Token */) /*: node is QualifiedTypeofIdentifier */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'QualifiedTypeofIdentifier';
}
    

<<<<<<< HEAD
export function isRestElement(node /*: ESNode | Token */) /*: implies node is RestElement */ {
=======
export function isRestElement(node /*: ESNode | Token */) /*: node is RestElement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'RestElement';
}
    

<<<<<<< HEAD
export function isReturnStatement(node /*: ESNode | Token */) /*: implies node is ReturnStatement */ {
=======
export function isReturnStatement(node /*: ESNode | Token */) /*: node is ReturnStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ReturnStatement';
}
    

<<<<<<< HEAD
export function isSequenceExpression(node /*: ESNode | Token */) /*: implies node is SequenceExpression */ {
=======
export function isSequenceExpression(node /*: ESNode | Token */) /*: node is SequenceExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'SequenceExpression';
}
    

<<<<<<< HEAD
export function isSpreadElement(node /*: ESNode | Token */) /*: implies node is SpreadElement */ {
=======
export function isSpreadElement(node /*: ESNode | Token */) /*: node is SpreadElement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'SpreadElement';
}
    

<<<<<<< HEAD
export function isStringLiteralTypeAnnotation(node /*: ESNode | Token */) /*: implies node is StringLiteralTypeAnnotation */ {
=======
export function isStringLiteralTypeAnnotation(node /*: ESNode | Token */) /*: node is StringLiteralTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'StringLiteralTypeAnnotation';
}
    

<<<<<<< HEAD
export function isStringTypeAnnotation(node /*: ESNode | Token */) /*: implies node is StringTypeAnnotation */ {
=======
export function isStringTypeAnnotation(node /*: ESNode | Token */) /*: node is StringTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'StringTypeAnnotation';
}
    

<<<<<<< HEAD
export function isSuper(node /*: ESNode | Token */) /*: implies node is Super */ {
=======
export function isSuper(node /*: ESNode | Token */) /*: node is Super */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Super';
}
    

<<<<<<< HEAD
export function isSwitchCase(node /*: ESNode | Token */) /*: implies node is SwitchCase */ {
=======
export function isSwitchCase(node /*: ESNode | Token */) /*: node is SwitchCase */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'SwitchCase';
}
    

<<<<<<< HEAD
export function isSwitchStatement(node /*: ESNode | Token */) /*: implies node is SwitchStatement */ {
=======
export function isSwitchStatement(node /*: ESNode | Token */) /*: node is SwitchStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'SwitchStatement';
}
    

<<<<<<< HEAD
export function isSymbolTypeAnnotation(node /*: ESNode | Token */) /*: implies node is SymbolTypeAnnotation */ {
=======
export function isSymbolTypeAnnotation(node /*: ESNode | Token */) /*: node is SymbolTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'SymbolTypeAnnotation';
}
    

<<<<<<< HEAD
export function isTaggedTemplateExpression(node /*: ESNode | Token */) /*: implies node is TaggedTemplateExpression */ {
=======
export function isTaggedTemplateExpression(node /*: ESNode | Token */) /*: node is TaggedTemplateExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TaggedTemplateExpression';
}
    

<<<<<<< HEAD
export function isTemplateElement(node /*: ESNode | Token */) /*: implies node is TemplateElement */ {
=======
export function isTemplateElement(node /*: ESNode | Token */) /*: node is TemplateElement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TemplateElement';
}
    

<<<<<<< HEAD
export function isTemplateLiteral(node /*: ESNode | Token */) /*: implies node is TemplateLiteral */ {
=======
export function isTemplateLiteral(node /*: ESNode | Token */) /*: node is TemplateLiteral */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TemplateLiteral';
}
    

<<<<<<< HEAD
export function isThisExpression(node /*: ESNode | Token */) /*: implies node is ThisExpression */ {
=======
export function isThisExpression(node /*: ESNode | Token */) /*: node is ThisExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ThisExpression';
}
    

<<<<<<< HEAD
export function isThisTypeAnnotation(node /*: ESNode | Token */) /*: implies node is ThisTypeAnnotation */ {
=======
export function isThisTypeAnnotation(node /*: ESNode | Token */) /*: node is ThisTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ThisTypeAnnotation';
}
    

<<<<<<< HEAD
export function isThrowStatement(node /*: ESNode | Token */) /*: implies node is ThrowStatement */ {
=======
export function isThrowStatement(node /*: ESNode | Token */) /*: node is ThrowStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'ThrowStatement';
}
    

<<<<<<< HEAD
export function isTryStatement(node /*: ESNode | Token */) /*: implies node is TryStatement */ {
=======
export function isTryStatement(node /*: ESNode | Token */) /*: node is TryStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TryStatement';
}
    

<<<<<<< HEAD
export function isTupleTypeAnnotation(node /*: ESNode | Token */) /*: implies node is TupleTypeAnnotation */ {
=======
export function isTupleTypeAnnotation(node /*: ESNode | Token */) /*: node is TupleTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TupleTypeAnnotation';
}
    

<<<<<<< HEAD
export function isTupleTypeLabeledElement(node /*: ESNode | Token */) /*: implies node is TupleTypeLabeledElement */ {
=======
export function isTupleTypeLabeledElement(node /*: ESNode | Token */) /*: node is TupleTypeLabeledElement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TupleTypeLabeledElement';
}
    

<<<<<<< HEAD
export function isTupleTypeSpreadElement(node /*: ESNode | Token */) /*: implies node is TupleTypeSpreadElement */ {
=======
export function isTupleTypeSpreadElement(node /*: ESNode | Token */) /*: node is TupleTypeSpreadElement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TupleTypeSpreadElement';
}
    

<<<<<<< HEAD
export function isTypeAlias(node /*: ESNode | Token */) /*: implies node is TypeAlias */ {
=======
export function isTypeAlias(node /*: ESNode | Token */) /*: node is TypeAlias */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TypeAlias';
}
    

<<<<<<< HEAD
export function isTypeAnnotation(node /*: ESNode | Token */) /*: implies node is TypeAnnotation */ {
=======
export function isTypeAnnotation(node /*: ESNode | Token */) /*: node is TypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TypeAnnotation';
}
    

<<<<<<< HEAD
export function isTypeCastExpression(node /*: ESNode | Token */) /*: implies node is TypeCastExpression */ {
=======
export function isTypeCastExpression(node /*: ESNode | Token */) /*: node is TypeCastExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TypeCastExpression';
}
    

<<<<<<< HEAD
export function isTypeofTypeAnnotation(node /*: ESNode | Token */) /*: implies node is TypeofTypeAnnotation */ {
=======
export function isTypeofTypeAnnotation(node /*: ESNode | Token */) /*: node is TypeofTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TypeofTypeAnnotation';
}
    

<<<<<<< HEAD
export function isTypeOperator(node /*: ESNode | Token */) /*: implies node is TypeOperator */ {
=======
export function isTypeOperator(node /*: ESNode | Token */) /*: node is TypeOperator */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TypeOperator';
}
    

<<<<<<< HEAD
export function isTypeParameter(node /*: ESNode | Token */) /*: implies node is TypeParameter */ {
=======
export function isTypeParameter(node /*: ESNode | Token */) /*: node is TypeParameter */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TypeParameter';
}
    

<<<<<<< HEAD
export function isTypeParameterDeclaration(node /*: ESNode | Token */) /*: implies node is TypeParameterDeclaration */ {
=======
export function isTypeParameterDeclaration(node /*: ESNode | Token */) /*: node is TypeParameterDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TypeParameterDeclaration';
}
    

<<<<<<< HEAD
export function isTypeParameterInstantiation(node /*: ESNode | Token */) /*: implies node is TypeParameterInstantiation */ {
=======
export function isTypeParameterInstantiation(node /*: ESNode | Token */) /*: node is TypeParameterInstantiation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TypeParameterInstantiation';
}
    

<<<<<<< HEAD
export function isTypePredicate(node /*: ESNode | Token */) /*: implies node is TypePredicate */ {
=======
export function isTypePredicate(node /*: ESNode | Token */) /*: node is TypePredicate */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'TypePredicate';
}
    

<<<<<<< HEAD
export function isUnaryExpression(node /*: ESNode | Token */) /*: implies node is UnaryExpression */ {
=======
export function isUnaryExpression(node /*: ESNode | Token */) /*: node is UnaryExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'UnaryExpression';
}
    

<<<<<<< HEAD
export function isUnionTypeAnnotation(node /*: ESNode | Token */) /*: implies node is UnionTypeAnnotation */ {
=======
export function isUnionTypeAnnotation(node /*: ESNode | Token */) /*: node is UnionTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'UnionTypeAnnotation';
}
    

<<<<<<< HEAD
export function isUpdateExpression(node /*: ESNode | Token */) /*: implies node is UpdateExpression */ {
=======
export function isUpdateExpression(node /*: ESNode | Token */) /*: node is UpdateExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'UpdateExpression';
}
    

<<<<<<< HEAD
export function isVariableDeclaration(node /*: ESNode | Token */) /*: implies node is VariableDeclaration */ {
=======
export function isVariableDeclaration(node /*: ESNode | Token */) /*: node is VariableDeclaration */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'VariableDeclaration';
}
    

<<<<<<< HEAD
export function isVariableDeclarator(node /*: ESNode | Token */) /*: implies node is VariableDeclarator */ {
=======
export function isVariableDeclarator(node /*: ESNode | Token */) /*: node is VariableDeclarator */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'VariableDeclarator';
}
    

<<<<<<< HEAD
export function isVariance(node /*: ESNode | Token */) /*: implies node is Variance */ {
=======
export function isVariance(node /*: ESNode | Token */) /*: node is Variance */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Variance';
}
    

<<<<<<< HEAD
export function isVoidTypeAnnotation(node /*: ESNode | Token */) /*: implies node is VoidTypeAnnotation */ {
=======
export function isVoidTypeAnnotation(node /*: ESNode | Token */) /*: node is VoidTypeAnnotation */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'VoidTypeAnnotation';
}
    

<<<<<<< HEAD
export function isWhileStatement(node /*: ESNode | Token */) /*: implies node is WhileStatement */ {
=======
export function isWhileStatement(node /*: ESNode | Token */) /*: node is WhileStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'WhileStatement';
}
    

<<<<<<< HEAD
export function isWithStatement(node /*: ESNode | Token */) /*: implies node is WithStatement */ {
=======
export function isWithStatement(node /*: ESNode | Token */) /*: node is WithStatement */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'WithStatement';
}
    

<<<<<<< HEAD
export function isYieldExpression(node /*: ESNode | Token */) /*: implies node is YieldExpression */ {
=======
export function isYieldExpression(node /*: ESNode | Token */) /*: node is YieldExpression */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'YieldExpression';
}
    

<<<<<<< HEAD
export function isLiteral(node /*: ESNode | Token */) /*: implies node is Literal */ {
=======
export function isLiteral(node /*: ESNode | Token */) /*: node is Literal */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Literal';
}
    

<<<<<<< HEAD
export function isLineComment(node /*: ESNode | Token */) /*: implies node is (MostTokens | LineComment) */ {
=======
export function isLineComment(node /*: ESNode | Token */) /*: node is (MostTokens | LineComment) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Line';
}
    

<<<<<<< HEAD
export function isBlockComment(node /*: ESNode | Token */) /*: implies node is (MostTokens | BlockComment) */ {
=======
export function isBlockComment(node /*: ESNode | Token */) /*: node is (MostTokens | BlockComment) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Block';
}
    

<<<<<<< HEAD
export function isMinusToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isMinusToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '-';
}
      

<<<<<<< HEAD
export function isPlusToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isPlusToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '+';
}
      

<<<<<<< HEAD
export function isLogicalNotToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isLogicalNotToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '!';
}
      

<<<<<<< HEAD
export function isUnaryNegationToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isUnaryNegationToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '~';
}
      

<<<<<<< HEAD
export function isTypeOfToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isTypeOfToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'typeof';
}
      

<<<<<<< HEAD
export function isVoidToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isVoidToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'void';
}
      

<<<<<<< HEAD
export function isDeleteToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isDeleteToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'delete';
}
      

<<<<<<< HEAD
export function isLooseEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isLooseEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '==';
}
      

<<<<<<< HEAD
export function isLooseNotEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isLooseNotEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '!=';
}
      

<<<<<<< HEAD
export function isStrictEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isStrictEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '===';
}
      

<<<<<<< HEAD
export function isStrictNotEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isStrictNotEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '!==';
}
      

<<<<<<< HEAD
export function isLessThanToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isLessThanToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '<';
}
      

<<<<<<< HEAD
export function isLessThanOrEqualToToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isLessThanOrEqualToToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '<=';
}
      

<<<<<<< HEAD
export function isGreaterThanToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isGreaterThanToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '>';
}
      

<<<<<<< HEAD
export function isGreaterThanOrEqualToToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isGreaterThanOrEqualToToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '>=';
}
      

<<<<<<< HEAD
export function isBitwiseLeftShiftToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseLeftShiftToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '<<';
}
      

<<<<<<< HEAD
export function isBitwiseRightShiftToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseRightShiftToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '>>';
}
      

<<<<<<< HEAD
export function isBitwiseUnsignedRightShiftToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseUnsignedRightShiftToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '>>>';
}
      

<<<<<<< HEAD
export function isAsterixToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isAsterixToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '*';
}
      

<<<<<<< HEAD
export function isForwardSlashToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isForwardSlashToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '/';
}
      

<<<<<<< HEAD
export function isPercentToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isPercentToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '%';
}
      

<<<<<<< HEAD
export function isExponentiationToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isExponentiationToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '**';
}
      

<<<<<<< HEAD
export function isBitwiseORToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseORToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '|';
}
      

<<<<<<< HEAD
export function isBitwiseXORToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseXORToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '^';
}
      

<<<<<<< HEAD
export function isBitwiseANDToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseANDToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '&';
}
      

<<<<<<< HEAD
export function isInToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isInToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'in';
}
      

<<<<<<< HEAD
export function isInstanceOfToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isInstanceOfToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'instanceof';
}
      

<<<<<<< HEAD
export function isLogicalORToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isLogicalORToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '||';
}
      

<<<<<<< HEAD
export function isLogicalANDToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isLogicalANDToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '&&';
}
      

<<<<<<< HEAD
export function isNullishCoalesceToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isNullishCoalesceToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '??';
}
      

<<<<<<< HEAD
export function isEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '=';
}
      

<<<<<<< HEAD
export function isPlusEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isPlusEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '+=';
}
      

<<<<<<< HEAD
export function isMinusEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isMinusEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '-=';
}
      

<<<<<<< HEAD
export function isMultiplyEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isMultiplyEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '*=';
}
      

<<<<<<< HEAD
export function isDivideEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isDivideEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '/=';
}
      

<<<<<<< HEAD
export function isRemainderEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isRemainderEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '%=';
}
      

<<<<<<< HEAD
export function isExponentateEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isExponentateEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '**=';
}
      

<<<<<<< HEAD
export function isBitwiseLeftShiftEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseLeftShiftEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '<<=';
}
      

<<<<<<< HEAD
export function isBitwiseRightShiftEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseRightShiftEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '>>=';
}
      

<<<<<<< HEAD
export function isBitwiseUnsignedRightShiftEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseUnsignedRightShiftEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '>>>=';
}
      

<<<<<<< HEAD
export function isBitwiseOREqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseOREqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '|=';
}
      

<<<<<<< HEAD
export function isBitwiseXOREqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseXOREqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '^=';
}
      

<<<<<<< HEAD
export function isBitwiseANDEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBitwiseANDEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '&=';
}
      

<<<<<<< HEAD
export function isLogicalOREqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isLogicalOREqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '||=';
}
      

<<<<<<< HEAD
export function isLogicalANDEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isLogicalANDEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '&&=';
}
      

<<<<<<< HEAD
export function isNullishCoalesceEqualToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isNullishCoalesceEqualToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '??=';
}
      

<<<<<<< HEAD
export function isIncrementToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isIncrementToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '++';
}
      

<<<<<<< HEAD
export function isDecrementToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isDecrementToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '--';
}
      

<<<<<<< HEAD
export function isUnionTypeToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isUnionTypeToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '|';
}
      

<<<<<<< HEAD
export function isIntersectionTypeToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isIntersectionTypeToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '&';
}
      

<<<<<<< HEAD
export function isBreakToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isBreakToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'break';
}
      

<<<<<<< HEAD
export function isCaseToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isCaseToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'case';
}
      

<<<<<<< HEAD
export function isCatchToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isCatchToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'catch';
}
      

<<<<<<< HEAD
export function isClassToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isClassToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'class';
}
      

<<<<<<< HEAD
export function isConstToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isConstToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'const';
}
      

<<<<<<< HEAD
export function isContinueToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isContinueToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'continue';
}
      

<<<<<<< HEAD
export function isDebuggerToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isDebuggerToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'debugger';
}
      

<<<<<<< HEAD
export function isDefaultToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isDefaultToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'default';
}
      

<<<<<<< HEAD
export function isDoToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isDoToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'do';
}
      

<<<<<<< HEAD
export function isElseToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isElseToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'else';
}
      

<<<<<<< HEAD
export function isEnumToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isEnumToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'enum';
}
      

<<<<<<< HEAD
export function isExportToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isExportToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'export';
}
      

<<<<<<< HEAD
export function isExtendsToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isExtendsToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'extends';
}
      

<<<<<<< HEAD
export function isFinallyToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isFinallyToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'finally';
}
      

<<<<<<< HEAD
export function isForToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isForToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'for';
}
      

<<<<<<< HEAD
export function isFunctionToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isFunctionToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'function';
}
      

<<<<<<< HEAD
export function isIfToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isIfToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'if';
}
      

<<<<<<< HEAD
export function isImplementsToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isImplementsToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'implements';
}
      

<<<<<<< HEAD
export function isImportToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isImportToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'import';
}
      

<<<<<<< HEAD
export function isInterfaceToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isInterfaceToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'interface';
}
      

<<<<<<< HEAD
export function isNewToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isNewToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'new';
}
      

<<<<<<< HEAD
export function isReturnToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isReturnToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'return';
}
      

<<<<<<< HEAD
export function isStaticToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isStaticToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'static';
}
      

<<<<<<< HEAD
export function isSuperToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isSuperToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'super';
}
      

<<<<<<< HEAD
export function isSwitchToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isSwitchToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'switch';
}
      

<<<<<<< HEAD
export function isThisToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isThisToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'this';
}
      

<<<<<<< HEAD
export function isThrowToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isThrowToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'throw';
}
      

<<<<<<< HEAD
export function isTryToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isTryToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'try';
}
      

<<<<<<< HEAD
export function isVarToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isVarToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'var';
}
      

<<<<<<< HEAD
export function isWhileToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isWhileToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'while';
}
      

<<<<<<< HEAD
export function isWithToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isWithToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'with';
}
      

<<<<<<< HEAD
export function isYieldToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isYieldToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Keyword' && node.value === 'yield';
}
      

<<<<<<< HEAD
export function isAsKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isAsKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'as') ||
    (node.type === 'Keyword' && node.value === 'as')
  );
}
      

<<<<<<< HEAD
export function isAsyncKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isAsyncKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'async') ||
    (node.type === 'Keyword' && node.value === 'async')
  );
}
      

<<<<<<< HEAD
export function isAwaitKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isAwaitKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'await') ||
    (node.type === 'Keyword' && node.value === 'await')
  );
}
      

<<<<<<< HEAD
export function isDeclareKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isDeclareKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'declare') ||
    (node.type === 'Keyword' && node.value === 'declare')
  );
}
      

<<<<<<< HEAD
export function isFromKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isFromKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'from') ||
    (node.type === 'Keyword' && node.value === 'from')
  );
}
      

<<<<<<< HEAD
export function isGetKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isGetKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'get') ||
    (node.type === 'Keyword' && node.value === 'get')
  );
}
      

<<<<<<< HEAD
export function isLetKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isLetKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'let') ||
    (node.type === 'Keyword' && node.value === 'let')
  );
}
      

<<<<<<< HEAD
export function isModuleKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isModuleKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'module') ||
    (node.type === 'Keyword' && node.value === 'module')
  );
}
      

<<<<<<< HEAD
export function isOfKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isOfKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'of') ||
    (node.type === 'Keyword' && node.value === 'of')
  );
}
      

<<<<<<< HEAD
export function isSetKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isSetKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'set') ||
    (node.type === 'Keyword' && node.value === 'set')
  );
}
      

<<<<<<< HEAD
export function isTypeKeyword(node /*: ESNode | Token */) /*: implies node is (Identifier | MostTokens) */ {
=======
export function isTypeKeyword(node /*: ESNode | Token */) /*: node is (Identifier | MostTokens) */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return (
    (node.type === 'Identifier' && node.name === 'type') ||
    (node.type === 'Keyword' && node.value === 'type')
  );
}
      

<<<<<<< HEAD
export function isCommaToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isCommaToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === ',';
}
      

<<<<<<< HEAD
export function isColonToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isColonToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === ':';
}
      

<<<<<<< HEAD
export function isSemicolonToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isSemicolonToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === ';';
}
      

<<<<<<< HEAD
export function isDotToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isDotToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '.';
}
      

<<<<<<< HEAD
export function isDotDotDotToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isDotDotDotToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '...';
}
      

<<<<<<< HEAD
export function isOptionalChainToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isOptionalChainToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '?.';
}
      

<<<<<<< HEAD
export function isQuestionMarkToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isQuestionMarkToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '?';
}
      

<<<<<<< HEAD
export function isOpeningParenthesisToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isOpeningParenthesisToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '(';
}
      

<<<<<<< HEAD
export function isClosingParenthesisToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isClosingParenthesisToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === ')';
}
      

<<<<<<< HEAD
export function isOpeningCurlyBracketToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isOpeningCurlyBracketToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '{';
}
      

<<<<<<< HEAD
export function isClosingCurlyBracketToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isClosingCurlyBracketToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '}';
}
      

<<<<<<< HEAD
export function isOpeningAngleBracketToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isOpeningAngleBracketToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '<';
}
      

<<<<<<< HEAD
export function isClosingAngleBracketToken(node /*: ESNode | Token */) /*: implies node is MostTokens */ {
=======
export function isClosingAngleBracketToken(node /*: ESNode | Token */) /*: node is MostTokens */ {
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  return node.type === 'Punctuator' && node.value === '>';
}
      
