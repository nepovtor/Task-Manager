"use strict";

const Transformer = require("./DeltaBundler/Transformer");
const DependencyGraph = require("./node-haste/DependencyGraph");
class Bundler {
  constructor(config, options) {
    this._depGraph = new DependencyGraph(config, options);
<<<<<<< HEAD
    this._initializedPromise = this._depGraph
=======
    this._readyPromise = this._depGraph
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
      .ready()
      .then(() => {
        config.reporter.update({
          type: "transformer_load_started",
        });
<<<<<<< HEAD
        this._transformer = new Transformer(
          config,
          config.watcher.unstable_lazySha1
            ? {
                unstable_getOrComputeSha1: (filePath) =>
                  this._depGraph.unstable_getOrComputeSha1(filePath),
              }
            : (...args) => this._depGraph.getSha1(...args)
=======
        this._transformer = new Transformer(config, (...args) =>
          this._depGraph.getSha1(...args)
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
        );
        config.reporter.update({
          type: "transformer_load_done",
        });
      })
      .catch((error) => {
        console.error("Failed to construct transformer: ", error);
        config.reporter.update({
          type: "transformer_load_failed",
          error,
        });
      });
  }
  getWatcher() {
    return this._depGraph.getWatcher();
  }
  async end() {
<<<<<<< HEAD
    await this.ready();
    await this._transformer.end();
    await this._depGraph.end();
  }
  async getDependencyGraph() {
    await this.ready();
    return this._depGraph;
  }
  async transformFile(filePath, transformOptions, fileBuffer) {
    await this.ready();
=======
    await this._depGraph.ready();
    this._transformer.end();
    this._depGraph.end();
  }
  async getDependencyGraph() {
    await this._depGraph.ready();
    return this._depGraph;
  }
  async transformFile(filePath, transformOptions, fileBuffer) {
    await this._depGraph.ready();
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
    return this._transformer.transformFile(
      filePath,
      transformOptions,
      fileBuffer
    );
  }
  async ready() {
<<<<<<< HEAD
    await this._initializedPromise;
=======
    await this._readyPromise;
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
  }
}
module.exports = Bundler;
