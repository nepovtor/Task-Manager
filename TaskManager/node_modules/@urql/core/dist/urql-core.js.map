<<<<<<< HEAD
{"version":3,"file":"urql-core.js","sources":["../src/utils/collectTypenames.ts","../src/utils/formatDocument.ts","../src/utils/streamUtils.ts","../src/utils/operation.ts","../src/utils/index.ts","../src/gql.ts","../src/exchanges/cache.ts","../src/exchanges/ssr.ts","../src/exchanges/subscription.ts","../src/exchanges/debug.ts","../src/exchanges/fetch.ts","../src/exchanges/compose.ts","../src/exchanges/map.ts","../src/exchanges/fallback.ts","../src/client.ts"],"sourcesContent":null,"names":["collectTypes","obj","types","Array","isArray","i","l","length","key","add","collectTypenames","response","Set","formatNode","node","definitions","newDefinition","push","directives","_directives","directive","name","value","slice","selections","hasTypename","kind","Kind","OPERATION_DEFINITION","selectionSet","selection","FIELD","alias","newSelection","NAME","_generated","formattedDocs","Map","formatDocument","query","keyDocument","result","get","__key","set","Object","defineProperty","enumerable","withPromise","_source$","source$","sink","toPromise","take","filter","stale","hasNext","then","onResolve","onReject","subscribe","onResult","makeOperation","request","context","addMetadata","operation","meta","noop","gql","parts","fragmentNames","source","body","arguments","unshift","j","definition","FRAGMENT_DEFINITION","stringifyDocument","has","process","env","NODE_ENV","console","warn","DOCUMENT","shouldSkip","mapTypeNames","formattedOperation","cacheExchange","forward","client","dispatchDebug","resultCache","operationCache","isOperationCached","requestPolicy","ops$","cachedOps$","map","cachedResult","type","message","undefined","makeResult","data","cacheOutcome","reexecuteOperation","op","forwardedOps$","tap","typenames","additionalTypenames","concat","pendingOperations","typeName","operations","values","clear","delete","merge","serializeResult","includeExtensions","serialized","JSON","stringify","extensions","error","graphQLErrors","path","networkError","deserializeResult","parse","CombinedError","Error","revalidated","ssrExchange","params","staleWhileRevalidate","invalidateQueue","invalidate","Promise","resolve","shift","ssr","isClient","suspense","restoreData","restore","extractData","initialState","subscriptionExchange","forwardSubscription","enableAllOperations","isSubscriptionOperation","createSubscriptionSource","observableish","makeFetchBody","make","observer","isComplete","sub","nextResult","next","mergeResultPatch","errors","makeErrorResult","complete","unsubscribe","isSubscriptionOperationFn","subscriptionResults$","mergeMap","teardown$","takeUntil","forward$","debugExchange","debug","fetchExchange","fetchResults$","url","makeFetchURL","fetchOptions","makeFetchOptions","makeFetchSource","onPush","fetchSubscriptions","composeExchanges","exchanges","reduceRight","exchange","forwarded","operations$","share","event","timestamp","Date","now","mapExchange","onOperation","onError","newResult","fromPromise","fromValue","newOperation","fallbackExchange","_x","Client","opts","ids","replays","active","dispatched","queue","baseOpts","fetch","preferGetMethod","makeSubject","nextOperation","isOperationBatchActive","dispatchOperation","makeResultSource","result$","res","_instance","results$","takeWhile","switchMap","value$","onEnd","splice","onStart","instance","create","prototype","assign","queued","createRequestOperation","requestOperationType","getOperationType","executeRequestOperation","lazy","replay","executeQuery","executeSubscription","executeMutation","readQuery","variables","createRequest","subscription","mutation","subscribeToDebugTarget","onEvent","composedExchange","publish","createClient"],"mappings":"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"}
=======
{"version":3,"file":"urql-core.js","sources":["../src/utils/typenames.ts","../src/utils/maskTypename.ts","../src/utils/streamUtils.ts","../src/utils/operation.ts","../src/gql.ts","../src/exchanges/cache.ts","../src/exchanges/ssr.ts","../src/exchanges/dedup.ts","../src/exchanges/fetch.ts","../src/exchanges/fallback.ts","../src/exchanges/compose.ts","../src/client.ts","../src/exchanges/error.ts","../src/exchanges/subscription.ts"],"sourcesContent":["import {\n  DocumentNode,\n  FieldNode,\n  InlineFragmentNode,\n  SelectionNode,\n  Kind,\n  visit,\n} from 'graphql';\n\nimport { KeyedDocumentNode, keyDocument } from './request';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (\n  obj: EntityLike | EntityLike[],\n  types: { [typename: string]: unknown }\n) => {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) collectTypes(obj[i], types);\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (key === '__typename' && typeof obj[key] === 'string') {\n        types[obj[key] as string] = 0;\n      } else {\n        collectTypes(obj[key], types);\n      }\n    }\n  }\n\n  return types;\n};\n\nexport const collectTypesFromResponse = (response: object) =>\n  Object.keys(collectTypes(response as EntityLike, {}));\n\nconst formatNode = (node: FieldNode | InlineFragmentNode) => {\n  if (\n    node.selectionSet &&\n    !node.selectionSet.selections.some(\n      node =>\n        node.kind === Kind.FIELD &&\n        node.name.value === '__typename' &&\n        !node.alias\n    )\n  ) {\n    return {\n      ...node,\n      selectionSet: {\n        ...node.selectionSet,\n        selections: [\n          ...(node.selectionSet.selections as SelectionNode[]),\n          {\n            kind: Kind.FIELD,\n            name: {\n              kind: Kind.NAME,\n              value: '__typename',\n            },\n          },\n        ],\n      },\n    };\n  }\n};\n\nconst formattedDocs = new Map<number, KeyedDocumentNode>();\n\nexport const formatDocument = <T extends DocumentNode>(node: T): T => {\n  const query = keyDocument(node);\n\n  let result = formattedDocs.get(query.__key);\n  if (!result) {\n    result = visit(query, {\n      Field: formatNode,\n      InlineFragment: formatNode,\n    }) as KeyedDocumentNode;\n\n    // Ensure that the hash of the resulting document won't suddenly change\n    // we are marking __key as non-enumerable so when external exchanges use visit\n    // to manipulate a document we won't restore the previous query due to the __key\n    // property.\n    Object.defineProperty(result, '__key', {\n      value: query.__key,\n      enumerable: false,\n    });\n\n    formattedDocs.set(query.__key, result);\n  }\n\n  return (result as unknown) as T;\n};\n","export const maskTypename = (data: any): any => {\n  if (!data || typeof data !== 'object') return data;\n\n  return Object.keys(data).reduce(\n    (acc, key: string) => {\n      const value = data[key];\n      if (key === '__typename') {\n        Object.defineProperty(acc, '__typename', {\n          enumerable: false,\n          value,\n        });\n      } else if (Array.isArray(value)) {\n        acc[key] = value.map(maskTypename);\n      } else if (value && typeof value === 'object' && '__typename' in value) {\n        acc[key] = maskTypename(value);\n      } else {\n        acc[key] = value;\n      }\n\n      return acc;\n    },\n    Array.isArray(data) ? [] : {}\n  );\n};\n","import { Source, pipe, toPromise, filter, take } from 'wonka';\nimport { OperationResult, PromisifiedSource } from '../types';\n\nexport function withPromise<T extends OperationResult>(\n  source$: Source<T>\n): PromisifiedSource<T> {\n  (source$ as PromisifiedSource<T>).toPromise = () => {\n    return pipe(\n      source$,\n      filter(result => !result.stale && !result.hasNext),\n      take(1),\n      toPromise\n    );\n  };\n\n  return source$ as PromisifiedSource<T>;\n}\n","import {\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationType,\n} from '../types';\n\nfunction makeOperation<Data = any, Variables = object>(\n  kind: OperationType,\n  request: GraphQLRequest<Data, Variables>,\n  context: OperationContext\n): Operation<Data, Variables>;\n\nfunction makeOperation<Data = any, Variables = object>(\n  kind: OperationType,\n  request: Operation<Data, Variables>,\n  context?: OperationContext\n): Operation<Data, Variables>;\n\nfunction makeOperation(kind, request, context) {\n  if (!context) context = request.context;\n\n  return {\n    key: request.key,\n    query: request.query,\n    variables: request.variables,\n    kind,\n    context,\n  };\n}\n\nexport { makeOperation };\n\n/** Spreads the provided metadata to the source operation's meta property in context.  */\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationContext['meta']\n) => {\n  return makeOperation(operation.kind, operation, {\n    ...operation.context,\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n};\n","/* eslint-disable prefer-rest-params */\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  FragmentDefinitionNode,\n  Kind,\n} from 'graphql';\n\nimport { keyDocument, stringifyDocument } from './utils';\n\nconst applyDefinitions = (\n  fragmentNames: Map<string, string>,\n  target: DefinitionNode[],\n  source: Array<DefinitionNode> | ReadonlyArray<DefinitionNode>\n) => {\n  for (let i = 0; i < source.length; i++) {\n    if (source[i].kind === Kind.FRAGMENT_DEFINITION) {\n      const name = (source[i] as FragmentDefinitionNode).name.value;\n      const value = stringifyDocument(source[i]);\n      // Fragments will be deduplicated according to this Map\n      if (!fragmentNames.has(name)) {\n        fragmentNames.set(name, value);\n        target.push(source[i]);\n      } else if (\n        process.env.NODE_ENV !== 'production' &&\n        fragmentNames.get(name) !== value\n      ) {\n        // Fragments with the same names is expected to have the same contents\n        console.warn(\n          '[WARNING: Duplicate Fragment] A fragment with name `' +\n            name +\n            '` already exists in this document.\\n' +\n            'While fragment names may not be unique across your source, each name must be unique per document.'\n        );\n      }\n    } else {\n      target.push(source[i]);\n    }\n  }\n};\n\nfunction gql<Data = any, Variables = object>(\n  strings: TemplateStringsArray,\n  ...interpolations: Array<TypedDocumentNode | DocumentNode | string>\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql<Data = any, Variables = object>(\n  string: string\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql(/* arguments */) {\n  const fragmentNames = new Map<string, string>();\n  const definitions: DefinitionNode[] = [];\n  const interpolations: DefinitionNode[] = [];\n\n  // Apply the entire tagged template body's definitions\n  let body: string = Array.isArray(arguments[0])\n    ? arguments[0][0]\n    : arguments[0] || '';\n  for (let i = 1; i < arguments.length; i++) {\n    const value = arguments[i];\n    if (value && value.definitions) {\n      interpolations.push(...value.definitions);\n    } else {\n      body += value;\n    }\n\n    body += arguments[0][i];\n  }\n\n  // Apply the tag's body definitions\n  applyDefinitions(fragmentNames, definitions, keyDocument(body).definitions);\n  // Copy over each interpolated document's definitions\n  applyDefinitions(fragmentNames, definitions, interpolations);\n\n  return keyDocument({\n    kind: Kind.DOCUMENT,\n    definitions,\n  });\n}\n\nexport { gql };\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, share, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult } from '../types';\n\nimport {\n  makeOperation,\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\n\ninterface OperationCache {\n  [key: string]: Set<number>;\n}\n\nconst shouldSkip = ({ kind }: Operation) =>\n  kind !== 'mutation' && kind !== 'query';\n\nexport const cacheExchange: Exchange = ({ forward, client, dispatchDebug }) => {\n  const resultCache = new Map() as ResultCache;\n  const operationCache = Object.create(null) as OperationCache;\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => {\n    const formattedOperation = makeOperation(operation.kind, operation);\n    formattedOperation.query = formatDocument(operation.query);\n    return formattedOperation;\n  };\n\n  const isOperationCached = (operation: Operation) => {\n    const {\n      key,\n      kind,\n      context: { requestPolicy },\n    } = operation;\n    return (\n      kind === 'query' &&\n      requestPolicy !== 'network-only' &&\n      (requestPolicy === 'cache-only' || resultCache.has(key))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n\n    const cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n\n        dispatchDebug({\n          operation,\n          ...(cachedResult\n            ? {\n                type: 'cacheHit',\n                message: 'The result was successfully retried from the cache',\n              }\n            : {\n                type: 'cacheMiss',\n                message: 'The result could not be retrieved from the cache',\n              }),\n        });\n\n        const result: OperationResult = {\n          ...cachedResult,\n          operation: addMetadata(operation, {\n            cacheOutcome: cachedResult ? 'hit' : 'miss',\n          }),\n        };\n\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          result.stale = true;\n          reexecuteOperation(client, operation);\n        }\n\n        return result;\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          sharedOps$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          sharedOps$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      filter(\n        op => op.kind !== 'query' || op.context.requestPolicy !== 'cache-only'\n      ),\n      forward,\n      tap(response => {\n        let { operation } = response;\n        if (!operation) return;\n\n        const typenames = collectTypesFromResponse(response.data).concat(\n          operation.context.additionalTypenames || []\n        );\n\n        // Invalidates the cache given a mutation's response\n        if (response.operation.kind === 'mutation') {\n          const pendingOperations = new Set<number>();\n\n          dispatchDebug({\n            type: 'cacheInvalidation',\n            message: `The following typenames have been invalidated: ${typenames}`,\n            operation,\n            data: { typenames, response },\n          });\n\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            const operations =\n              operationCache[typeName] ||\n              (operationCache[typeName] = new Set());\n            operations.forEach(key => {\n              pendingOperations.add(key);\n            });\n            operations.clear();\n          }\n\n          pendingOperations.forEach(key => {\n            if (resultCache.has(key)) {\n              operation = (resultCache.get(key) as OperationResult).operation;\n              resultCache.delete(key);\n              reexecuteOperation(client, operation);\n            }\n          });\n          // Mark typenames on typenameInvalidate for early invalidation\n        } else if (operation.kind === 'query' && response.data) {\n          resultCache.set(operation.key, response);\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            const operations =\n              operationCache[typeName] ||\n              (operationCache[typeName] = new Set());\n            operations.add(operation.key);\n          }\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n// Reexecutes a given operation with the default requestPolicy\nexport const reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation(\n    makeOperation(operation.kind, operation, {\n      ...operation.context,\n      requestPolicy: 'network-only',\n    })\n  );\n};\n","import { GraphQLError } from 'graphql';\nimport { pipe, share, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { CombinedError } from '../utils';\nimport { reexecuteOperation } from './cache';\n\nexport interface SerializedResult {\n  hasNext?: boolean;\n  data?: string | undefined; // JSON string of data\n  extensions?: string | undefined; // JSON string of data\n  error?: {\n    graphQLErrors: Array<Partial<GraphQLError> | string>;\n    networkError?: string;\n  };\n}\n\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\nexport interface SSRExchangeParams {\n  isClient?: boolean;\n  initialState?: SSRData;\n  staleWhileRevalidate?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface SSRExchange extends Exchange {\n  /** Rehydrates cached data */\n  restoreData(data: SSRData): void;\n  /** Extracts cached data */\n  extractData(): SSRData;\n}\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = (\n  { hasNext, data, extensions, error }: OperationResult,\n  includeExtensions: boolean\n): SerializedResult => {\n  const result: SerializedResult = {};\n  if (data !== undefined) result.data = JSON.stringify(data);\n  if (includeExtensions && extensions !== undefined) {\n    result.extensions = JSON.stringify(extensions);\n  }\n  if (hasNext) result.hasNext = true;\n\n  if (error) {\n    result.error = {\n      graphQLErrors: error.graphQLErrors.map(error => {\n        if (!error.path && !error.extensions) return error.message;\n\n        return {\n          message: error.message,\n          path: error.path,\n          extensions: error.extensions,\n        };\n      }),\n    };\n\n    if (error.networkError) {\n      result.error.networkError = '' + error.networkError;\n    }\n  }\n\n  return result;\n};\n\n/** Deserialize plain JSON to an OperationResult */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult,\n  includeExtensions: boolean\n): OperationResult => ({\n  operation,\n  data: result.data ? JSON.parse(result.data) : undefined,\n  extensions:\n    includeExtensions && result.extensions\n      ? JSON.parse(result.extensions)\n      : undefined,\n  error: result.error\n    ? new CombinedError({\n        networkError: result.error.networkError\n          ? new Error(result.error.networkError)\n          : undefined,\n        graphQLErrors: result.error.graphQLErrors,\n      })\n    : undefined,\n  hasNext: result.hasNext,\n});\n\nconst revalidated = new Set<number>();\n\n/** The ssrExchange can be created to capture data during SSR and also to rehydrate it on the client */\nexport const ssrExchange = (params?: SSRExchangeParams): SSRExchange => {\n  const staleWhileRevalidate = !!(params && params.staleWhileRevalidate);\n  const includeExtensions = !!(params && params.includeExtensions);\n  const data: Record<string, SerializedResult | null> = {};\n\n  // On the client-side, we delete results from the cache as they're resolved\n  // this is delayed so that concurrent queries don't delete each other's data\n  const invalidateQueue: number[] = [];\n  const invalidate = (result: OperationResult) => {\n    invalidateQueue.push(result.operation.key);\n    if (invalidateQueue.length === 1) {\n      Promise.resolve().then(() => {\n        let key: number | void;\n        while ((key = invalidateQueue.shift())) {\n          data[key] = null;\n        }\n      });\n    }\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange = ({ client, forward }) => ops$ => {\n    // params.isClient tells us whether we're on the client-side\n    // By default we assume that we're on the client if suspense-mode is disabled\n    const isClient =\n      params && typeof params.isClient === 'boolean'\n        ? !!params.isClient\n        : !client.suspense;\n\n    const sharedOps$ = share(ops$);\n\n    let forwardedOps$ = pipe(\n      sharedOps$,\n      filter(\n        operation => !data[operation.key] || !!data[operation.key]!.hasNext\n      ),\n      forward\n    );\n\n    // NOTE: Since below we might delete the cached entry after accessing\n    // it once, cachedOps$ needs to be merged after forwardedOps$\n    let cachedOps$ = pipe(\n      sharedOps$,\n      filter(operation => !!data[operation.key]),\n      map(op => {\n        const serialized = data[op.key]!;\n        const result = deserializeResult(op, serialized, includeExtensions);\n        if (staleWhileRevalidate && !revalidated.has(op.key)) {\n          result.stale = true;\n          revalidated.add(op.key);\n          reexecuteOperation(client, op);\n        }\n\n        return result;\n      })\n    );\n\n    if (!isClient) {\n      // On the server we cache results in the cache as they're resolved\n      forwardedOps$ = pipe(\n        forwardedOps$,\n        tap((result: OperationResult) => {\n          const { operation } = result;\n          if (operation.kind !== 'mutation') {\n            const serialized = serializeResult(result, includeExtensions);\n            data[operation.key] = serialized;\n          }\n        })\n      );\n    } else {\n      // On the client we delete results from the cache as they're resolved\n      cachedOps$ = pipe(cachedOps$, tap(invalidate));\n    }\n\n    return merge([forwardedOps$, cachedOps$]);\n  };\n\n  ssr.restoreData = (restore: SSRData) => {\n    for (const key in restore) {\n      // We only restore data that hasn't been previously invalidated\n      if (data[key] !== null) {\n        data[key] = restore[key];\n      }\n    }\n  };\n\n  ssr.extractData = () => {\n    const result: SSRData = {};\n    for (const key in data) if (data[key] != null) result[key] = data[key]!;\n    return result;\n  };\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\n\n/** A default exchange for debouncing GraphQL requests. */\nexport const dedupExchange: Exchange = ({ forward, dispatchDebug }) => {\n  const inFlightKeys = new Set<number>();\n\n  const filterIncomingOperation = (operation: Operation) => {\n    const { key, kind } = operation;\n    if (kind === 'teardown') {\n      inFlightKeys.delete(key);\n      return true;\n    }\n\n    if (kind !== 'query' && kind !== 'subscription') {\n      return true;\n    }\n\n    const isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n\n    if (isInFlight) {\n      dispatchDebug({\n        type: 'dedup',\n        message: 'An operation has been deduped.',\n        operation,\n      });\n    }\n\n    return !isInFlight;\n  };\n\n  const afterOperationResult = ({ operation, hasNext }: OperationResult) => {\n    if (!hasNext) {\n      inFlightKeys.delete(operation.key);\n    }\n  };\n\n  return ops$ => {\n    const forward$ = pipe(ops$, filter(filterIncomingOperation));\n    return pipe(forward(forward$), tap(afterOperationResult));\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, merge, mergeMap, pipe, share, takeUntil, onPush } from 'wonka';\n\nimport { Exchange } from '../types';\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '../internal';\n\n/** A default exchange for fetching GraphQL requests. */\nexport const fetchExchange: Exchange = ({ forward, dispatchDebug }) => {\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const fetchResults$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return operation.kind === 'query' || operation.kind === 'mutation';\n      }),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.kind === 'teardown' && op.key === key)\n        );\n\n        const body = makeFetchBody(operation);\n        const url = makeFetchURL(operation, body);\n        const fetchOptions = makeFetchOptions(operation, body);\n\n        dispatchDebug({\n          type: 'fetchRequest',\n          message: 'A fetch request is being executed.',\n          operation,\n          data: {\n            url,\n            fetchOptions,\n          },\n        });\n\n        return pipe(\n          makeFetchSource(operation, url, fetchOptions),\n          takeUntil(teardown$),\n          onPush(result => {\n            const error = !result.data ? result.error : undefined;\n\n            dispatchDebug({\n              type: error ? 'fetchError' : 'fetchSuccess',\n              message: `A ${\n                error ? 'failed' : 'successful'\n              } fetch response has been returned.`,\n              operation,\n              data: {\n                url,\n                fetchOptions,\n                value: error || result,\n              },\n            });\n          })\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return operation.kind !== 'query' && operation.kind !== 'mutation';\n      }),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Operation, ExchangeIO, ExchangeInput } from '../types';\nimport { noop } from '../utils';\n\n/** This is always the last exchange in the chain; No operation should ever reach it */\nexport const fallbackExchange: ({\n  dispatchDebug,\n}: Pick<ExchangeInput, 'dispatchDebug'>) => ExchangeIO = ({\n  dispatchDebug,\n}) => ops$ =>\n  pipe(\n    ops$,\n    tap<Operation>(operation => {\n      if (\n        operation.kind !== 'teardown' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        const message = `No exchange has handled operations of kind \"${operation.kind}\". Check whether you've added an exchange responsible for these operations.`;\n\n        dispatchDebug({\n          type: 'fallbackCatch',\n          message,\n          operation,\n        });\n        console.warn(message);\n      }\n    }),\n    /* All operations that skipped through the entire exchange chain should be filtered from the output */\n    filter<any>(() => false)\n  );\n\nexport const fallbackExchangeIO: ExchangeIO = fallbackExchange({\n  dispatchDebug: noop,\n});\n","import { Exchange, ExchangeInput } from '../types';\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeExchanges = (exchanges: Exchange[]) => ({\n  client,\n  forward,\n  dispatchDebug,\n}: ExchangeInput) =>\n  exchanges.reduceRight(\n    (forward, exchange) =>\n      exchange({\n        client,\n        forward,\n        dispatchDebug(event) {\n          dispatchDebug({\n            timestamp: Date.now(),\n            source: exchange.name,\n            ...event,\n          });\n        },\n      }),\n    forward\n  );\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport {\n  filter,\n  make,\n  makeSubject,\n  onEnd,\n  onPush,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n  takeUntil,\n  publish,\n  subscribe,\n  switchMap,\n  fromValue,\n  merge,\n  map,\n  Subscription,\n} from 'wonka';\n\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { DocumentNode } from 'graphql';\n\nimport { composeExchanges, defaultExchanges } from './exchanges';\nimport { fallbackExchange } from './exchanges/fallback';\n\nimport {\n  Exchange,\n  ExchangeInput,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationResult,\n  OperationType,\n  RequestPolicy,\n  PromisifiedSource,\n  DebugEvent,\n} from './types';\n\nimport {\n  createRequest,\n  withPromise,\n  maskTypename,\n  noop,\n  makeOperation,\n  getOperationType,\n} from './utils';\n\n/** Options for configuring the URQL [client]{@link Client}. */\nexport interface ClientOptions {\n  /** Target endpoint URL such as `https://my-target:8080/graphql`. */\n  url: string;\n  /** Any additional options to pass to fetch. */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** An alternative fetch implementation. */\n  fetch?: typeof fetch;\n  /** An ordered array of Exchanges. */\n  exchanges?: Exchange[];\n  /** Activates support for Suspense. */\n  suspense?: boolean;\n  /** The default request policy for requests. */\n  requestPolicy?: RequestPolicy;\n  /** Use HTTP GET for queries. */\n  preferGetMethod?: boolean;\n  /** Mask __typename from results. */\n  maskTypename?: boolean;\n}\n\nexport interface Client {\n  new (options: ClientOptions): Client;\n\n  operations$: Source<Operation>;\n\n  /** Start an operation from an exchange */\n  reexecuteOperation: (operation: Operation) => void;\n  /** Event target for monitoring, e.g. for @urql/devtools */\n  subscribeToDebugTarget?: (onEvent: (e: DebugEvent) => void) => Subscription;\n\n  // These are variables derived from ClientOptions\n  url: string;\n  fetch?: typeof fetch;\n  fetchOptions?: RequestInit | (() => RequestInit);\n  suspense: boolean;\n  requestPolicy: RequestPolicy;\n  preferGetMethod: boolean;\n  maskTypename: boolean;\n\n  createOperationContext(\n    opts?: Partial<OperationContext> | undefined\n  ): OperationContext;\n\n  createRequestOperation<Data = any, Variables = object>(\n    kind: OperationType,\n    request: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Operation<Data, Variables>;\n\n  /** Executes an Operation by sending it through the exchange pipeline It returns an observable that emits all related exchange results and keeps track of this observable's subscribers. A teardown signal will be emitted when no subscribers are listening anymore. */\n  executeRequestOperation<Data = any, Variables = object>(\n    operation: Operation<Data, Variables>\n  ): Source<OperationResult<Data, Variables>>;\n\n  query<Data = any, Variables extends object = {}>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data, Variables>>;\n\n  readQuery<Data = any, Variables extends object = {}>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResult<Data, Variables> | null;\n\n  executeQuery<Data = any, Variables = object>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Source<OperationResult<Data, Variables>>;\n\n  subscription<Data = any, Variables extends object = {}>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): Source<OperationResult<Data, Variables>>;\n\n  executeSubscription<Data = any, Variables = object>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Source<OperationResult<Data, Variables>>;\n\n  mutation<Data = any, Variables extends object = {}>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data, Variables>>;\n\n  executeMutation<Data = any, Variables = object>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Source<OperationResult<Data, Variables>>;\n}\n\nexport const Client: new (opts: ClientOptions) => Client = function Client(\n  this: Client | {},\n  opts: ClientOptions\n) {\n  if (process.env.NODE_ENV !== 'production' && !opts.url) {\n    throw new Error('You are creating an urql-client without a url.');\n  }\n\n  const replays = new Map<number, OperationResult>();\n  const active: Map<number, Source<OperationResult>> = new Map();\n  const queue: Operation[] = [];\n\n  // This subject forms the input of operations; executeOperation may be\n  // called to dispatch a new operation on the subject\n  const { source: operations$, next: nextOperation } = makeSubject<Operation>();\n\n  // We define a queued dispatcher on the subject, which empties the queue when it's\n  // activated to allow `reexecuteOperation` to be trampoline-scheduled\n  let isOperationBatchActive = false;\n  function dispatchOperation(operation?: Operation | void) {\n    isOperationBatchActive = true;\n    if (operation) nextOperation(operation);\n    while ((operation = queue.shift())) nextOperation(operation);\n    isOperationBatchActive = false;\n  }\n\n  /** Defines how result streams are created */\n  const makeResultSource = (operation: Operation) => {\n    let result$ = pipe(\n      results$,\n      filter(\n        (res: OperationResult) =>\n          res.operation.kind === operation.kind &&\n          res.operation.key === operation.key\n      )\n    );\n\n    // Mask typename properties if the option for it is turned on\n    if (client.maskTypename) {\n      result$ = pipe(\n        result$,\n        map(res => ({ ...res, data: maskTypename(res.data) }))\n      );\n    }\n\n    // A mutation is always limited to just a single result and is never shared\n    if (operation.kind === 'mutation') {\n      return pipe(\n        result$,\n        onStart(() => dispatchOperation(operation)),\n        take(1)\n      );\n    }\n\n    const source = pipe(\n      result$,\n      // End the results stream when an active teardown event is sent\n      takeUntil(\n        pipe(\n          operations$,\n          filter(op => op.kind === 'teardown' && op.key === operation.key)\n        )\n      ),\n      switchMap(result => {\n        if (operation.kind !== 'query' || result.stale) {\n          return fromValue(result);\n        }\n\n        return merge([\n          fromValue(result),\n          // Mark a result as stale when a new operation is sent for it\n          pipe(\n            operations$,\n            filter(\n              op =>\n                op.kind === 'query' &&\n                op.key === operation.key &&\n                op.context.requestPolicy !== 'cache-only'\n            ),\n            take(1),\n            map(() => ({ ...result, stale: true }))\n          ),\n        ]);\n      }),\n      onPush(result => {\n        replays.set(operation.key, result);\n      }),\n      onEnd(() => {\n        // Delete the active operation handle\n        replays.delete(operation.key);\n        active.delete(operation.key);\n        // Delete all queued up operations of the same key on end\n        for (let i = queue.length - 1; i >= 0; i--)\n          if (queue[i].key === operation.key) queue.splice(i, 1);\n        // Dispatch a teardown signal for the stopped operation\n        dispatchOperation(\n          makeOperation('teardown', operation, operation.context)\n        );\n      }),\n      share\n    );\n\n    return source;\n  };\n\n  const instance: Client =\n    this instanceof Client ? this : Object.create(Client.prototype);\n  const client: Client = Object.assign(instance, {\n    url: opts.url,\n    fetchOptions: opts.fetchOptions,\n    fetch: opts.fetch,\n    suspense: !!opts.suspense,\n    requestPolicy: opts.requestPolicy || 'cache-first',\n    preferGetMethod: !!opts.preferGetMethod,\n    maskTypename: !!opts.maskTypename,\n\n    operations$,\n\n    reexecuteOperation(operation: Operation) {\n      // Reexecute operation only if any subscribers are still subscribed to the\n      // operation's exchange results\n      if (operation.kind === 'mutation' || active.has(operation.key)) {\n        queue.push(operation);\n        if (!isOperationBatchActive) {\n          Promise.resolve().then(dispatchOperation);\n        }\n      }\n    },\n\n    createOperationContext(opts) {\n      if (!opts) opts = {};\n\n      return {\n        url: client.url,\n        fetchOptions: client.fetchOptions,\n        fetch: client.fetch,\n        preferGetMethod: client.preferGetMethod,\n        ...opts,\n        suspense: opts.suspense || (opts.suspense !== false && client.suspense),\n        requestPolicy: opts.requestPolicy || client.requestPolicy,\n      };\n    },\n\n    createRequestOperation(kind, request, opts) {\n      const requestOperationType = getOperationType(request.query);\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        kind !== 'teardown' &&\n        requestOperationType !== kind\n      ) {\n        throw new Error(\n          `Expected operation of type \"${kind}\" but found \"${requestOperationType}\"`\n        );\n      }\n      return makeOperation(kind, request, client.createOperationContext(opts));\n    },\n\n    executeRequestOperation(operation) {\n      if (operation.kind === 'mutation') {\n        return makeResultSource(operation);\n      }\n\n      return make(observer => {\n        let source = active.get(operation.key);\n\n        if (!source) {\n          active.set(operation.key, (source = makeResultSource(operation)));\n        }\n\n        const isNetworkOperation =\n          operation.context.requestPolicy === 'cache-and-network' ||\n          operation.context.requestPolicy === 'network-only';\n\n        return pipe(\n          source,\n          onStart(() => {\n            const prevReplay = replays.get(operation.key);\n\n            if (operation.kind === 'subscription') {\n              return dispatchOperation(operation);\n            } else if (isNetworkOperation) {\n              dispatchOperation(operation);\n            }\n\n            if (\n              prevReplay != null &&\n              prevReplay === replays.get(operation.key)\n            ) {\n              observer.next(\n                isNetworkOperation ? { ...prevReplay, stale: true } : prevReplay\n              );\n            } else if (!isNetworkOperation) {\n              dispatchOperation(operation);\n            }\n          }),\n          onEnd(observer.complete),\n          subscribe(observer.next)\n        ).unsubscribe;\n      });\n    },\n\n    executeQuery(query, opts) {\n      const operation = client.createRequestOperation('query', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    executeSubscription(query, opts) {\n      const operation = client.createRequestOperation(\n        'subscription',\n        query,\n        opts\n      );\n      return client.executeRequestOperation(operation);\n    },\n\n    executeMutation(query, opts) {\n      const operation = client.createRequestOperation('mutation', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    query(query, variables, context) {\n      if (!context || typeof context.suspense !== 'boolean') {\n        context = { ...context, suspense: false };\n      }\n\n      return withPromise(\n        client.executeQuery(createRequest(query, variables), context)\n      );\n    },\n\n    readQuery(query, variables, context) {\n      let result: OperationResult | null = null;\n\n      pipe(\n        client.query(query, variables, context),\n        subscribe(res => {\n          result = res;\n        })\n      ).unsubscribe();\n\n      return result;\n    },\n\n    subscription(query, variables, context) {\n      return client.executeSubscription(\n        createRequest(query, variables),\n        context\n      );\n    },\n\n    mutation(query, variables, context) {\n      return withPromise(\n        client.executeMutation(createRequest(query, variables), context)\n      );\n    },\n  } as Client);\n\n  let dispatchDebug: ExchangeInput['dispatchDebug'] = noop;\n  if (process.env.NODE_ENV !== 'production') {\n    const { next, source } = makeSubject<DebugEvent>();\n    client.subscribeToDebugTarget = (onEvent: (e: DebugEvent) => void) =>\n      pipe(source, subscribe(onEvent));\n    dispatchDebug = next as ExchangeInput['dispatchDebug'];\n  }\n\n  const exchanges =\n    opts.exchanges !== undefined ? opts.exchanges : defaultExchanges;\n\n  // All exchange are composed into a single one and are called using the constructed client\n  // and the fallback exchange stream\n  const composedExchange = composeExchanges(exchanges);\n\n  // All exchanges receive inputs using which they can forward operations to the next exchange\n  // and receive a stream of results in return, access the client, or dispatch debugging events\n  // All operations then run through the Exchange IOs in a pipeline-like fashion\n  const results$ = share(\n    composedExchange({\n      client,\n      dispatchDebug,\n      forward: fallbackExchange({ dispatchDebug }),\n    })(operations$)\n  );\n\n  // Prevent the `results$` exchange pipeline from being closed by active\n  // cancellations cascading up from components\n  pipe(results$, publish);\n\n  return client;\n} as any;\n\nexport const createClient = (Client as any) as (opts: ClientOptions) => Client;\n","import { pipe, tap } from 'wonka';\nimport { Exchange, Operation } from '../types';\nimport { CombinedError } from '../utils';\n\nexport const errorExchange = ({\n  onError,\n}: {\n  onError: (error: CombinedError, operation: Operation) => void;\n}): Exchange => ({ forward }) => ops$ => {\n  return pipe(\n    forward(ops$),\n    tap(({ error, operation }) => {\n      if (error) {\n        onError(error, operation);\n      }\n    })\n  );\n};\n","import { print } from 'graphql';\n\nimport {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  share,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport { makeResult, makeErrorResult, makeOperation } from '../utils';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationContext,\n  OperationResult,\n} from '../types';\n\nexport interface ObserverLike<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\n/** An abstract observable interface conforming to: https://github.com/tc39/proposal-observable */\nexport interface ObservableLike<T> {\n  subscribe(\n    observer: ObserverLike<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface SubscriptionOperation {\n  query: string;\n  variables?: Record<string, unknown>;\n  key: string;\n  context: OperationContext;\n}\n\nexport type SubscriptionForwarder = (\n  operation: SubscriptionOperation\n) => ObservableLike<ExecutionResult>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  // This has been modelled to work with subscription-transport-ws\n  // See: https://github.com/apollographql/subscriptions-transport-ws#requestoptions--observableexecutionresult-returns-observable-to-execute-the-operation\n  forwardSubscription: SubscriptionForwarder;\n\n  /** This flag may be turned on to allow your subscriptions-transport to handle all operation types */\n  enableAllOperations?: boolean;\n}\n\nexport const subscriptionExchange = ({\n  forwardSubscription,\n  enableAllOperations,\n}: SubscriptionExchangeOpts): Exchange => ({ client, forward }) => {\n  const createSubscriptionSource = (\n    operation: Operation\n  ): Source<OperationResult> => {\n    // This excludes the query's name as a field although subscription-transport-ws does accept it since it's optional\n    const observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: print(operation.query),\n      variables: operation.variables,\n      context: { ...operation.context },\n    });\n\n    return make<OperationResult>(({ next, complete }) => {\n      let isComplete = false;\n      let sub;\n\n      Promise.resolve().then(() => {\n        if (isComplete) return;\n\n        sub = observableish.subscribe({\n          next: result => next(makeResult(operation, result)),\n          error: err => next(makeErrorResult(operation, err)),\n          complete: () => {\n            if (!isComplete) {\n              isComplete = true;\n              if (operation.kind === 'subscription') {\n                client.reexecuteOperation(\n                  makeOperation('teardown', operation, operation.context)\n                );\n              }\n\n              complete();\n            }\n          },\n        });\n      });\n\n      return () => {\n        isComplete = true;\n        if (sub) sub.unsubscribe();\n      };\n    });\n  };\n\n  const isSubscriptionOperation = (operation: Operation): boolean => {\n    const { kind } = operation;\n    return (\n      kind === 'subscription' ||\n      (!!enableAllOperations && (kind === 'query' || kind === 'mutation'))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const subscriptionResults$ = pipe(\n      sharedOps$,\n      filter(isSubscriptionOperation),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.kind === 'teardown' && op.key === key)\n        );\n\n        return pipe(createSubscriptionSource(operation), takeUntil(teardown$));\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isSubscriptionOperation(op)),\n      forward\n    );\n\n    return merge([subscriptionResults$, forward$]);\n  };\n};\n"],"names":["let","types","collectTypes","i","key","node","_extends","graphql","const","query","maskTypename","keys","value","stale","makeOperation","applyDefinitions","console","operationCache","forward","kind","wonka","message","operation","concat","env","operations","response","typenames","merge","addMetadata","op","sharedOps$","inFlightKeys","add","type","filter","ref","ops$","fetchOptions","data","warn","NODE_ENV","dispatchDebug","now","event","shift","results$","result$","replays","dispatchOperation","map","client","operations$","this","reexecuteOperation","opts","requestPolicy","preferGetMethod","url","make","prevReplay","context","result","subscription","withPromise","onEvent","error","body","Map","invalidateQueue","length","params","cachedOps$","deserializeResult","hasNext","forwardedOps$","tap","serialized","stringify","path","extensions","observableish","err"],"mappings":";;;;;;AAqBI,SAAKA,gBAAkBC;MAAcC;;qBAC5BC;;qCAE+B;aAC/BC;;QAELF;;;;;;;;;AAS+C;;;;;MAWnDG;WACOC;;;;;gBASOC;;;;;;;;;;;AAahBC;;;MAGIC;;;;;;;;;;;;;SCzEOC;;;AACwC;;;;gBAKnCC;;;;qBAKI;;;6BAGSC;;;;;;;;;;;qBCLAC;;;;;;SCUtBC;;;AACiC;;;;;;;;;;;;;AAyBzC;;;;;;SCjCKC;;AAQAP;;;wBAG0BI;;;QAOxBI;;;;;;;;;;;;;;;;ACPNR;MACMS,MAAcC;;;;UAKCT;;;;;;WAWjBU;;;;;;YAiBoBC;;;;;QAOVC;QATKA;;;QAeXC,SAAS;;;;UAKPA;;;;;;;;OAlBcF;;;;;;;;+CAwDFG;yBAEZF;;iCAEMG;;;;;;;;;;;;UAWNC;;;;;;;;;qBAWOrB;kCACsBsB;;;iBAEH,cAATC;;;;;;;;;QAzDvBC;aAGiBC,YAAYC;;;OAH7BF,CAOIG,QAPC,EADYX,mBAAAA;kDAoEnBU;;;;;;;;;;;;;;ACzDFtB;;;;;;;;;QCjFe,eAATW;;;;IAKJa,IAAaC;;;QAITC,IADYF;MAEHC;;;;;;;;;;;;;QAeeE;;;;;;;;;AClBhB;;UAGOC;SADbL,SADaM;;;UAOTC;;QAGJJ;;;;;;;;QADFZ;;;;;;;;;;oBAyBoB;;;UAThBiB;;;;;;;;;;;;;;;;;;;;;aC3BFL;;;;;yBAIFlB,QAAQwB,IAARC;;;;;;;;;;;;;;;;;;QCXAC;cAEoBC;;aAEbC;;;;;;;;;;;;;;ACwIbpC,QAAgB;;AAEhBA;;;;;;;;;;;WAYUc,kBAAkBuB;SAAuB;;;;;;;;;;;;QAmB1CC;;;QAKHxB,SAAmBhB;;;UAEnByC;;;MAyCAC,OAAO5B,SAAAA;iCACPE;;;IAmBJgB,SAhBuDnC;;;MAEnD8C,2BACe9C;;;;;;UA5BRyB;MAYHsB;;sBAAwBrC;;;qBAZ5B,kBAdQO;;;;SAAAA;;;;MAqDR+B;QACDC;;UAIUC;;;IAMbC;;;mBAGeC,EAATC;yBACFC;;;iCAEyBR;;;QAMhBM;;;;;4BAIW;;QAEpBE;;;QAJFC;;;;;kBAcUlC,qBAAiB+B;uBAInBA;;;;;2BAQJjC;;;aAIGqC;;;;;;;;;;;YAmBCV;;;;mBAQ6CA;iBAAWW;;;UAhBvD;;;;sBA6BST;;;;;;;;;;;;;;;UAoBhB7B;;;;;8BAQwBuC;UACtBC;;;aASGA;;IAGTC;cACe;;;;;;;MAabrB;;cACQlB;aACYwC;;;;;;IAGtBtB;;wCAIAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBC/Ya7B;YACD8B;;;;;;;;;;;;;;;;;;cRwCd1D;;MAKI2D,QAAeC;;;;;;;;;;;;;;;;;;;;;;;;;;ME0CbC;;;UAGgBC;;;;;;;;;;;;;cAgBlBC;;;;;UAgBEC;;;UAOEV,MAAAZ;gBA/DRgB,SAAKO;;;;YAQLC;;;;;;;UAyD0B5C,GADlBS;;;;;;;;QAUJoC;;;cAMUC,KAAkBC,SAAtBf;;;oBAxHVtD;;kBACI+B;wBAAuCuC;;;;;;;;;;6BAQxBZ;;;;;2BAIFA;sBACTa;;;;;oCAMkBC;;;;;;;;;;;;;;;;aAiHb5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QOxGTA,MAAcc;;UA+CVa;;;;UAMaA;;QALO;;;;gEAjDgBT;;iBAOnCqC,EAAIvD;;;;;;;;;;oBAOD6E;;;;;;;;gCAKaC;;;;;;;;;;;;;;;;;;;;;;;;;;"}
>>>>>>> 0823204efb84884a0322b43e865bb36631ba8251
