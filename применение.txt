diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..4cd274ab2fddb2a1b461fc9b57a20958261316ce
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,4 @@
+node_modules/
+.expo/
+.DS_Store
+TaskManager/node_modules/
diff --git a/TaskManager/App.js b/TaskManager/App.js
index e1244c54396c4a3b09626965d5e4d2373b4db43c..ba37505a4de9e11174397caa4a23ee293b53a7ac 100644
--- a/TaskManager/App.js
+++ b/TaskManager/App.js
@@ -1,27 +1,33 @@
-import React, { useEffect } from 'react';
+import React, { useEffect, useState } from 'react';
 import * as Notifications from 'expo-notifications';
 import { Provider as PaperProvider } from 'react-native-paper';
 import AppNavigator from './src/navigation/AppNavigator';
 import { registerForPushNotificationsAsync } from './src/services/notificationService';
+import SignInScreen from './src/screens/SignInScreen';
 
 export default function App() {
+  const [user, setUser] = useState(null);
   useEffect(() => {
     // Запрос разрешений на уведомления
     registerForPushNotificationsAsync();
 
     // Настройка поведения уведомлений
     Notifications.setNotificationHandler({
       handleNotification: async () => ({
         shouldShowAlert: true,
         shouldPlaySound: true,
         shouldSetBadge: false,
       }),
     });
   }, []);
 
   return (
     <PaperProvider>
-      <AppNavigator />
+      {user ? (
+        <AppNavigator />
+      ) : (
+        <SignInScreen onSignIn={setUser} />
+      )}
     </PaperProvider>
   );
 }
diff --git a/TaskManager/app.json b/TaskManager/app.json
index 734f0de19d655786c9df8b9d45721c90cab8c462..629a1c1b3d47aebb4d98a7fa83d8b1adb8b73a77 100644
--- a/TaskManager/app.json
+++ b/TaskManager/app.json
@@ -8,28 +8,32 @@
     "userInterfaceStyle": "light",
     "splash": {
       "image": "./assets/splash.png",
       "resizeMode": "contain",
       "backgroundColor": "#ffffff"
     },
     "updates": {
       "fallbackToCacheTimeout": 0
     },
     "assetBundlePatterns": [
       "**/*"
     ],
     "ios": {
       "bundleIdentifier": "com.nepovtor.taskmanager",
       "supportsTablet": true
     },
     "android": {
       "package": "com.nepovtor.taskmanager",
       "adaptiveIcon": {
         "foregroundImage": "./assets/adaptive-icon.png",
         "backgroundColor": "#ffffff"
       }
     },
     "web": {
       "favicon": "./assets/favicon.png"
+    },
+    "extra": {
+      "supabaseUrl": "https://your-supabase-url.supabase.co",
+      "supabaseAnonKey": "your-anon-key"
     }
   }
 }
diff --git a/TaskManager/package-lock.json b/TaskManager/package-lock.json
index 0b50ee29082d3acf0ffa38b20bd512b36fd88f10..0f5400f1ed714ce230d0215778a14682ce07aee6 100644
--- a/TaskManager/package-lock.json
+++ b/TaskManager/package-lock.json
@@ -1,41 +1,43 @@
 {
   "name": "task-manager",
   "version": "1.0.0",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
     "": {
       "name": "task-manager",
       "version": "1.0.0",
       "dependencies": {
         "@expo/metro-runtime": "~5.0.4",
         "@react-native-async-storage/async-storage": "^1.21.0",
         "@react-navigation/native": "^6.1.6",
         "@react-navigation/stack": "^6.3.16",
+        "@supabase/supabase-js": "^2.53.0",
         "@types/react": "~18.2.79",
         "expo": "^53.0.20",
+        "expo-auth-session": "^6.2.1",
         "expo-device": "~7.1.4",
         "expo-notifications": "~0.31.4",
         "expo-status-bar": "~1.12.0",
         "react": "18.3.1",
         "react-dom": "18.3.1",
         "react-native": "0.76.0",
         "react-native-gesture-handler": "~2.14.0",
         "react-native-paper": "^5.12.3",
         "react-native-reanimated": "~3.10.0",
         "react-native-safe-area-context": "4.10.0",
         "react-native-screens": "~3.30.0",
         "react-native-vector-icons": "^10.0.3",
         "react-native-web": "^0.20.0",
         "typescript": "~5.3.3"
       },
       "devDependencies": {
         "@babel/core": "^7.24.0"
       }
     },
     "node_modules/@0no-co/graphql.web": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/@0no-co/graphql.web/-/graphql.web-1.2.0.tgz",
       "integrity": "sha512-/1iHy9TTr63gE1YcR5idjx8UREz1s0kFhydf3bBLCXyqjhkIc6igAzTOx3zPifCwFR87tsh/4Pa9cNts6d2otw==",
       "license": "MIT",
       "peerDependencies": {
@@ -3608,50 +3610,125 @@
     },
     "node_modules/@sinclair/typebox": {
       "version": "0.27.8",
       "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
       "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==",
       "license": "MIT"
     },
     "node_modules/@sinonjs/commons": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
       "integrity": "sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==",
       "license": "BSD-3-Clause",
       "dependencies": {
         "type-detect": "4.0.8"
       }
     },
     "node_modules/@sinonjs/fake-timers": {
       "version": "10.3.0",
       "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
       "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
       "license": "BSD-3-Clause",
       "dependencies": {
         "@sinonjs/commons": "^3.0.0"
       }
     },
+    "node_modules/@supabase/auth-js": {
+      "version": "2.71.1",
+      "resolved": "https://registry.npmjs.org/@supabase/auth-js/-/auth-js-2.71.1.tgz",
+      "integrity": "sha512-mMIQHBRc+SKpZFRB2qtupuzulaUhFYupNyxqDj5Jp/LyPvcWvjaJzZzObv6URtL/O6lPxkanASnotGtNpS3H2Q==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/node-fetch": "^2.6.14"
+      }
+    },
+    "node_modules/@supabase/functions-js": {
+      "version": "2.4.5",
+      "resolved": "https://registry.npmjs.org/@supabase/functions-js/-/functions-js-2.4.5.tgz",
+      "integrity": "sha512-v5GSqb9zbosquTo6gBwIiq7W9eQ7rE5QazsK/ezNiQXdCbY+bH8D9qEaBIkhVvX4ZRW5rP03gEfw5yw9tiq4EQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/node-fetch": "^2.6.14"
+      }
+    },
+    "node_modules/@supabase/node-fetch": {
+      "version": "2.6.15",
+      "resolved": "https://registry.npmjs.org/@supabase/node-fetch/-/node-fetch-2.6.15.tgz",
+      "integrity": "sha512-1ibVeYUacxWYi9i0cf5efil6adJ9WRyZBLivgjs+AUpewx1F3xPi7gLgaASI2SmIQxPoCEjAsLAzKPgMJVgOUQ==",
+      "license": "MIT",
+      "dependencies": {
+        "whatwg-url": "^5.0.0"
+      },
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      }
+    },
+    "node_modules/@supabase/postgrest-js": {
+      "version": "1.19.4",
+      "resolved": "https://registry.npmjs.org/@supabase/postgrest-js/-/postgrest-js-1.19.4.tgz",
+      "integrity": "sha512-O4soKqKtZIW3olqmbXXbKugUtByD2jPa8kL2m2c1oozAO11uCcGrRhkZL0kVxjBLrXHE0mdSkFsMj7jDSfyNpw==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/node-fetch": "^2.6.14"
+      }
+    },
+    "node_modules/@supabase/realtime-js": {
+      "version": "2.11.15",
+      "resolved": "https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.11.15.tgz",
+      "integrity": "sha512-HQKRnwAqdVqJW/P9TjKVK+/ETpW4yQ8tyDPPtRMKOH4Uh3vQD74vmj353CYs8+YwVBKubeUOOEpI9CT8mT4obw==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/node-fetch": "^2.6.13",
+        "@types/phoenix": "^1.6.6",
+        "@types/ws": "^8.18.1",
+        "isows": "^1.0.7",
+        "ws": "^8.18.2"
+      }
+    },
+    "node_modules/@supabase/storage-js": {
+      "version": "2.10.4",
+      "resolved": "https://registry.npmjs.org/@supabase/storage-js/-/storage-js-2.10.4.tgz",
+      "integrity": "sha512-cvL02GarJVFcNoWe36VBybQqTVRq6wQSOCvTS64C+eyuxOruFIm1utZAY0xi2qKtHJO3EjKaj8iWJKySusDmAQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/node-fetch": "^2.6.14"
+      }
+    },
+    "node_modules/@supabase/supabase-js": {
+      "version": "2.53.0",
+      "resolved": "https://registry.npmjs.org/@supabase/supabase-js/-/supabase-js-2.53.0.tgz",
+      "integrity": "sha512-Vg9sl0oFn55cCPaEOsDsRDbxOVccxRrK/cikjL1XbywHEOfyA5SOOEypidMvQLwgoAfnC2S4D9BQwJDcZs7/TQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@supabase/auth-js": "2.71.1",
+        "@supabase/functions-js": "2.4.5",
+        "@supabase/node-fetch": "2.6.15",
+        "@supabase/postgrest-js": "1.19.4",
+        "@supabase/realtime-js": "2.11.15",
+        "@supabase/storage-js": "^2.10.4"
+      }
+    },
     "node_modules/@types/babel__core": {
       "version": "7.20.5",
       "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
       "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
       "license": "MIT",
       "dependencies": {
         "@babel/parser": "^7.20.7",
         "@babel/types": "^7.20.7",
         "@types/babel__generator": "*",
         "@types/babel__template": "*",
         "@types/babel__traverse": "*"
       }
     },
     "node_modules/@types/babel__generator": {
       "version": "7.27.0",
       "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
       "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
       "license": "MIT",
       "dependencies": {
         "@babel/types": "^7.0.0"
       }
     },
     "node_modules/@types/babel__template": {
       "version": "7.4.4",
       "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
@@ -3706,72 +3783,87 @@
       "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
       "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
       "license": "MIT",
       "dependencies": {
         "@types/istanbul-lib-report": "*"
       }
     },
     "node_modules/@types/node": {
       "version": "24.1.0",
       "resolved": "https://registry.npmjs.org/@types/node/-/node-24.1.0.tgz",
       "integrity": "sha512-ut5FthK5moxFKH2T1CUOC6ctR67rQRvvHdFLCD2Ql6KXmMuCrjsSsRI9UsLCm9M18BMwClv4pn327UvB7eeO1w==",
       "license": "MIT",
       "dependencies": {
         "undici-types": "~7.8.0"
       }
     },
     "node_modules/@types/node-forge": {
       "version": "1.3.13",
       "resolved": "https://registry.npmjs.org/@types/node-forge/-/node-forge-1.3.13.tgz",
       "integrity": "sha512-zePQJSW5QkwSHKRApqWCVKeKoSOt4xvEnLENZPjyvm9Ezdf/EyDeJM7jqLzOwjVICQQzvLZ63T55MKdJB5H6ww==",
       "license": "MIT",
       "dependencies": {
         "@types/node": "*"
       }
     },
+    "node_modules/@types/phoenix": {
+      "version": "1.6.6",
+      "resolved": "https://registry.npmjs.org/@types/phoenix/-/phoenix-1.6.6.tgz",
+      "integrity": "sha512-PIzZZlEppgrpoT2QgbnDU+MMzuR6BbCjllj0bM70lWoejMeNJAxCchxnv7J3XFkI8MpygtRpzXrIlmWUBclP5A==",
+      "license": "MIT"
+    },
     "node_modules/@types/prop-types": {
       "version": "15.7.15",
       "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
       "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
       "license": "MIT"
     },
     "node_modules/@types/react": {
       "version": "18.2.79",
       "resolved": "https://registry.npmjs.org/@types/react/-/react-18.2.79.tgz",
       "integrity": "sha512-RwGAGXPl9kSXwdNTafkOEuFrTBD5SA2B3iEB96xi8+xu5ddUa/cpvyVCSNn+asgLCTHkb5ZxN8gbuibYJi4s1w==",
       "license": "MIT",
       "dependencies": {
         "@types/prop-types": "*",
         "csstype": "^3.0.2"
       }
     },
     "node_modules/@types/stack-utils": {
       "version": "2.0.3",
       "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
       "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
       "license": "MIT"
     },
+    "node_modules/@types/ws": {
+      "version": "8.18.1",
+      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz",
+      "integrity": "sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
     "node_modules/@types/yargs": {
       "version": "17.0.33",
       "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
       "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
       "license": "MIT",
       "dependencies": {
         "@types/yargs-parser": "*"
       }
     },
     "node_modules/@types/yargs-parser": {
       "version": "21.0.3",
       "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
       "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
       "license": "MIT"
     },
     "node_modules/@urql/core": {
       "version": "5.2.0",
       "resolved": "https://registry.npmjs.org/@urql/core/-/core-5.2.0.tgz",
       "integrity": "sha512-/n0ieD0mvvDnVAXEQgX/7qJiVcvYvNkOHeBvkwtylfjydar123caCXcl58PXFY11oU1oquJocVXHxLAbtv4x1A==",
       "license": "MIT",
       "dependencies": {
         "@0no-co/graphql.web": "^1.0.13",
         "wonka": "^6.3.2"
       }
     },
@@ -5342,64 +5434,94 @@
     },
     "node_modules/expo-application": {
       "version": "6.1.5",
       "resolved": "https://registry.npmjs.org/expo-application/-/expo-application-6.1.5.tgz",
       "integrity": "sha512-ToImFmzw8luY043pWFJhh2ZMm4IwxXoHXxNoGdlhD4Ym6+CCmkAvCglg0FK8dMLzAb+/XabmOE7Rbm8KZb6NZg==",
       "license": "MIT",
       "peerDependencies": {
         "expo": "*"
       }
     },
     "node_modules/expo-asset": {
       "version": "11.1.7",
       "resolved": "https://registry.npmjs.org/expo-asset/-/expo-asset-11.1.7.tgz",
       "integrity": "sha512-b5P8GpjUh08fRCf6m5XPVAh7ra42cQrHBIMgH2UXP+xsj4Wufl6pLy6jRF5w6U7DranUMbsXm8TOyq4EHy7ADg==",
       "license": "MIT",
       "dependencies": {
         "@expo/image-utils": "^0.7.6",
         "expo-constants": "~17.1.7"
       },
       "peerDependencies": {
         "expo": "*",
         "react": "*",
         "react-native": "*"
       }
     },
+    "node_modules/expo-auth-session": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/expo-auth-session/-/expo-auth-session-6.2.1.tgz",
+      "integrity": "sha512-9KgqrGpW7PoNOhxJ7toofi/Dz5BU2TE4Q+ktJZsmDXLoFcNOcvBokh2+mkhG58Qvd/xJ9Z5sAt/5QoOFaPb9wA==",
+      "license": "MIT",
+      "dependencies": {
+        "expo-application": "~6.1.5",
+        "expo-constants": "~17.1.7",
+        "expo-crypto": "~14.1.5",
+        "expo-linking": "~7.1.7",
+        "expo-web-browser": "~14.2.0",
+        "invariant": "^2.2.4"
+      },
+      "peerDependencies": {
+        "react": "*",
+        "react-native": "*"
+      }
+    },
     "node_modules/expo-constants": {
       "version": "17.1.7",
       "resolved": "https://registry.npmjs.org/expo-constants/-/expo-constants-17.1.7.tgz",
       "integrity": "sha512-byBjGsJ6T6FrLlhOBxw4EaiMXrZEn/MlUYIj/JAd+FS7ll5X/S4qVRbIimSJtdW47hXMq0zxPfJX6njtA56hHA==",
       "license": "MIT",
       "dependencies": {
         "@expo/config": "~11.0.12",
         "@expo/env": "~1.0.7"
       },
       "peerDependencies": {
         "expo": "*",
         "react-native": "*"
       }
     },
+    "node_modules/expo-crypto": {
+      "version": "14.1.5",
+      "resolved": "https://registry.npmjs.org/expo-crypto/-/expo-crypto-14.1.5.tgz",
+      "integrity": "sha512-ZXJoUMoUeiMNEoSD4itItFFz3cKrit6YJ/BR0hjuwNC+NczbV9rorvhvmeJmrU9O2cFQHhJQQR1fjQnt45Vu4Q==",
+      "license": "MIT",
+      "dependencies": {
+        "base64-js": "^1.3.0"
+      },
+      "peerDependencies": {
+        "expo": "*"
+      }
+    },
     "node_modules/expo-device": {
       "version": "7.1.4",
       "resolved": "https://registry.npmjs.org/expo-device/-/expo-device-7.1.4.tgz",
       "integrity": "sha512-HS04IiE1Fy0FRjBLurr9e5A6yj3kbmQB+2jCZvbSGpsjBnCLdSk/LCii4f5VFhPIBWJLyYuN5QqJyEAw6BcS4Q==",
       "license": "MIT",
       "dependencies": {
         "ua-parser-js": "^0.7.33"
       },
       "peerDependencies": {
         "expo": "*"
       }
     },
     "node_modules/expo-device/node_modules/ua-parser-js": {
       "version": "0.7.40",
       "resolved": "https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.40.tgz",
       "integrity": "sha512-us1E3K+3jJppDBa3Tl0L3MOJiGhe1C6P0+nIvQAFYbxlMAx0h81eOwLmU57xgqToduDDPx3y5QsdjPfDu+FgOQ==",
       "funding": [
         {
           "type": "opencollective",
           "url": "https://opencollective.com/ua-parser-js"
         },
         {
           "type": "paypal",
           "url": "https://paypal.me/faisalman"
         },
@@ -5427,50 +5549,64 @@
       }
     },
     "node_modules/expo-font": {
       "version": "13.3.2",
       "resolved": "https://registry.npmjs.org/expo-font/-/expo-font-13.3.2.tgz",
       "integrity": "sha512-wUlMdpqURmQ/CNKK/+BIHkDA5nGjMqNlYmW0pJFXY/KE/OG80Qcavdu2sHsL4efAIiNGvYdBS10WztuQYU4X0A==",
       "license": "MIT",
       "dependencies": {
         "fontfaceobserver": "^2.1.0"
       },
       "peerDependencies": {
         "expo": "*",
         "react": "*"
       }
     },
     "node_modules/expo-keep-awake": {
       "version": "14.1.4",
       "resolved": "https://registry.npmjs.org/expo-keep-awake/-/expo-keep-awake-14.1.4.tgz",
       "integrity": "sha512-wU9qOnosy4+U4z/o4h8W9PjPvcFMfZXrlUoKTMBW7F4pLqhkkP/5G4EviPZixv4XWFMjn1ExQ5rV6BX8GwJsWA==",
       "license": "MIT",
       "peerDependencies": {
         "expo": "*",
         "react": "*"
       }
     },
+    "node_modules/expo-linking": {
+      "version": "7.1.7",
+      "resolved": "https://registry.npmjs.org/expo-linking/-/expo-linking-7.1.7.tgz",
+      "integrity": "sha512-ZJaH1RIch2G/M3hx2QJdlrKbYFUTOjVVW4g39hfxrE5bPX9xhZUYXqxqQtzMNl1ylAevw9JkgEfWbBWddbZ3UA==",
+      "license": "MIT",
+      "dependencies": {
+        "expo-constants": "~17.1.7",
+        "invariant": "^2.2.4"
+      },
+      "peerDependencies": {
+        "react": "*",
+        "react-native": "*"
+      }
+    },
     "node_modules/expo-modules-autolinking": {
       "version": "2.1.14",
       "resolved": "https://registry.npmjs.org/expo-modules-autolinking/-/expo-modules-autolinking-2.1.14.tgz",
       "integrity": "sha512-nT5ERXwc+0ZT/pozDoJjYZyUQu5RnXMk9jDGm5lg+PiKvsrCTSA/2/eftJGMxLkTjVI2MXp5WjSz3JRjbA7UXA==",
       "license": "MIT",
       "dependencies": {
         "@expo/spawn-async": "^1.7.2",
         "chalk": "^4.1.0",
         "commander": "^7.2.0",
         "find-up": "^5.0.0",
         "glob": "^10.4.2",
         "require-from-string": "^2.0.2",
         "resolve-from": "^5.0.0"
       },
       "bin": {
         "expo-modules-autolinking": "bin/expo-modules-autolinking.js"
       }
     },
     "node_modules/expo-modules-core": {
       "version": "2.5.0",
       "resolved": "https://registry.npmjs.org/expo-modules-core/-/expo-modules-core-2.5.0.tgz",
       "integrity": "sha512-aIbQxZE2vdCKsolQUl6Q9Farlf8tjh/ROR4hfN1qT7QBGPl1XrJGnaOKkcgYaGrlzCPg/7IBe0Np67GzKMZKKQ==",
       "license": "MIT",
       "dependencies": {
         "invariant": "^2.2.4"
@@ -5480,50 +5616,60 @@
       "version": "0.31.4",
       "resolved": "https://registry.npmjs.org/expo-notifications/-/expo-notifications-0.31.4.tgz",
       "integrity": "sha512-NnGKIFGpgZU66qfiFUyjEBYsS77VahURpSSeWEOLt+P1zOaUFlgx2XqS+dxH3/Bn1Vm7TMj04qKsK5KvzR/8Lw==",
       "license": "MIT",
       "dependencies": {
         "@expo/image-utils": "^0.7.6",
         "@ide/backoff": "^1.0.0",
         "abort-controller": "^3.0.0",
         "assert": "^2.0.0",
         "badgin": "^1.1.5",
         "expo-application": "~6.1.5",
         "expo-constants": "~17.1.7"
       },
       "peerDependencies": {
         "expo": "*",
         "react": "*",
         "react-native": "*"
       }
     },
     "node_modules/expo-status-bar": {
       "version": "1.12.1",
       "resolved": "https://registry.npmjs.org/expo-status-bar/-/expo-status-bar-1.12.1.tgz",
       "integrity": "sha512-/t3xdbS8KB0prj5KG5w7z+wZPFlPtkgs95BsmrP/E7Q0xHXTcDcQ6Cu2FkFuRM+PKTb17cJDnLkawyS5vDLxMA==",
       "license": "MIT"
     },
+    "node_modules/expo-web-browser": {
+      "version": "14.2.0",
+      "resolved": "https://registry.npmjs.org/expo-web-browser/-/expo-web-browser-14.2.0.tgz",
+      "integrity": "sha512-6S51d8pVlDRDsgGAp8BPpwnxtyKiMWEFdezNz+5jVIyT+ctReW42uxnjRgtsdn5sXaqzhaX+Tzk/CWaKCyC0hw==",
+      "license": "MIT",
+      "peerDependencies": {
+        "expo": "*",
+        "react-native": "*"
+      }
+    },
     "node_modules/exponential-backoff": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/exponential-backoff/-/exponential-backoff-3.1.2.tgz",
       "integrity": "sha512-8QxYTVXUkuy7fIIoitQkPwGonB8F3Zj8eEO8Sqg9Zv/bkI7RJAzowee4gr81Hak/dUTpA2Z7VfQgoijjPNlUZA==",
       "license": "Apache-2.0"
     },
     "node_modules/fast-deep-equal": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
       "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
       "license": "MIT"
     },
     "node_modules/fast-json-stable-stringify": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
       "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
       "license": "MIT"
     },
     "node_modules/fb-watchman": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
       "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
       "license": "Apache-2.0",
       "dependencies": {
         "bser": "2.1.1"
@@ -6319,50 +6465,65 @@
       "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-2.2.0.tgz",
       "integrity": "sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==",
       "license": "MIT",
       "dependencies": {
         "is-docker": "^2.0.0"
       },
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/isexe": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
       "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
       "license": "ISC"
     },
     "node_modules/isobject": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz",
       "integrity": "sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==",
       "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
+    "node_modules/isows": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/isows/-/isows-1.0.7.tgz",
+      "integrity": "sha512-I1fSfDCZL5P0v33sVqeTDSpcstAg/N+wF5HS033mogOVIp4B+oHC7oOCsA3axAbBSGTJ8QubbNmnIRN/h8U7hg==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/wevm"
+        }
+      ],
+      "license": "MIT",
+      "peerDependencies": {
+        "ws": "*"
+      }
+    },
     "node_modules/istanbul-lib-coverage": {
       "version": "3.2.2",
       "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
       "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
       "license": "BSD-3-Clause",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/istanbul-lib-instrument": {
       "version": "5.2.1",
       "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
       "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
       "license": "BSD-3-Clause",
       "dependencies": {
         "@babel/core": "^7.12.3",
         "@babel/parser": "^7.14.7",
         "@istanbuljs/schema": "^0.1.2",
         "istanbul-lib-coverage": "^3.2.0",
         "semver": "^6.3.0"
       },
       "engines": {
         "node": ">=8"
       }
     },
diff --git a/TaskManager/package.json b/TaskManager/package.json
index 702ea938c5755955374b2eff6b55c030ed7115d5..08cac965ed4f17f45d090fc0bdd89723f5f351c3 100644
--- a/TaskManager/package.json
+++ b/TaskManager/package.json
@@ -1,37 +1,39 @@
 {
   "name": "task-manager",
   "version": "1.0.0",
   "main": "node_modules/expo/AppEntry.js",
   "scripts": {
     "start": "expo start",
     "android": "expo run:android",
     "ios": "expo run:ios",
     "web": "expo start --web"
   },
   "dependencies": {
+    "@expo/metro-runtime": "~5.0.4",
     "@react-native-async-storage/async-storage": "^1.21.0",
     "@react-navigation/native": "^6.1.6",
     "@react-navigation/stack": "^6.3.16",
+    "@supabase/supabase-js": "^2.53.0",
     "@types/react": "~18.2.79",
     "expo": "^53.0.20",
+    "expo-auth-session": "^6.2.1",
+    "expo-device": "~7.1.4",
+    "expo-notifications": "~0.31.4",
     "expo-status-bar": "~1.12.0",
     "react": "18.3.1",
     "react-dom": "18.3.1",
     "react-native": "0.76.0",
     "react-native-gesture-handler": "~2.14.0",
     "react-native-paper": "^5.12.3",
     "react-native-reanimated": "~3.10.0",
     "react-native-safe-area-context": "4.10.0",
     "react-native-screens": "~3.30.0",
     "react-native-vector-icons": "^10.0.3",
     "react-native-web": "^0.20.0",
-    "typescript": "~5.3.3",
-    "@expo/metro-runtime": "~5.0.4",
-    "expo-notifications": "~0.31.4",
-    "expo-device": "~7.1.4"
+    "typescript": "~5.3.3"
   },
   "devDependencies": {
     "@babel/core": "^7.24.0"
   },
   "private": true
 }
diff --git a/TaskManager/src/components/TaskItem.js b/TaskManager/src/components/TaskItem.js
index 49e675ec82c45d767405af653ef672ac05e078c1..2620a0d16a0d2e2e1079b4dfa41493e8b3cebe37 100644
--- a/TaskManager/src/components/TaskItem.js
+++ b/TaskManager/src/components/TaskItem.js
@@ -1,19 +1,20 @@
 import React from 'react';
 import { TouchableOpacity, View, Text, Button } from 'react-native';
 import styles from '../styles/styles';
 
 const TaskItem = ({ task, navigation, onToggle }) => (
   <TouchableOpacity
     style={styles.item}
     onPress={() => navigation.navigate('TaskDetail', { task })}
   >
     <View>
       <Text style={styles.title}>{task.title}</Text>
       <Text>{task.date}</Text>
+      <Text>{task.category}</Text>
       <Text>{task.status}</Text>
     </View>
     <Button title="Сменить статус" onPress={onToggle} />
   </TouchableOpacity>
 );
 
-export default TaskItem;
\ No newline at end of file
+export default TaskItem;
diff --git a/TaskManager/src/components/TaskWidget.js b/TaskManager/src/components/TaskWidget.js
new file mode 100644
index 0000000000000000000000000000000000000000..5436db9e5f4ec1d16211d1aa6bdcb5a4a1ff8770
--- /dev/null
+++ b/TaskManager/src/components/TaskWidget.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import { Card, Text } from 'react-native-paper';
+
+const TaskWidget = ({ tasks }) => {
+  const today = new Date().toISOString().split('T')[0];
+  const todaysTasks = tasks.filter((t) => t.date.startsWith(today));
+
+  return (
+    <Card style={{ margin: 8 }}>
+      <Card.Title title="Задачи на сегодня" />
+      <Card.Content>
+        {todaysTasks.length === 0 && <Text>Нет задач</Text>}
+        {todaysTasks.map((t) => (
+          <Text key={t.id}>{t.title}</Text>
+        ))}
+      </Card.Content>
+    </Card>
+  );
+};
+
+export default TaskWidget;
diff --git a/TaskManager/src/navigation/AppNavigator.js b/TaskManager/src/navigation/AppNavigator.js
index 2caee3c17b38d7a2d96b5b2e26c34a0f3bfa291e..50f51a9727f4d733d03e33da6f37eaa611ea4683 100644
--- a/TaskManager/src/navigation/AppNavigator.js
+++ b/TaskManager/src/navigation/AppNavigator.js
@@ -1,20 +1,26 @@
 import React from 'react';
 import { NavigationContainer } from '@react-navigation/native';
 import { createStackNavigator } from '@react-navigation/stack';
 import TaskListScreen from '../screens/TaskListScreen';
 import TaskFormScreen from '../screens/TaskFormScreen';
 import TaskDetailScreen from '../screens/TaskDetailScreen';
 
 const Stack = createStackNavigator();
 
 export default function AppNavigator() {
   return (
     <NavigationContainer>
       <Stack.Navigator initialRouteName="TaskList">
         <Stack.Screen name="TaskList" component={TaskListScreen} options={{ title: 'Список задач' }} />
-        <Stack.Screen name="TaskForm" component={TaskFormScreen} options={{ title: 'Новая задача' }} />
+        <Stack.Screen
+          name="TaskForm"
+          component={TaskFormScreen}
+          options={({ route }) => ({
+            title: route.params?.task ? 'Редактирование' : 'Новая задача',
+          })}
+        />
         <Stack.Screen name="TaskDetail" component={TaskDetailScreen} options={{ title: 'Детали задачи' }} />
       </Stack.Navigator>
     </NavigationContainer>
   );
 }
diff --git a/TaskManager/src/screens/SignInScreen.js b/TaskManager/src/screens/SignInScreen.js
new file mode 100644
index 0000000000000000000000000000000000000000..3d40045ac75189d7dcb9d410d4537165cf18304c
--- /dev/null
+++ b/TaskManager/src/screens/SignInScreen.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import { View } from 'react-native';
+import { Button } from 'react-native-paper';
+import { signInWithGoogle } from '../services/authService';
+
+export default function SignInScreen({ onSignIn }) {
+  const handleSignIn = async () => {
+    const user = await signInWithGoogle();
+    if (user) {
+      onSignIn(user);
+    }
+  };
+
+  return (
+    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
+      <Button mode="contained" onPress={handleSignIn}>
+        Войти через Google
+      </Button>
+    </View>
+  );
+}
diff --git a/TaskManager/src/screens/TaskDetailScreen.js b/TaskManager/src/screens/TaskDetailScreen.js
index 880e0fa2db4b9d74337f81613b090e63e3e3fb7e..b582e3c689b02749cca2985852a4f19b9d9a021b 100644
--- a/TaskManager/src/screens/TaskDetailScreen.js
+++ b/TaskManager/src/screens/TaskDetailScreen.js
@@ -3,37 +3,46 @@ import { View } from 'react-native';
 import { Text, Button } from 'react-native-paper';
 import { updateTaskStatus, deleteTask } from '../services/storageService';
 
 export default function TaskDetailScreen({ route, navigation }) {
   const { task } = route.params;
   const [currentTask, setCurrentTask] = useState(task);
 
   const handleStatusChange = async () => {
     const statuses = ['В процессе', 'Завершена', 'Отменена'];
     const nextStatus = statuses[(statuses.indexOf(currentTask.status) + 1) % statuses.length];
     const updatedTask = await updateTaskStatus(currentTask.id, nextStatus);
     setCurrentTask(updatedTask);
   };
 
   const handleDelete = async () => {
     await deleteTask(currentTask.id);
     navigation.goBack();
   };
 
   return (
     <View style={{ flex: 1, padding: 16 }}>
       <Text variant="titleLarge">{currentTask.title}</Text>
       <Text>{currentTask.description}</Text>
       <Text>Дата: {currentTask.date}</Text>
       <Text>Адрес: {currentTask.address}</Text>
+      <Text>Категория: {currentTask.category}</Text>
       <Text>Статус: {currentTask.status}</Text>
 
+      <Button
+        mode="contained"
+        onPress={() => navigation.navigate('TaskForm', { task: currentTask })}
+        style={{ marginVertical: 8 }}
+      >
+        Редактировать
+      </Button>
+
       <Button mode="contained" onPress={handleStatusChange} style={{ marginVertical: 8 }}>
         Изменить статус
       </Button>
 
       <Button mode="contained" onPress={handleDelete} buttonColor="red">
         Удалить задачу
       </Button>
     </View>
   );
 }
diff --git a/TaskManager/src/screens/TaskFormScreen.js b/TaskManager/src/screens/TaskFormScreen.js
index 35263109731064ccf1320df97a6b3bff967d4560..e5ed52bcb7d538404d1cffb8fc409b27acb497c8 100644
--- a/TaskManager/src/screens/TaskFormScreen.js
+++ b/TaskManager/src/screens/TaskFormScreen.js
@@ -1,104 +1,136 @@
-import React, { useState } from 'react';
+import React, { useState, useEffect } from 'react';
 import { View } from 'react-native';
 import { TextInput, Button, Snackbar, Dialog, Portal, RadioButton } from 'react-native-paper';
-import { saveTask } from '../services/storageService';
+import { saveTask, updateTask } from '../services/storageService';
 import { scheduleTaskNotification } from '../services/notificationService';
 
-export default function TaskFormScreen({ navigation }) {
+export default function TaskFormScreen({ navigation, route }) {
   const [title, setTitle] = useState('');
   const [description, setDescription] = useState('');
   const [date, setDate] = useState('');
   const [time, setTime] = useState('');
   const [address, setAddress] = useState('');
   const [snackbarVisible, setSnackbarVisible] = useState(false);
   const [dialogVisible, setDialogVisible] = useState(false);
   const [reminderTime, setReminderTime] = useState('10');
   const [repeat, setRepeat] = useState('none'); // none | daily | weekly
+  const [category, setCategory] = useState('Работа');
+  const editingTask = route.params?.task;
+
+  useEffect(() => {
+    if (editingTask) {
+      setTitle(editingTask.title);
+      setDescription(editingTask.description);
+      const dateObj = new Date(editingTask.date);
+      setDate(dateObj.toISOString().split('T')[0]);
+      setTime(dateObj.toISOString().split('T')[1].slice(0,5));
+      setAddress(editingTask.address);
+      setReminderTime(editingTask.reminder || '10');
+      setRepeat(editingTask.repeat || 'none');
+      setCategory(editingTask.category || 'Работа');
+    }
+  }, [editingTask]);
 
   const isValidDate = (value) => /^\d{4}-\d{2}-\d{2}$/.test(value);
   const isValidTime = (value) => /^([01]\d|2[0-3]):([0-5]\d)$/.test(value);
 
   const handleSave = () => {
     if (!title.trim()) {
       alert('Введите заголовок задачи');
       return;
     }
     if (!isValidDate(date)) {
       alert('Введите дату в формате YYYY-MM-DD');
       return;
     }
     if (!isValidTime(time)) {
       alert('Введите время в формате HH:mm');
       return;
     }
 
     const taskDateTime = new Date(`${date}T${time}:00`);
     if (isNaN(taskDateTime.getTime()) || taskDateTime < new Date()) {
       alert('Дата и время некорректны');
       return;
     }
 
     setDialogVisible(true);
   };
 
   const confirmSave = async () => {
     const taskDateTime = new Date(`${date}T${time}:00`);
-
     const newTask = {
-      id: Date.now().toString(),
+      id: editingTask ? editingTask.id : Date.now().toString(),
       title,
       description,
       date: taskDateTime.toISOString(),
       address,
-      status: 'В процессе',
+      status: editingTask ? editingTask.status : 'В процессе',
       reminder: reminderTime,
-      repeat, // новое поле
+      repeat,
+      category,
     };
 
-    await saveTask(newTask);
+    if (editingTask) {
+      await updateTask(newTask);
+    } else {
+      await saveTask(newTask);
+    }
+
     await scheduleTaskNotification(newTask);
 
     setDialogVisible(false);
     setSnackbarVisible(true);
 
     setTimeout(() => navigation.goBack(), 1000);
   };
 
   return (
     <View style={{ flex: 1, padding: 16 }}>
       <TextInput label="Заголовок" value={title} onChangeText={setTitle} style={{ marginBottom: 8 }} />
       <TextInput label="Описание" value={description} onChangeText={setDescription} style={{ marginBottom: 8 }} />
       <TextInput label="Дата (YYYY-MM-DD)" value={date} onChangeText={setDate} style={{ marginBottom: 8 }} />
       <TextInput label="Время (HH:mm)" value={time} onChangeText={setTime} style={{ marginBottom: 8 }} />
       <TextInput label="Адрес" value={address} onChangeText={setAddress} style={{ marginBottom: 8 }} />
+      <RadioButton.Group onValueChange={setCategory} value={category}>
+        <RadioButton.Item label="Работа" value="Работа" />
+        <RadioButton.Item label="Учёба" value="Учёба" />
+        <RadioButton.Item label="Личное" value="Личное" />
+      </RadioButton.Group>
 
-      <Button mode="contained" onPress={handleSave}>Сохранить</Button>
+      <Button mode="contained" onPress={handleSave}>
+        {editingTask ? 'Обновить' : 'Сохранить'}
+      </Button>
 
       <Portal>
         <Dialog visible={dialogVisible} onDismiss={() => setDialogVisible(false)}>
           <Dialog.Title>Напоминание</Dialog.Title>
           <Dialog.Content>
             <RadioButton.Group onValueChange={setReminderTime} value={reminderTime}>
               <RadioButton.Item label="За 10 минут" value="10" />
               <RadioButton.Item label="За 30 минут" value="30" />
               <RadioButton.Item label="За 1 час" value="60" />
             </RadioButton.Group>
 
             <RadioButton.Group onValueChange={setRepeat} value={repeat}>
               <RadioButton.Item label="Не повторять" value="none" />
               <RadioButton.Item label="Каждый день" value="daily" />
               <RadioButton.Item label="Каждую неделю" value="weekly" />
             </RadioButton.Group>
           </Dialog.Content>
           <Dialog.Actions>
             <Button onPress={confirmSave}>OK</Button>
           </Dialog.Actions>
         </Dialog>
       </Portal>
 
-      <Snackbar visible={snackbarVisible} onDismiss={() => setSnackbarVisible(false)} duration={1500}>
-        Задача сохранена!
+      <Snackbar
+        visible={snackbarVisible}
+        onDismiss={() => setSnackbarVisible(false)}
+        duration={1500}
+      >
+        {editingTask ? 'Задача обновлена!' : 'Задача сохранена!'}
       </Snackbar>
     </View>
   );
 }
diff --git a/TaskManager/src/screens/TaskListScreen.js b/TaskManager/src/screens/TaskListScreen.js
index 6dfbd4c74b751557e96a07dd926b46e26f41a676..b546c247b14a09dabb3602133ef433b5f4acb771 100644
--- a/TaskManager/src/screens/TaskListScreen.js
+++ b/TaskManager/src/screens/TaskListScreen.js
@@ -1,81 +1,123 @@
 import React, { useEffect, useState } from 'react';
 import { View, FlatList } from 'react-native';
-import { FAB, Appbar, Menu } from 'react-native-paper';
+import { FAB, Appbar, Menu, Searchbar } from 'react-native-paper';
 import { useIsFocused } from '@react-navigation/native';
 import { getTasks } from '../services/storageService';
 import TaskItem from '../components/TaskItem';
+import TaskWidget from '../components/TaskWidget';
 import styles from '../styles/styles';
 
 export default function TaskListScreen({ navigation }) {
   const [tasks, setTasks] = useState([]);
   const [menuVisible, setMenuVisible] = useState(false);
+  const [filterMenuVisible, setFilterMenuVisible] = useState(false);
   const [sortType, setSortType] = useState('date'); // date | status
+  const [filterStatus, setFilterStatus] = useState('all');
+  const [searchQuery, setSearchQuery] = useState('');
   const isFocused = useIsFocused();
 
   useEffect(() => {
     if (isFocused) {
       loadTasks();
     }
-  }, [isFocused]);
+  }, [isFocused, filterStatus, searchQuery]);
 
   const loadTasks = async () => {
     const storedTasks = await getTasks();
-    setTasks(sortTasks(storedTasks || [], sortType));
+    let list = storedTasks || [];
+    if (filterStatus !== 'all') {
+      list = list.filter((t) => t.status === filterStatus);
+    }
+    if (searchQuery) {
+      const q = searchQuery.toLowerCase();
+      list = list.filter((t) => t.title.toLowerCase().includes(q));
+    }
+    setTasks(sortTasks(list, sortType));
   };
 
   const sortTasks = (tasksArray, type) => {
     if (type === 'status') {
       return [...tasksArray].sort((a, b) => a.status.localeCompare(b.status));
     }
     return [...tasksArray].sort((a, b) => new Date(a.date) - new Date(b.date));
   };
 
   const changeSort = (type) => {
     setSortType(type);
     setTasks(sortTasks(tasks, type));
     setMenuVisible(false);
   };
 
+  const changeFilter = (status) => {
+    setFilterStatus(status);
+    setFilterMenuVisible(false);
+  };
+
   return (
     <View style={{ flex: 1 }}>
       {/* Appbar с меню сортировки */}
       <Appbar.Header>
         <Appbar.Content title="Список задач" />
         <Menu
           visible={menuVisible}
           onDismiss={() => setMenuVisible(false)}
           anchor={
             <Appbar.Action
               icon="sort"
               color="white"
               onPress={() => setMenuVisible(true)}
             />
           }
         >
           <Menu.Item onPress={() => changeSort('date')} title="Сортировать по дате" />
           <Menu.Item onPress={() => changeSort('status')} title="Сортировать по статусу" />
         </Menu>
+        <Menu
+          visible={filterMenuVisible}
+          onDismiss={() => setFilterMenuVisible(false)}
+          anchor={
+            <Appbar.Action
+              icon="filter"
+              color="white"
+              onPress={() => setFilterMenuVisible(true)}
+            />
+          }
+        >
+          <Menu.Item onPress={() => changeFilter('all')} title="Все" />
+          <Menu.Item onPress={() => changeFilter('В процессе')} title="Активные" />
+          <Menu.Item onPress={() => changeFilter('Завершена')} title="Завершённые" />
+          <Menu.Item onPress={() => changeFilter('Отменена')} title="Отменённые" />
+        </Menu>
       </Appbar.Header>
 
+      <Searchbar
+        placeholder="Поиск"
+        value={searchQuery}
+        onChangeText={setSearchQuery}
+        style={{ margin: 8 }}
+      />
+
+      <TaskWidget tasks={tasks} />
+
       {/* Список задач */}
       <FlatList
         data={tasks}
         keyExtractor={(item) => item.id}
         renderItem={({ item }) => (
           <TaskItem
             task={item}
             onPress={() => navigation.navigate('TaskDetail', { task: item })}
           />
         )}
         contentContainerStyle={{ flexGrow: 1 }}
       />
 
       {/* Кнопка добавления задачи */}
       <FAB
         style={styles.fab}
         icon="plus"
         onPress={() => navigation.navigate('TaskForm')}
       />
     </View>
   );
 }
diff --git a/TaskManager/src/services/authService.js b/TaskManager/src/services/authService.js
new file mode 100644
index 0000000000000000000000000000000000000000..c406ffb8d73a341b59133c70d7fb0cb3a462e02f
--- /dev/null
+++ b/TaskManager/src/services/authService.js
@@ -0,0 +1,9 @@
+export const signInWithGoogle = async () => {
+  // Placeholder auth implementation
+  try {
+    return { name: 'User', id: Date.now().toString() };
+  } catch (e) {
+    console.error('Auth error', e);
+    return null;
+  }
+};
diff --git a/TaskManager/src/services/storageService.js b/TaskManager/src/services/storageService.js
index 865015dc61980f858f0a0b3e756a0516b2b4b723..1fc8d3a4cc6cff217e1d8abc6b2a2f5e06b8169f 100644
--- a/TaskManager/src/services/storageService.js
+++ b/TaskManager/src/services/storageService.js
@@ -1,40 +1,54 @@
 import AsyncStorage from '@react-native-async-storage/async-storage';
+import { syncTasks } from './supabaseService';
 
 const TASKS_KEY = 'TASKS';
 
 export const getTasks = async () => {
   try {
     const tasks = await AsyncStorage.getItem(TASKS_KEY);
     return tasks ? JSON.parse(tasks) : [];
   } catch (error) {
     console.error('Ошибка при загрузке задач', error);
     return [];
   }
 };
 
 export const saveTask = async (task) => {
   try {
     const tasks = await getTasks();
     tasks.push(task);
     await AsyncStorage.setItem(TASKS_KEY, JSON.stringify(tasks));
+    await syncTasks(tasks);
   } catch (error) {
     console.error('Ошибка при сохранении задачи', error);
   }
 };
 
 export const updateTaskStatus = async (taskId, newStatus) => {
   const tasks = await getTasks();
   const index = tasks.findIndex((t) => t.id === taskId);
   if (index !== -1) {
     tasks[index].status = newStatus;
     await AsyncStorage.setItem(TASKS_KEY, JSON.stringify(tasks));
+    await syncTasks(tasks);
     return tasks[index];
   }
   return null;
 };
 
+export const updateTask = async (task) => {
+  const tasks = await getTasks();
+  const index = tasks.findIndex((t) => t.id === task.id);
+  if (index !== -1) {
+    tasks[index] = task;
+    await AsyncStorage.setItem(TASKS_KEY, JSON.stringify(tasks));
+    await syncTasks(tasks);
+  }
+};
+
 export const deleteTask = async (taskId) => {
   const tasks = await getTasks();
   const filteredTasks = tasks.filter((t) => t.id !== taskId);
   await AsyncStorage.setItem(TASKS_KEY, JSON.stringify(filteredTasks));
+  await syncTasks(filteredTasks);
 };
diff --git a/TaskManager/src/services/supabaseService.js b/TaskManager/src/services/supabaseService.js
new file mode 100644
index 0000000000000000000000000000000000000000..e99386a5abc0f3859c6e7cb5b0ef5ef0bf629104
--- /dev/null
+++ b/TaskManager/src/services/supabaseService.js
@@ -0,0 +1,15 @@
+import { createClient } from '@supabase/supabase-js';
+import Constants from 'expo-constants';
+
+const { supabaseUrl, supabaseAnonKey } = Constants.expoConfig.extra || {};
+
+export const supabase = createClient(supabaseUrl, supabaseAnonKey);
+
+export const syncTasks = async (tasks) => {
+  if (!supabaseUrl || !supabaseAnonKey) return;
+  try {
+    await supabase.from('tasks').upsert(tasks);
+  } catch (e) {
+    console.error('Supabase sync error', e);
+  }
+};
